userBets = {}

async def dvp(call, user):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    if user.location == '–•—ç–≤–µ–Ω–±—É—Ä–≥':
        games = await db.Matches.filter(~Q(status=3)).order_by('-status')
        text = "–î–û–°–ö–ê –î–í–ü - –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å –æ—à–∏–≤–∞—é—Ç—Å—è —Å—Ç–∞–≤–æ—á–Ω–∏–∫–∏ - —Å–∞–º—ã–µ —ç–ª–∏—Ç–Ω—ã–µ –ª—é–¥–∏ —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ –∫–∞–∫–æ–µ-—Ç–æ –∏–≥—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (–∏ —ç—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–±—ã—Ç–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –Ω–∞—à–∏–º –º–∏—Ä–æ–º - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —á—å—è-—Ç–æ —Ñ–∞–Ω—Ç–∞–∑–∏—è) –∏, –≤ —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥—ã, –∑–∞–±—Ä–∞—Ç—å —Å–µ–±–µ –±–∞–±–∫–∏!\n\n–í—ã–±–µ—Ä–∏ —Å–æ–±—ã—Ç–∏–µ:\n"
        tournaments = []
        if games:
            for game in games:
                if game.tournament and game.tournament not in tournaments:
                    tournaments.append(game.tournament)
                    counted = await db.Matches.filter(tournament=game.tournament).count()
                    markup.add(InlineKeyboardButton('{}'.format(game.tournament), callback_data="bets_{}".format(game.id)))
                    text += "\n{} - {} –∏–≥—Ä".format(game.tournament, counted)
        else:
            text = "–î–û–°–ö–ê –î–í–ü - –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å –æ—à–∏–≤–∞—é—Ç—Å—è —Å—Ç–∞–≤–æ—á–Ω–∏–∫–∏ - —Å–∞–º—ã–µ —ç–ª–∏—Ç–Ω—ã–µ –ª—é–¥–∏ —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –Ω–∞ –∫–∞–∫–æ–µ-—Ç–æ –∏–≥—Ä–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ (–∏ —ç—Ç–æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–±—ã—Ç–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –Ω–∞—à–∏–º –º–∏—Ä–æ–º - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —á—å—è-—Ç–æ —Ñ–∞–Ω—Ç–∞–∑–∏—è) –∏, –≤ —Å–ª—É—á–∞–µ –ø–æ–±–µ–¥—ã, –∑–∞–±—Ä–∞—Ç—å —Å–µ–±–µ –±–∞–±–∫–∏!\n\n–£–≤—ã, –ø–æ–∫–∞ —Ç—É—Ç –Ω–∏–∫–æ–≥–æ –∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç"
        markup.add(InlineKeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏', callback_data="activeBets"))
        markup.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø–ª–æ—â–∞–¥—å', callback_data="nav_bigcity_centr"))
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)



async def bets_(call, user):
    if user.location == '–•—ç–≤–µ–Ω–±—É—Ä–≥':
        checkGame = await db.Matches.get_or_none(id=call.data.split('_')[1]).first()
        if checkGame and checkGame.status != 3:
            text = "‚ö†Ô∏è–í —Å–æ–±—ã—Ç–∏–∏ –º–æ–∂–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∏—Ç—Å—è –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏, —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ —Å–æ–±—ã—Ç–∏–∏‚ö†Ô∏è\n\n–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π:\n"
            games = await db.Matches.filter(~Q(status=3), tournament=checkGame.tournament).order_by('-status')
            for game in games:
                allbets = (game.w1sum + game.w2sum)
                kf_player1 = (allbets / game.w1sum) - ((allbets / game.w1sum) * (game.commision / 100))
                if kf_player1 <= 1: kf_player1 = 1.01
                kf_player2 = (allbets / game.w2sum) - ((allbets / game.w2sum) * (game.commision / 100))
                if kf_player2 <= 1: kf_player2 = 1.01
                if game.status == 2:
                    text += "\n‚ö†Ô∏èLIVE‚ö†Ô∏è\n[{}] {} vs {}\nx{} ({}üí∞) vs x{} ({}üí∞)\n–ü–æ—Å—Ç–∞–≤–∏—Ç—å: /bet_{}".format(game.tournament, game.p1, game.p2, round(kf_player1, 2), game.w1sum, round(kf_player2, 2), game.w2sum, game.id)
                elif game.status == 1:
                    text += "\n[{}] {} vs {}\nx{} ({}üí∞) vs x{} ({}üí∞)\n–ü–æ—Å—Ç–∞–≤–∏—Ç—å: /bet_{}".format(game.tournament, game.p1, game.p2, round(kf_player1, 2), game.w1sum, round(kf_player2, 2), game.w2sum, game.id)
        else:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç :("
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton('–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∞–≤–∫–∏', callback_data="activeBets"))
        markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="dvp"))
        markup.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –ø–ª–æ—â–∞–¥—å', callback_data="nav_bigcity_centr"))
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)


async def match_(m, user):
    if m.chat.id != m.from_user.id: return
    result = m.text.replace('/match_', '', 1).replace('@TowerOfHeaven_bot', '', 1)
    game = await db.Matches.get_or_none(id=result)
    if game:
        allbets = (game.w1sum + game.w2sum)
        kf_player1 = (allbets / game.w1sum) - ((allbets / game.w1sum) * (game.commision / 100))
        if kf_player1 <= 1: kf_player1 = 1.01
        kf_player2 = (allbets / game.w2sum) - ((allbets / game.w2sum) * (game.commision / 100))
        if kf_player2 <= 1: kf_player2 = 1.01
        if game.status == 2:
            text = "‚ö†Ô∏èLIVE‚ö†Ô∏è\n[{}] {} vs {}\nx{} ({}üí∞) vs x{} ({}üí∞)".format(game.tournament, game.p1, game.p2, round(kf_player1, 2), game.w1sum, round(kf_player2, 2), game.w2sum)
        elif game.status == 1:
            text = "\n[{}] {} vs {}\nx{} ({}üí∞) vs x{} ({}üí∞)\n–°—Ç–∞–≤–∫–∞: /bet_{}".format(game.tournament, game.p1, game.p2, round(kf_player1, 2), game.w1sum, round(kf_player2, 2), game.w2sum, game.id)
        elif game.status == 3:
            text = "‚ö†Ô∏èMatch over‚ö†Ô∏è\n[{}] {} vs {}\nüèÜ{}üèÜ".format(game.tournament, game.p1, game.p2, game.winner)
    else:
        text = "–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω :("
    await bot.send_message(m.chat.id, text)


async def activeBets(call, user):
    user = await db.Users.get(user_id=call.from_user.id)
    allBets = await db.Bets.filter(idplayer=user.id)
    text = "–¢–≤–æ–∏ —Å—Ç–∞–≤–∫–∏:\n"
    if allBets:
        for bet in allBets:
            game = await db.Matches.get_or_none(id=bet.idmatch)
            if game and game.status != 3:
                if bet.winner == 'p1': winner = game.p1
                else: winner = game.p2
                text += "\n{}üí∞ –Ω–∞ {} /match_{}".format(bet.summ, winner, bet.idmatch)
    else:
        text = "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫."
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton('–ö –¥–æ—Å–∫–µ', callback_data="dvp"))
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

async def bet(m, user):
    if m.chat.id != m.from_user.id: return
    user = await db.Users.get(user_id=m.from_user.id)
    result = m.text.replace('/bet_', '', 1).replace('@TowerOfHeaven_bot', '', 1)
    game = await db.Matches.get_or_none(id=result)
    if game:
        if game.status == 1:
            text = "–ù–∞ –∫–æ–≥–æ —Å—Ç–∞–≤–∏–º?\n\n{} vs {}".format(game.p1, game.p2)
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton('{}'.format(game.p1), callback_data="bet_{}_p1".format(game.id)))
            markup.add(InlineKeyboardButton('{}'.format(game.p2), callback_data="bet_{}_p2".format(game.id)))
            markup.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É', callback_data="dvp"))
        elif game.status == 2:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å."
        else:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å."
    else:
        text = "–¢–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
    try:
        await bot.send_message(m.chat.id, text, reply_markup=markup)
    except:
        await bot.send_message(m.chat.id, text)


async def bet_(call, user):
    gameId = call.data.split("_")[1]
    winner = call.data.split("_")[2]
    user = await db.Users.get(user_id=call.from_user.id)
    game = await db.Matches.get_or_none(id=gameId)
    if game:
        if game.status == 1:
            text = "–°–∫–æ–ª—å–∫–æ —Å—Ç–∞–≤–∏–º? –£ —Ç–µ–±—è {}üí∞".format(user.money)
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton('50üí∞', callback_data="betDone_{}_{}_50".format(game.id, winner)), InlineKeyboardButton('100üí∞', callback_data="betDone_{}_{}_100".format(game.id, winner)))
            markup.add(InlineKeyboardButton('200üí∞', callback_data="betDone_{}_{}_200".format(game.id, winner)), InlineKeyboardButton('500üí∞', callback_data="betDone_{}_{}_500".format(game.id, winner)))
            markup.add(InlineKeyboardButton('1000üí∞', callback_data="betDone_{}_{}_1000".format(game.id, winner)), InlineKeyboardButton('2000üí∞', callback_data="betDone_{}_{}_2000".format(game.id, winner)))
            markup.add(InlineKeyboardButton('5000üí∞', callback_data="betDone_{}_{}_5000".format(game.id, winner)), InlineKeyboardButton('10000üí∞', callback_data="betDone_{}_{}_10000".format(game.id, winner)))
            markup.add(InlineKeyboardButton('–û—Ç–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É', callback_data="dvp"))
        elif game.status == 2:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å."
        else:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å."
    else:
        text = "–¢–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
    try:
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)
    except:
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)

async def betDone_(call, user):
    gameId = call.data.split("_")[1]
    winner = call.data.split("_")[2]
    bet = int(call.data.split("_")[3])
    user = await db.Users.get(user_id=call.from_user.id)
    game = await db.Matches.get_or_none(id=gameId)
    if game:
        if game.status == 1:
            if user.money >= bet:
                await db.Bets.create(idplayer=user.id, idmatch=gameId, summ=bet, winner=winner, status=1)
                await db.Users.filter(id=user.id).update(money=F('money') - bet)
                if winner == 'p1':
                    await db.Matches.filter(id=gameId).update(w1sum=F('w1sum') + bet)
                else:
                    await db.Matches.filter(id=gameId).update(w2sum=F('w2sum') + bet)
                text = "–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!"
            else:
                text = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞"
        elif game.status == 2:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –Ω–∞—á–∞–ª–æ—Å—å."
        else:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å."
    else:
        text = "–¢–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)



@dp.message_handler(commands=['ownaddmatch'])
async def ownaddmatch(m):
    if str(m.from_user.id) in owner or str(m.from_user.id) in devs:
        match = m.text.replace('/ownaddmatch ', '', 1).split(':')
        try: 
            print(match[3])
        except:
            await m.reply("/ownaddmatch –ò–≤–µ–Ω—Ç:–ò–≥—Ä–æ–∫1:–ò–≥—Ä–æ–∫2:–ö–æ–º–º–∏—Å–∏—è")
            return
        newMatch = await db.Matches.create(tournament=match[0], p1=match[1], p2=match[2], commision=match[3], w1sum=1, w2sum=1, status=1)
        await m.reply("–ë—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ:\n–ò–≤–µ–Ω—Ç: {}\n–ò–≥—Ä–æ–∫ 1: {}\n–ò–≥—Ä–æ–∫ 2: {}\n–ö–æ–º–º–∏—Å–∏—è —Å–æ–±—ã—Ç–∏—è: {}%".format(match[0], match[1], match[2], match[3]))

@dp.message_handler(commands=['ownmatches'])
async def ownmatches(m):
    if str(m.from_user.id) in owner or str(m.from_user.id) in devs:
        matches = await db.Matches.filter(~Q(status=3))
        text = "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n"
        for match in matches:
            if match.status == 1: status = '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
            elif match.status == 2: status = 'Live'
            else: status = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            text += "\n–ò–≤–µ–Ω—Ç: {}. {} vs {}. –°—Ç–∞—Ç—É—Å: {} /owneditmatch_{}".format(match.tournament, match.p1, match.p2, status, match.id)
        await m.answer(text)


@dp.message_handler(lambda m:m.text and m.text.startswith('/owneditmatch_'))
async def owneditmatch_(m):
    if m.chat.id != m.from_user.id: return
    user = await db.Users.get(user_id=m.from_user.id)
    result = m.text.replace('/owneditmatch_', '', 1).replace('@TowerOfHeaven_bot', '', 1)
    game = await db.Matches.get_or_none(id=result)
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    if game:
        if game.status == 1: status = '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ'
        elif game.status == 2: status = 'Live'
        else: game = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        text = "\n–ò–≤–µ–Ω—Ç: {}. {} vs {}. –°—Ç–∞—Ç—É—Å: {}".format(game.tournament, game.p1, game.p2, status, game.id)
        allbets = (game.w1sum + game.w2sum)
        kf_player1 = (allbets / game.w1sum) - ((allbets / game.w1sum) * (game.commision / 100))
        if kf_player1 < 1: kf_player1 = 1.00
        kf_player2 = (allbets / game.w2sum) - ((allbets / game.w2sum) * (game.commision / 100))
        if kf_player2 < 1: kf_player2 = 1.00
        text += "\n\n[{}] {} vs {}\nx{} ({}üí∞) vs x{} ({}üí∞)".format(game.tournament, game.p1, game.p2, round(kf_player1, 2), game.w1sum, round(kf_player2, 2), game.w2sum)
        if game.status == 1:
            markup.add(InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ LIVE', callback_data="editMatch_{}_status".format(game.id)))
        markup.add(InlineKeyboardButton('–ü–æ–±–µ–¥–∞ {}'.format(game.p1), callback_data="editMatch_{}_p1Win".format(game.id)))
        markup.add(InlineKeyboardButton('–ü–æ–±–µ–¥–∞ {}'.format(game.p2), callback_data="editMatch_{}_p2Win".format(game.id)))
        markup.add(InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç', callback_data="editMatch_{}_canceled".format(game.id)))
    else:
        text = "–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω"
    await bot.send_message(m.chat.id, text, reply_markup=markup)



async def editMatch_(call, user):
    game = await db.Matches.get_or_none(id=call.data.split("_")[1])
    if game:
        await bot.edit_message_text("–û–±—Ä–∞–±–æ—Ç–∫–∞...", call.message.chat.id, call.message.message_id)
        if call.data.split("_")[2] == 'status':
            if game.status == 1:
                await db.Matches.filter(id=game.id).update(status=2)
                text = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ LIVE"
                allBets = await db.Bets.filter(idmatch=game.id, status=1)
                for bet in allBets:
                    user = await db.Users.get_or_none(id=bet.idplayer)
                    try:
                        await bot.send_message(user.user_id, "–ù–∞—á–∞–ª–æ—Å—å —Å–æ–±—ã—Ç–∏–µ:\n[{}] {} vs {}".format(game.tournament, game.p1, game.p2))
                        await asyncio.sleep(.5)
                    except:
                        pass
        elif call.data.split("_")[2] == 'p1Win':
            allBets = await db.Bets.filter(idmatch=game.id, winner='p1', status=1)
            for bet in allBets:
                allbets = (game.w1sum + game.w2sum)
                kf_player1 = (allbets / game.w1sum) - ((allbets / game.w1sum) * (game.commision / 100))
                if kf_player1 <= 1: kf_player1 = 1.01
                award = int(bet.summ * kf_player1)
                await db.Users.filter(id=bet.idplayer).update(money=F('money') + award)
                user = await db.Users.get_or_none(id=bet.idplayer)
                try:
                    await bot.send_message(user.user_id, "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤ –º–∞—Ç—á–µ {} vs {} –ø–æ–±–µ–¥–∏–ª–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–ó–∞—á–∏—Å–ª–µ–Ω–æ: {}üí∞".format(game.p1, game.p2, award))
                    await asyncio.sleep(1)
                except:
                    pass
            text = "–í—ã–∏–≥—Ä—ã—à–∏ —Ä–æ–∑–¥–∞–Ω—ã, —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–æ."
            await db.Matches.filter(id=game.id).update(status=3, winner=game.p1)
            awardForPlayers = ((game.w1sum + game.w2sum) * game.commision / 200)
            player1 = await db.Users.get_or_none(username=game.p1)
            if player1:
                await db.Users.filter(id=player1.id).update(money=F('money') + awardForPlayers)
                try:
                    await bot.send_message(player1.user_id, "–ó–∞ —Å—Ç–∞–≤–∫–∏ –≤ –≤–∞—à–µ–π –∏–≥—Ä–µ –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {}üí∞".format(awardForPlayers))
                except:
                    pass
            player2 = await db.Users.get_or_none(username=game.p2).first()
            if player2:
                await db.Users.filter(id=player2.id).update(money=F('money') + awardForPlayers)
                try:
                    await bot.send_message(player2.user_id, "–ó–∞ —Å—Ç–∞–≤–∫–∏ –≤ –≤–∞—à–µ–π –∏–≥—Ä–µ –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {}üí∞".format(awardForPlayers))
                except:
                    pass
        elif call.data.split("_")[2] == 'p2Win':
            allBets = await db.Bets.filter(idmatch=game.id, winner='p2', status=1)
            for bet in allBets:
                allbets = (game.w1sum + game.w2sum)
                kf_player2 = (allbets / game.w2sum) - ((allbets / game.w2sum) * (game.commision / 100))
                if kf_player2 <= 1: kf_player2 = 1.01
                award = int(bet.summ * kf_player2)
                await db.Users.filter(id=bet.idplayer).update(money=F('money') + award)
                user = await db.Users.get_or_none(id=bet.idplayer)
                try:
                    await bot.send_message(user.user_id, "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤ –º–∞—Ç—á–µ {} vs {} –ø–æ–±–µ–¥–∏–ª–∞. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–ó–∞—á–∏—Å–ª–µ–Ω–æ: {}üí∞".format(game.p1, game.p2, award))
                    await asyncio.sleep(1)
                except:
                    pass
            await db.Matches.filter(id=game.id).update(status=3, winner=game.p2)
            awardForPlayers = ((game.w1sum + game.w2sum) * game.commision / 200)
            player1 = await db.Users.get_or_none(username=game.p1)
            if player1:
                await db.Users.filter(id=player1.id).update(money=F('money') + awardForPlayers)
                try:
                    await bot.send_message(player1.user_id, "–ó–∞ —Å—Ç–∞–≤–∫–∏ –≤ –≤–∞—à–µ–π –∏–≥—Ä–µ –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {}üí∞".format(awardForPlayers))
                except:
                    pass
            player2 = await db.Users.get_or_none(username=game.p2).first()
            if player2:
                await db.Users.filter(id=player2.id).update(money=F('money') + awardForPlayers)
                try:
                    await bot.send_message(player2.user_id, "–ó–∞ —Å—Ç–∞–≤–∫–∏ –≤ –≤–∞—à–µ–π –∏–≥—Ä–µ –≤–∞–º –∑–∞—á–∏—Å–ª–µ–Ω–æ {}üí∞".format(awardForPlayers))
                except:
                    pass
            text = "–í—ã–∏–≥—Ä—ã—à–∏ —Ä–æ–∑–¥–∞–Ω—ã, —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–æ."
        elif call.data.split("_")[2] == 'canceled':
            allBets = await db.Bets.filter(idmatch=game.id, winner__in=['p2', 'p1'], status=1)
            for bet in allBets:
                award = int(bet.summ)
                await db.Users.filter(id=bet.idplayer).update(money=F('money') + award)
                user = await db.Users.get_or_none(id=bet.idplayer)
                try:
                    await bot.send_message(user.user_id, "–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤ –º–∞—Ç—á–µ {} vs {} –±—ã–ª–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.\n–ó–∞—á–∏—Å–ª–µ–Ω–æ: {}üí∞".format(game.p1, game.p2, award))
                    await asyncio.sleep(1)
                except:
                    pass
            await db.Matches.filter(id=game.id).update(status=3, winner='–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')
            text = "–°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã, —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–æ."
        await bot.send_message(call.message.chat.id, text)