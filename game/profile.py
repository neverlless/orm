
class GetQuantity(StatesGroup):
    restore = State()
    bamboo = State()
    geroin = State()
    boyara = State()
    viagra = State()
    sredne = State()
    big = State()
    ilovestas = State()
    restoreSmall = State()
    restoreMedium = State()
    koltGrav = State()



async def profile(m, user):
    if user:
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        item1 = types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å')
        item2 = types.KeyboardButton('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å')
        item4 = types.KeyboardButton('–ù–∞–≤–∏–≥–∞—Ü–∏—è')
        markup.row(item1, item2)
        markup.row(item4)
        _itemAtk = user.lvl / 100
        if user.frak and user.frak != '':
            frak = await db.Fraks.get_or_none(name=user.frak).only('atk', 'leader', 'zam', 'name')
            if frak:
                _frakAtk = frak.atk / 100
            if frak and frak.leader == user.id: status = "–í–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞ {}".format(frak.name)
            elif frak and frak.zam == user.id: status = "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∫–ª–∞–Ω–∞ {}".format(frak.name)
            elif frak: status = "–£—á–∞—Å—Ç–Ω–∏–∫ –∫–ª–∞–Ω–∞ {}".format(frak.name)
        else:
            _frakAtk = 0
            status = "–ò–∑–≥–æ–π"

        weapon = await db.Inventory.get_or_none(type='–û—Ä—É–∂–∏–µ', idplayer=user.id, active=2).only('bonus').first()
        if weapon:
            _playerAtk = user.atk * (weapon.bonus / 100)
            playerAtk = int(_playerAtk + (user.atk * _frakAtk))
        else:
            playerAtk = user.atk * _frakAtk
            user.visualitem = "–ö—É–ª–∞–∫–∏ - –º–æ–∏ –¥—Ä—É–∑—å—è"
        if user.lvl < 100:
            _needExp = int(user.lvl / 2) * 25
            needexp = int(user.lvl * 150) + _needExp
        elif user.lvl < 200:
            needexp = int(user.lvl * 150) * (user.lvl / 50)
        else:
            needexp = int(user.lvl * 150) * (user.lvl / 15)
        if needexp >= 10000:
            _needExp = needexp / 1000
            needExp = "{}k".format(round(_needExp, 2))
            if user.exp < 1000:
                userExp = user.exp
            else:
                _userExp = user.exp / 1000
                userExp = "{}k".format(round(_userExp, 2))
        else:
            needExp = needexp
            userExp = user.exp
        inventorySize = await db.getInventorySize(user)
        allItmsArmorPvP = await db.Inventory.filter(idplayer=user.id, active=2, atk_block__gt=0).only('atk_block')
        armorPvP = 0
        if allItmsArmorPvP:
            for i in allItmsArmorPvP:
                armorPvP += i.atk_block
        rand = random.randint(1, 100)
        text = ""
        if user.ban != 0 and user.ban != 2:
            timeToEndBan = int((user.banEnds - time.time()) / 86400)
            text += "\n‚õîÔ∏è*BANNED*‚õîÔ∏è\n\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω —Ä–µ—à–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ''{}'' –Ω–∞ {}–¥–Ω. \n\n–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∏—á–∏–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–º–º—å—é–Ω–∏—Ç–∏-–º–µ–Ω–µ–¥–∂–µ—Ä—É/—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–∞ https://toh.fdu.su/team .\n\n".format(user.banreason, timeToEndBan)
        if user.badge:
            text += "{}\n".format(user.badge)
        text += "üë§[{}](tg://user?id={})\n".format(user.username, user.user_id)
        text += "üë•{}\n".format(status)
        if user.location == '–ì–æ—Ä–æ–¥':
            text += "üì°*{}*üè™*{}*\n".format(user.location, user.position)
        elif user.location == '–•—ç–≤–µ–Ω–±—É—Ä–≥' or user.location == '–ö–∞–≤–∞–π–Ω—è' or user.location == '–û–∫–µ–∞–Ω—É—Å' or user.location == '–†–∞–¥–∞—Ä':
            text += "üì°*{}*üè™*{}*\n".format(user.location, user.position)
        else:
            text += "üì°*{}*\n".format(user.location)
        text += "üîÜ{} (‚ú®*{}/{}*)\n\n".format(user.lvl, userExp, needExp)
        checkHlop = await db.Buffs.exists(owner=user.id, status=1, type='hlopushka')
        if user.location != '–°–≤–∞–ª–∫–∞ HD' and not checkHlop: text += "‚ù§Ô∏è{}/{}".format(user.nowhp, user.hp)
        else: text += "‚ù§Ô∏è‚ùì"
        text += "üõ°{}(‚öîÔ∏è{}%)\n".format(user.armor, armorPvP)
        text += "üî™{}(+{})\n".format(user.atk, int(playerAtk))
        text += "‚ö°Ô∏è{}/100 üçó{}/100".format(user.energy, user.eat)
        pp = await db.getpp(user)
        if pp <= 0: pp = 0
        text += "\nüíÆ{} pp (#{})\n\n".format(int(pp), user.ppTop)
        if user.location == '–ö–∞–≤–∞–π–Ω—è' or user.location == '–ó–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã–π –ª–µ—Å': text += "‚ùÑÔ∏è{}/100\n".format(user.zamoroz)
        elif user.location == '–û–∫–µ–∞–Ω—É—Å' or user.location == '–û–∫—É—Å –õ–æ–∫—É—Å': text += "‚òÅÔ∏è{}/100\n".format(user.humidity)
        else: text += ""
        text += "\nüí∞{} üíé{} üîò{}\n\nüì¶{}/{}".format(user.money, user.almaz, user.uppts, inventorySize, user.inventorySizeMax)
        if user.visualitem:
            text += "\n\nüó°–≠–∫–∏–ø–∏—Ä–æ–≤–∞–Ω–æ: {}\n\n".format(user.visualitem)
        text += "\nüÜî - {}\n".format(user.id)
        text += "\n\n–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å - /profile"
        await bot.send_message(m.chat.id, text, parse_mode='markdown', reply_markup=markup)



async def profileFull(m, user):
    if user:
        _itemAtk = user.lvl / 100
        if user.frak and user.frak != '':
            frak = await db.Fraks.get_or_none(name=user.frak)
            if frak:
                _frakAtk = frak.atk / 100
            if frak and frak.leader == user.id: status = "–í–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞ {}".format(frak.name)
            elif frak and frak.zam == user.id: status = "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –∫–ª–∞–Ω–∞ {}".format(frak.name)
            elif frak: status = "–£—á–∞—Å—Ç–Ω–∏–∫ –∫–ª–∞–Ω–∞ {}".format(frak.name)
        else:
            _frakAtk = 0
            status = "–ò–∑–≥–æ–π"
        weapon = await db.Inventory.get_or_none(name=user.item, idplayer=user.id, active=2).first()
        if weapon:
            _playerAtk = user.atk * (weapon.bonus / 100)
            checkBuff = await db.Buffs.get_or_none(owner=user.id, type='atk', status=1).first()
            if checkBuff:
                playerAtk = int(_playerAtk + (user.atk * (checkBuff.num / 100)) + (user.atk * _frakAtk))
            else:
                playerAtk = int(_playerAtk + (user.atk * _frakAtk))
        else:
            checkBuff = await db.Buffs.get_or_none(owner=user.id, type='atk', status=1).first()
            if checkBuff:
                playerAtk = int((user.atk * (checkBuff.num / 100)) + (user.atk * _frakAtk))
            else:
                playerAtk = user.atk * _frakAtk
            user.item = "–ö—É–ª–∞–∫–∏ - –º–æ–∏ –¥—Ä—É–∑—å—è"
        if user.lvl < 100:
            _needExp = int(user.lvl / 2) * 25
            needexp = int(user.lvl * 150) + _needExp
        elif user.lvl < 200:
            needexp = int(user.lvl * 150) * (user.lvl / 50)
        else:
            needexp = int(user.lvl * 150) * (user.lvl / 15)
        if needexp >= 10000:
            _needExp = needexp / 1000
            needExp = "{}k".format(round(_needExp, 2))
            if user.exp < 1000:
                userExp = user.exp
            else:
                _userExp = user.exp / 1000
                userExp = "{}k".format(round(_userExp, 2))
        else:
            needExp = needexp
            userExp = user.exp
        inventorySize = await db.getInventorySize(user)
        allItmsArmorPvP = await db.Inventory.filter(idplayer=user.id, active=2, atk_block__gt=1).only('atk_block')
        armorPvP = 0
        if allItmsArmorPvP:
            for i in allItmsArmorPvP:
                armorPvP += i.atk_block
        rand = random.randint(1, 100)
        text = ""
        if user.ban != 0 and user.ban != 2:
            timeToEndBan = int((user.banEnds - time.time()) / 86400)
            text += "\n‚õîÔ∏è*BANNED*‚õîÔ∏è\n\n–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω —Ä–µ—à–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–µ: ''{}'' –Ω–∞ {}–¥–Ω. \n\n–ï—Å–ª–∏ –≤—ã –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∏—á–∏–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ /report. –ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞ –º–æ–∂–µ—Ç –ø–æ–≤–ª–µ—á—å –±–µ—Å—Å—Ä–æ—á–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ /report.\n\n".format(user.banreason, timeToEndBan)
            await bot.send_message(m.chat.id, text, parse_mode='markdown')
            return
        if user.badge:
            text += "{}\n".format(user.badge)
        text += "üë§[{}](tg://user?id={})\n".format(user.username, user.user_id)
        if user.location == '–ì–æ—Ä–æ–¥':
            text += "üì°*{}*üè™*{}*\n".format(user.location, user.position)
        elif user.location == '–•—ç–≤–µ–Ω–±—É—Ä–≥' or user.location == '–ö–∞–≤–∞–π–Ω—è' or user.location == '–û–∫–µ–∞–Ω—É—Å' or user.location == '–†–∞–¥–∞—Ä':
            text += "üì°*{}*üè™*{}*\n".format(user.location, user.position)
        else:
            text += "üì°*{}*\n".format(user.location)
        pp = await db.getpp(user)
        if pp <= 0: pp = 0
        text += "üîÜ{} (‚ú®*{}/{}*)\n\n".format(user.lvl, userExp, needExp)
        checkHlop = await db.Buffs.get_or_none(owner=user.id, status=1, type='hlopushka').first()
        if user.location != '–°–≤–∞–ª–∫–∞ HD' and not checkHlop: text += "‚ù§Ô∏è{}/{}".format(user.nowhp, user.hp)
        else: text += "‚ù§Ô∏è‚ùì"
        checkBuff = await db.Buffs.get_or_none(type='armor', owner=user.id, status=1).first()
        if checkBuff: user.armor += checkBuff.num
        text += "üõ°{}(‚öîÔ∏è{}%)\n".format(user.armor, armorPvP)
        text += "üî™{}(+{})\n".format(user.atk, int(playerAtk))
        text += "‚ö°Ô∏è{}/100 üçó{}/100".format(user.energy, user.eat)
        if user.location == '–ö–∞–≤–∞–π–Ω—è' or user.location == '–ó–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã–π –ª–µ—Å': text += "‚ùÑÔ∏è{}\n".format(user.zamoroz)
        elif user.location == '–û–∫–µ–∞–Ω—É—Å' or user.location == '–û–∫—É—Å –õ–æ–∫—É—Å': text += "‚òÅÔ∏è{}\n".format(user.humidity)
        else: text += ""
        text += "\nüíÆ{} pp (#{})\n\n".format(int(pp), user.ppTop)
        text += "üí∞{} üíé{} üîò{}\n".format(user.money, user.almaz, user.uppts)
        if user.heavenCurrency > 0:
            text += "üîª{}".format(user.heavenCurrency)
        if user.kawaiCurrency > 0:
            text += "üßä{}".format(user.kawaiCurrency)
        if user.oceanCurrency > 0:
            text += "üíß{}".format(user.oceanCurrency)
        if user.radarCurrency > 0:
            text += "‚ô¶Ô∏è{}".format(user.radarCurrency)
        if user.metroCurrency > 0:
            text += "üóù{}".format(user.metroCurrency)
        text += "\n\nüó°–û—Ä—É–∂–∏–µ: {} (/weapon)\n\nüì¶{}/{}\n".format(user.item, inventorySize, user.inventorySizeMax)
        checkHouse = await db.Houses.get_or_none(owner=user.id)
        if checkHouse:
            text += "\nüèö{} (/home)".format(checkHouse.name)
            if checkHouse.lvl >= 5:
                currentSize = await db.getHouseInventorySize(user)
                text += " (üì¶{}/{})\n".format(currentSize, checkHouse.inventory)
        text += "\nü§ù{} ‚≠êÔ∏è{}/5\n\n".format(user.tradecount, user.tradenum)
        text += "üÜî - {}".format(user.id)
        if user.booster >= int(time.time()):
            timeLeft = user.booster - int(time.time())
            if timeLeft <= 172800:
                timeleft = timeLeft / 3600
                boostLeft = "{}—á".format(round(timeleft, 2))
            else:
                timeleft = timeLeft / 86400
                boostLeft = "{}–¥–Ω".format(int(timeleft))
            text += "\n\n‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã –µ—â–µ {}".format(boostLeft)
        checkBuff = await db.Buffs.exists(owner=user.id, status=1)
        if checkBuff:
            text += "\n\n–ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞—Ñ—Ñ—ã:"
            checkBuffs = await db.Buffs.filter(owner=user.id, status=1)
            for buff in checkBuffs:
                timeLeft = int((buff.timeEnd - int(time.time())) / 60)
                if buff.type == 'atk':
                    text += "\n–ê–∫—Ç–∏–≤–µ–Ω –±–æ–Ω—É—Å –∫ üî™–ê—Ç–∞–∫–µ. +{}% ({} –º–∏–Ω)".format(buff.num, timeLeft)
                elif buff.type == 'creet':
                    text += "\n–ê–∫—Ç–∏–≤–µ–Ω –±–æ–Ω—É—Å –∫ —à–∞–Ω—Å—É üí¢–ö—Ä–∏—Ç —É—Ä–æ–Ω–∞. +{}% ({} –º–∏–Ω)".format(buff.num, timeLeft)
                elif buff.type == 'uv':
                    text += "\n–ê–∫—Ç–∏–≤–µ–Ω –±–æ–Ω—É—Å –∫ —à–∞–Ω—Å—É üí®–£–≤–æ—Ä–æ—Ç–∞. {}% ({} –º–∏–Ω)".format(buff.num, timeLeft)
                elif buff.type == 'armor':
                    text += "\n–ê–∫—Ç–∏–≤–µ–Ω –±–æ–Ω—É—Å –∫ üõ°–ë—Ä–æ–Ω–µ. +{} ({} –º–∏–Ω)".format(buff.num, timeLeft)
                elif buff.type == 'antiZamoroz':
                    text += "\n–ë–æ–Ω—É—Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∫ ‚ùÑÔ∏è–•–æ–ª–æ–¥—É {}% ({} –º–∏–Ω)".format(buff.num, timeLeft)
                elif buff.type == 'antiHumidity':
                    text += "\n–ë–æ–Ω—É—Å —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –∫ ‚òÅÔ∏è–í–ª–∞–∂–Ω–æ—Å—Ç–∏ {}% ({} –º–∏–Ω)".format(buff.num, timeLeft)
                elif buff.type == 'electro':
                    text += "\n–ê–∫—Ç–∏–≤–µ–Ω –±–æ–Ω—É—Å –∫ ‚ö°Ô∏è–ó–∞—Ä—è–∂–µ–Ω–Ω–æ–º—É —É–¥–∞—Ä—É. +{}% ({} –º–∏–Ω)".format(buff.num, timeLeft)
                elif buff.type == 'hlopushka':
                    text += "\n–ê–∫—Ç–∏–≤–µ–Ω –¥–µ–±–∞—Ñ—Ñ - –û–≥–ª—É—à–µ–Ω–∏–µ ({} –º–∏–Ω)".format(timeLeft)
        await bot.send_message(m.chat.id, text, parse_mode='markdown')



#####################
#   SKILLS&BADGES   #
#####################

async def stats(m):
    if m.chat.id == m.from_user.id:
        await bot.send_message(m.chat.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–µ—Ö–∞–ª–∞ –Ω–∞ http://toh.fdu.su/profile\n\n–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é /token")


async def badges(m, user):
    if m.chat.id == m.from_user.id:
        passLvl = 0
        passKiller = 0
        passPvp = 0
        passMoney = 0
        passTop1 = 0
        passTop2 = 0
        passTop3 = 0
        passKach = 0
        passProd = 0
        passSupporter = 0
        achs = await db.Ach.get(user_id=m.from_user.id)
        forKiller = achs.ubica.split("|")
        forPvp = achs.pvpsher.split("|")
        forProd = achs.prodavan.split("|")
        if user.lvl >= 100: passLvl = 1
        if int(forKiller[0]) >= 10000: passKiller = 1
        if int(forPvp[0]) >= 100: passPvp = 1
        if user.money >= 1000000: passMoney = 1
        if user.ppTop == 1: passTop1 = 1
        if user.ppTop == 2: passTop2 = 1
        if user.ppTop == 3: passTop3 = 1
        if user.atk + user.hp >= 2000: passKach = 1
        if int(forProd[0]) >= 1000: passProd = 1
        if user.supporter >= int(time.time()): passSupporter = 1
        text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–∫–∏:\n"
        if passLvl == 1: text += "\n‚ú¥Ô∏è–û–ø—ã—Ç–Ω—ã–π‚ú¥Ô∏è - /set_badge_lvl"
        if passKiller == 1: text += "\nü™ì–ö–∏–ª–ª–µ—Äü™ì - /set_badge_killer"
        if passPvp == 1: text += "\nü§º‚Äç‚ôÇÔ∏è–ù–∞—Å—Ç–æ—Ä–∞–∂–∏–≤–∞—é—â–∞—è –º—É–∑—ã–∫–∞ü§º‚Äç‚ôÇÔ∏è - /set_badge_pvp"
        if passMoney == 1: text += "\nüí∏–ú–∏–ª–ª–∏–æ–Ω–µ—Äüí∏ - /set_badge_millioner"
        if passTop1 == 1: text += "\nü•á–ò–∑–±—Ä–∞–Ω–Ω—ã–πü•á - /set_badge_top1"
        if passTop2 == 1: text += "\nü•à–û—Å–æ–±–µ–Ω–Ω—ã–πü•à - /set_badge_top2"
        if passTop3 == 1: text += "\nü•â–¢—ë–º–Ω–∞—è –ª–æ—à–∞–¥–∫–∞ü•â - /set_badge_top3"
        if passKach == 1: text += "\nüí™–õ—é–±–∏—Ç–µ–ª—å –∫–∞—á–∞–ª–∫–∏üí™ - /set_badge_kach"
        if passProd == 1: text += "\nü§ù–£—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Üü§ù - /set_badge_prod"
        if passSupporter == 1: text += "\n‚ô•Ô∏èToH supporter‚ô•Ô∏è - /set_badge_supporter"
        if len(text) < 25: text += "\n–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—è–≤–∏—Ç—Å—è –∏ —Ç—ã —Å–º–æ–∂–µ—à—å —É–∫—Ä–∞—Å–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å —Ç–∏—Ç—É–ª–æ–º!"
        await bot.send_message(m.chat.id, text)


async def set_badge(m, user):
    if m.chat.id == m.from_user.id:
        pass
    else:
        return
    result = m.text.replace('/set_badge_', '', 1).replace('@TowerOfHeaven_bot', '', 1)
    if m.chat.id == m.from_user.id:
        user = await db.Users.get(user_id=m.from_user.id)
        achs = await db.Ach.get(user_id=m.from_user.id)
        forKiller = achs.ubica.split("|")
        forPvp = achs.pvpsher.split("|")
        forProd = achs.prodavan.split("|")
        if user.lvl >= 100 and result == 'lvl': badge = "‚ú¥Ô∏è–û–ø—ã—Ç–Ω—ã–π‚ú¥Ô∏è"
        elif int(forKiller[0]) >= 10000 and result == 'killer': badge = "ü™ì–ö–∏–ª–ª–µ—Äü™ì"
        elif int(forPvp[0]) >= 100 and result == 'pvp': badge = "ü§º‚Äç‚ôÇÔ∏è–ù–∞—Å—Ç–æ—Ä–∞–∂–∏–≤–∞—é—â–∞—è –º—É–∑—ã–∫–∞ü§º‚Äç‚ôÇÔ∏è"
        elif user.money >= 1000000 and result == 'millioner': badge = "üí∏–ú–∏–ª–ª–∏–æ–Ω–µ—Äüí∏"
        elif user.ppTop == 1 and result == 'top1': badge = "ü•á–ò–∑–±—Ä–∞–Ω–Ω—ã–πü•á"
        elif user.ppTop == 2 and result == 'top2': badge = "ü•à–û—Å–æ–±–µ–Ω–Ω—ã–πü•à"
        elif user.ppTop == 3 and result == 'top3': badge = "ü•â–¢—ë–º–Ω–∞—è –ª–æ—à–∞–¥–∫–∞ü•â"
        elif user.atk + user.hp >= 2000 and result == 'kach': badge = "üí™–õ—é–±–∏—Ç–µ–ª—å –∫–∞—á–∞–ª–∫–∏üí™"
        elif int(forProd[0]) >= 1000 and result == 'prod': badge = "ü§ù–£—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Üü§ù"
        elif user.supporter >= int(time.time()) and result == 'supporter': badge = '‚ô•Ô∏èToH supporter‚ô•Ô∏è'
        else:
            await bot.send_message(m.chat.id, "–¢–∞–∫–æ–≥–æ –∑–Ω–∞—á–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏–±–æ –æ–Ω –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        await db.Users.filter(id=user.id).update(badge=badge)
        await bot.send_message(m.chat.id, "–ó–Ω–∞—á–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ!")


async def getToken(m, user):
    if m.chat.id == m.from_user.id:
        user = await db.Users.exists(user_id=m.from_user.id)
        if user:
            user = await db.Users.get(user_id=m.from_user.id).first()
            if user.token and user.token != '':
                await bot.send_message(m.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ toh.fdu.su\n`{}`".format(user.token), parse_mode='markdown')
            else:
                newToken = db.ABC(20)
                await db.Users.filter(user_id=m.from_user.id).update(token=newToken)
                await bot.send_message(m.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ toh.fdu.su\n`{}`".format(newToken), parse_mode='markdown')

async def skills(m, user):
    if m.chat.id == m.from_user.id:
        user = await db.Users.exists(user_id=m.from_user.id)
        if user:
            user = await db.Users.get(user_id=m.from_user.id).first()
            text = "–¢–≤–æ–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ üîò–û—á–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏: {}".format(user.uppts)
            #text += "\n\n–ì–æ—Ç–æ–≤–∫–∞ - {}üî∫".format(user.cooker)
            text += "\n\n–í–ª–∞–¥–µ–Ω–∏–µ –æ—Ä—É–∂–∏–µ–º - {}üî∫".format(user.masterWeapon)
            text += "\n\n–ü—å—è–Ω–∞—è —É–¥–∞—á–∞ (–∞–≤—Ç–æ–º–∞—Ç) - {}üî∫".format(user.luckerAvtomat)
            text += "\n\n–ö–∞—Ä–º–∞–Ω–Ω–∞—è —Å–º–µ–∫–∞–ª–∫–∞ - {}üî∫".format(user.skillInv)
            text += "\n\n–ö—Ä–∞–∂–∞ - {}üî∫".format(user.krazha)
            text += "\n\n–ê–Ω—Ç–∏-–∫—Ä–∞–∂–∞ - {}üî∫".format(user.antikrazha)
            text += "\n\n–†–µ–∞–∫—Ü–∏—è PvP - {}üî∫".format(user.reactionPvP)
            if user.uppts > 0:
                markup = InlineKeyboardMarkup()
                markup.row_width = 2
                markup.add(InlineKeyboardButton('–ü—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤', callback_data="skillsUp"))
                await bot.send_message(m.chat.id, text, reply_markup=markup)
            else:
                await bot.send_message(m.chat.id, text)

async def skillsUp(call):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    user = await db.Users.exists(user_id=call.from_user.id)
    if user:
        user = await db.Users.get(user_id=call.from_user.id).first()
        nameskills = {'masterWeapon': '–í–ª–∞–¥–µ–Ω–∏–µ –æ—Ä—É–∂–∏–µ–º', 'luckerAvtomat': '–ü—å—è–Ω–∞—è —É–¥–∞—á–∞ (–∞–≤—Ç–æ–º–∞—Ç)', 'skillInv': '–ö–∞—Ä–º–∞–Ω–Ω–∞—è —Å–º–µ–∫–∞–ª–∫–∞', 'krazha': '–ö—Ä–∞–∂–∞', 'antikrazha': '–ê–Ω—Ç–∏-–∫—Ä–∞–∂–∞', 'reactionPvP': '–†–µ–∞–∫—Ü–∏—è PvP'}
        descr = {'masterWeapon': '–ù–∞–≤—ã–∫ –≤–ª–∞–¥–µ–Ω–∏—è –æ—Ä—É–∂–∏–µ–º —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å–æ–±–æ–≥–æ –Ω–∞–≤—ã–∫–∞', 'luckerAvtomat': '–ù–∞–≤—ã–∫ –ø—å—è–Ω–æ–π —É–¥–∞—á–∏ –ø–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å —Å–æ—Ä–≤–∞—Ç—å –∫—É—à –≤ –∞–≤—Ç–æ–º–∞—Ç–µ', 'skillInv': '–ù–∞–≤—ã–∫ –∫–∞—Ä–º–∞–Ω–Ω–æ–π —Å–º–µ–∫–∞–ª–∫–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–º–µ—â–∞—Ç—å –±–æ–ª—å—à–µ –≤–µ—â–µ–π –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ', 'krazha': '–ù–∞–≤—ã–∫ –∫—Ä–∞–∂–∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–æ—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã —É –∏–≥—Ä–æ–∫–æ–≤', 'antikrazha': '–ù–∞–≤—ã–∫ –∞–Ω—Ç–∏-–∫—Ä–∞–∂–∏ —Ä–∞—Å—à–∏—Ä—è–µ—Ç –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –ø–æ–ø—ã—Ç–∫—É –∫—Ä–∞–∂–∏ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –≤–∞–º.', 'reactionPvP': '–ù–∞–≤—ã–∫ —Ä–µ–∞–∫—Ü–∏–∏ –≤ PvP –ø–æ–≤—ã—à–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç—Ä–∞–∑–∏—Ç—å –Ω–∞–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –ø–æ +5 —Å–µ–∫—É–Ω–¥ –∑–∞ —É—Ä–æ–≤–µ–Ω—å'}
        skills = {'masterWeapon': user.masterWeapon, 'luckerAvtomat': user.luckerAvtomat, 'skillInv': user.skillInv, 'krazha': user.krazha, 'antikrazha': user.antikrazha, 'reactionPvP': user.reactionPvP}
        prices = {}
        for z in skills:
            if skills[z] == 0: prices[z] = 1
            elif skills[z] == 1: prices[z] = 3
            elif skills[z] == 2: prices[z] = 6
            elif skills[z] == 3: prices[z] = 10
            elif skills[z] == 4: prices[z] = 15
            elif skills[z] == 5: prices[z] = 21
            elif skills[z] == 6: prices[z] = 28
            elif skills[z] == 7: prices[z] = 36
            elif skills[z] == 8: prices[z] = 45
            elif skills[z] == 9: prices[z] = 55
            else: skills[z] = 9999
        text = "–ü—Ä–æ–∫–∞—á–∫–∞ –Ω–∞–≤—ã–∫–æ–≤:"
        for z in prices:
            text += "\n{} ({}) - {}üîò".format(nameskills[z], descr[z], prices[z])
            if int(prices[z]) <= user.uppts:
                markup.add(InlineKeyboardButton('–ü—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫: {}'.format(nameskills[z]), callback_data="upSkill_{}".format(z)))
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

async def upSkill(call):
    if (call.from_user.id == call.message.chat.id):
        pass
    else:
        return
    _kach = call.data.split('_')
    skillToUp = _kach[1]
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    user = await db.Users.exists(user_id=call.from_user.id)
    if user:
        user = await db.Users.get(user_id=call.from_user.id).first()
        nameskills = {'masterWeapon': '–í–ª–∞–¥–µ–Ω–∏–µ –æ—Ä—É–∂–∏–µ–º', 'luckerAvtomat': '–ü—å—è–Ω–∞—è —É–¥–∞—á–∞ (–∞–≤—Ç–æ–º–∞—Ç)', 'skillInv': '–ö–∞—Ä–º–∞–Ω–Ω–∞—è —Å–º–µ–∫–∞–ª–∫–∞', 'krazha': '–ö—Ä–∞–∂–∞', 'antikrazha': '–ê–Ω—Ç–∏-–∫—Ä–∞–∂–∞', 'reactionPvP': '–†–µ–∞–∫—Ü–∏—è PvP'}
        skills = {'masterWeapon': user.masterWeapon, 'luckerAvtomat': user.luckerAvtomat, 'skillInv': user.skillInv, 'krazha': user.krazha, 'antikrazha': user.antikrazha, 'reactionPvP': user.reactionPvP}
        prices = {}
        for z in skills:
            if skills[z] == 0: prices[z] = 1
            elif skills[z] == 1: prices[z] = 3
            elif skills[z] == 2: prices[z] = 6
            elif skills[z] == 3: prices[z] = 10
            elif skills[z] == 4: prices[z] = 15
            elif skills[z] == 5: prices[z] = 21
            elif skills[z] == 6: prices[z] = 28
            elif skills[z] == 7: prices[z] = 36
            elif skills[z] == 8: prices[z] = 45
            elif skills[z] == 9: prices[z] = 55
            else: skills[z] = 9999
        if skillToUp == 'masterWeapon' and prices[skillToUp] <= user.uppts:
            user.masterWeapon += 1
            user.uppts -= prices[skillToUp]
            await db.Users.filter(id=user.id).update(uppts=user.uppts, masterWeapon=user.masterWeapon)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫–∞—á–∞–ª –Ω–∞–≤—ã–∫ –≤–ª–∞–¥–µ–Ω–∏—è –æ—Ä—É–∂–∏–µ–º"
        elif skillToUp == 'luckerAvtomat' and prices[skillToUp] <= user.uppts:
            user.luckerAvtomat += 1
            user.uppts -= prices[skillToUp]
            await db.Users.filter(id=user.id).update(uppts=user.uppts, luckerAvtomat=user.luckerAvtomat)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫–∞—á–∞–ª –Ω–∞–≤—ã–∫ —É–¥–∞—á–∏ –≤ –∞–≤—Ç–æ–º–∞—Ç–µ"
        elif skillToUp == 'skillInv' and prices[skillToUp] <= user.uppts:
            user.skillInv += 1
            user.inventorySizeMax += 2
            user.uppts -= prices[skillToUp]
            await db.Users.filter(id=user.id).update(uppts=user.uppts, skillInv=user.skillInv, inventorySizeMax=user.inventorySizeMax)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫–∞—á–∞–ª –Ω–∞–≤—ã–∫ –∫–∞—Ä–º–∞–Ω–Ω–æ–π —Å–º–µ–∫–∞–ª–∫–∏.\n+2üì¶"
        elif skillToUp == 'krazha' and prices[skillToUp] <= user.uppts:
            user.krazha += 1
            user.uppts -= prices[skillToUp]
            await db.Users.filter(id=user.id).update(uppts=user.uppts, krazha=user.krazha)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫–∞—á–∞–ª –Ω–∞–≤—ã–∫ –∫—Ä–∞–∂–∏"
        elif skillToUp == 'antikrazha' and prices[skillToUp] <= user.uppts:
            user.antikrazha += 1
            user.uppts -= prices[skillToUp]
            await db.Users.filter(id=user.id).update(uppts=user.uppts, antikrazha=user.antikrazha)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫–∞—á–∞–ª –Ω–∞–≤—ã–∫ –∞–Ω—Ç–∏-–∫—Ä–∞–∂–∏.\n+10 —Å–µ–∫—É–Ω–¥ –∫ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏"
        elif skillToUp == 'reactionPvP' and prices[skillToUp] <= user.uppts:
            user.reactionPvP += 1
            user.uppts -= prices[skillToUp]
            await db.Users.filter(id=user.id).update(uppts=user.uppts, reactionPvP=user.reactionPvP)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∫–∞—á–∞–ª –Ω–∞–≤—ã–∫ —Ä–µ–∞–∫—Ü–∏–∏ PvP.\n+5 —Å–µ–∫—É–Ω–¥ –∫ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏"
        else:
            await bot.send_message(call.message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ä–µ–ø–æ—Ä—Ç\nSkill to up: {}".format(skillToUp))
            return
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)


#################
#   INVENTORY   #
#################

async def inventory(m, user):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    inventorySize = await db.getInventorySize(user)

    text = "üéí*–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å* (üì¶{}/{})\n".format(inventorySize, user.inventorySizeMax)
    count = {}
    size1 = {}
    sizes = {}

    
    if True:
        
        inventoryFastAccess = await db.InventoryFastAccess.filter(idplayer=user.id)
        text += "\n–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø:"
        if inventoryFastAccess:
            text += "\n"
            _items = []
            for item in inventoryFastAccess: _items.append(item.name)
            if user.id not in db.inventorys:
                _getinv = 'getInv'
                await db.commitInventory(user, _getinv)

            for _item in db.inventorys[user.id]:
                if db.inventorys[user.id][_item]['active'] == 1:
                    if db.inventorys[user.id][_item]['name'] in _items:
                        item = {'id': _item, 'name': db.inventorys[user.id][_item]['name']}
                        if item['name'] in count:
                            name, size, bonus, atk_block, expires = await db.items(item['name'], check=True)
                            count[item['name']] += 1
                            size1[item['name']] = size1[item['name']] + int(sizes[item['name']])
                        else:
                            name, size, bonus, atk_block, expires = await db.items(item['name'], check=True)
                            count[item['name']] = 1
                            size1[item['name']] = int(size)
                            sizes[item['name']] = int(size)
                            markup.add(InlineKeyboardButton('{}'.format(str(name)), callback_data="invUse_{}".format(str(item['id']))))

            for dict in count:
                name, size, bonus, atk_block, expires = await db.items(dict, check=True)
                text += "\n—Ö{} {} üì¶{}".format(count[dict], name, size1[dict])
        else:
            text += "\n–ü—Ä–µ–¥–º–µ—Ç—ã –≤ –±—ã—Å—Ç—Ä–æ–º –¥–æ—Å—Ç—É–ø–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –î–æ–±–∞–≤–∏—Ç—å - /settings"
        markup.add(InlineKeyboardButton('üçî–ï–¥–∞', callback_data="inventory_eat"))
        markup.add(InlineKeyboardButton('üî©–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏', callback_data="inventory_heals"))
        markup.add(InlineKeyboardButton('üõ°–ë—Ä–æ–Ω—è –∏ –æ—Ä—É–∂–∏–µ', callback_data="inventory_armor"))
        markup.add(InlineKeyboardButton('üíç–ü—Ä–æ—á–µ–µ', callback_data="inventory_other"))
        check_a = await db.Inventory.exists(active=2, idplayer=user.id)
        if check_a:
            markup.add(InlineKeyboardButton('–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ', callback_data="armorpers"))
        if user.lvl >= 35:
            markup.add(InlineKeyboardButton('–ú–µ—à–æ—á–µ–∫ –¥–ª—è —Ö–ª–∞–º–∞', callback_data="craftInv"))
        
        markup.add(InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å', callback_data="invRefresh"))


    else:
    
        inventory = await db.Inventory.filter(~Q(type='–†–∞—Å—Ç–µ–Ω–∏–µ'), ~Q(type='–ö—Ä–∞—Ñ—Ç'), ~Q(name='–§–∏–ª—å—Ç—Ä—ã'), ~Q(name='–ë—É—Å—Ç–µ—Ä'), idplayer=user.id, active=1).only('name', 'id')

        for item in inventory:
            if item.name in count:
                name, size, bonus, atk_block, expires = await db.items(item.name, check=True)
                count[item.name] += 1
                size1[item.name] = size1[item.name] + int(sizes[item.name])
            else:
                name, size, bonus, atk_block, expires = await db.items(item.name, check=True)
                count[item.name] = 1
                size1[item.name] = int(size)
                sizes[item.name] = int(size)
                if item.name != '–ö–æ—Ç–µ–ª–æ–∫':
                    markup.add(InlineKeyboardButton('{}'.format(str(name)), callback_data="invUse_{}".format(str(item.id))))
        for dict in count:
            name, size, bonus, atk_block, expires = await db.items(dict, check=True)
            text += "\n—Ö{} {} üì¶{}".format(count[dict], name, size1[dict])
        check_kotelok = await db.Inventory.get_or_none(name='–ö–æ—Ç–µ–ª–æ–∫', idplayer=user.id, active=1).first()
        if check_kotelok:
            markup.add(InlineKeyboardButton('ü•ò–ö–æ—Ç–µ–ª–æ–∫', callback_data="invUse_{}".format(check_kotelok.id)))
        check_a = await db.Inventory.exists(active=2, idplayer=user.id)
        if check_a:
            markup.add(InlineKeyboardButton('–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ', callback_data="armorpers"))
        if user.lvl >= 35:
            markup.add(InlineKeyboardButton('–ú–µ—à–æ—á–µ–∫ –¥–ª—è —Ö–ª–∞–º–∞', callback_data="craftInv"))
        checkBoosters = await db.Inventory.filter(name='–ë—É—Å—Ç–µ—Ä', idplayer=user.id, active=1).only('lvl','id')
        if checkBoosters:
            for booster in checkBoosters:
                if booster.lvl == 730:
                    text += "\n‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä 30–¥–Ω"
                    markup.add(InlineKeyboardButton('‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä 30–¥–Ω',callback_data='invUse_{}'.format(booster.id)))
                else:
                    text += "\n‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä {}—á".format(booster.lvl)
                    markup.add(InlineKeyboardButton('‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä {}—á'.format(booster.lvl),callback_data='invUse_{}'.format(booster.id)))
    await bot.send_message(m.chat.id, text, parse_mode='markdown', reply_markup=markup)




async def inv(call, user):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    inventorySize = await db.getInventorySize(user)

    text = "üéí*–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å* (üì¶{}/{})\n".format(inventorySize, user.inventorySizeMax)
    count = {}
    size1 = {}
    sizes = {}

    
    if True:
        
        inventoryFastAccess = await db.InventoryFastAccess.filter(idplayer=user.id)
        text += "\n–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø:"
        if inventoryFastAccess:
            text += "\n"
            _items = []
            for item in inventoryFastAccess: _items.append(item.name)
            if user.id not in db.inventorys:
                _getinv = 'getInv'
                await db.commitInventory(user, _getinv)

            for _item in db.inventorys[user.id]:
                if db.inventorys[user.id][_item]['active'] == 1:
                    if db.inventorys[user.id][_item]['name'] in _items:
                        item = {'id': _item, 'name': db.inventorys[user.id][_item]['name']}
                        if item['name'] in count:
                            name, size, bonus, atk_block, expires = await db.items(item['name'], check=True)
                            count[item['name']] += 1
                            size1[item['name']] = size1[item['name']] + int(sizes[item['name']])
                        else:
                            name, size, bonus, atk_block, expires = await db.items(item['name'], check=True)
                            count[item['name']] = 1
                            size1[item['name']] = int(size)
                            sizes[item['name']] = int(size)
                            markup.add(InlineKeyboardButton('{}'.format(str(name)), callback_data="invUse_{}".format(str(item['id']))))

            for dict in count:
                name, size, bonus, atk_block, expires = await db.items(dict, check=True)
                text += "\n—Ö{} {} üì¶{}".format(count[dict], name, size1[dict])
        else:
            text += "\n–ü—Ä–µ–¥–º–µ—Ç—ã –≤ –±—ã—Å—Ç—Ä–æ–º –¥–æ—Å—Ç—É–ø–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –î–æ–±–∞–≤–∏—Ç—å - /settings"
        markup.add(InlineKeyboardButton('üçî–ï–¥–∞', callback_data="inventory_eat"))
        markup.add(InlineKeyboardButton('üî©–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏', callback_data="inventory_heals"))
        markup.add(InlineKeyboardButton('üõ°–ë—Ä–æ–Ω—è –∏ –æ—Ä—É–∂–∏–µ', callback_data="inventory_armor"))
        markup.add(InlineKeyboardButton('üíç–ü—Ä–æ—á–µ–µ', callback_data="inventory_other"))
        check_a = await db.Inventory.exists(active=2, idplayer=user.id)
        if check_a:
            markup.add(InlineKeyboardButton('–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ', callback_data="armorpers"))
        if user.lvl >= 35:
            markup.add(InlineKeyboardButton('–ú–µ—à–æ—á–µ–∫ –¥–ª—è —Ö–ª–∞–º–∞', callback_data="craftInv"))
        markup.add(InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å', callback_data="invRefresh"))

    else:
    
        inventory = await db.Inventory.filter(~Q(type='–†–∞—Å—Ç–µ–Ω–∏–µ'), ~Q(type='–ö—Ä–∞—Ñ—Ç'), ~Q(name='–§–∏–ª—å—Ç—Ä—ã'), ~Q(name='–ë—É—Å—Ç–µ—Ä'), idplayer=user.id, active=1).only('name', 'id')

        for item in inventory:
            if item.name in count:
                name, size, bonus, atk_block, expires = await db.items(item.name, check=True)
                count[item.name] += 1
                size1[item.name] = size1[item.name] + int(sizes[item.name])
            else:
                name, size, bonus, atk_block, expires = await db.items(item.name, check=True)
                count[item.name] = 1
                size1[item.name] = int(size)
                sizes[item.name] = int(size)
                markup.add(InlineKeyboardButton('{}'.format(str(name)), callback_data="invUse_{}".format(str(item.id))))
        for dict in count:
            name, size, bonus, atk_block, expires = await db.items(dict, check=True)
            text += "\n—Ö{} {} üì¶{}".format(count[dict], name, size1[dict])
        check_kotelok = await db.Inventory.get_or_none(name='–ö–æ—Ç–µ–ª–æ–∫', idplayer=user.id, active=1).first()
        if check_kotelok:
            markup.add(InlineKeyboardButton('ü•ò–ö–æ—Ç–µ–ª–æ–∫', callback_data="invUse_{}".format(check_kotelok.id)))
        check_a = await db.Inventory.exists(active=2, idplayer=user.id)
        if check_a:
            markup.add(InlineKeyboardButton('–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ', callback_data="armorpers"))
        if user.lvl >= 35:
            markup.add(InlineKeyboardButton('–ú–µ—à–æ—á–µ–∫ –¥–ª—è —Ö–ª–∞–º–∞', callback_data="craftInv"))
        checkBoosters = await db.Inventory.filter(name='–ë—É—Å—Ç–µ—Ä', idplayer=user.id, active=1).only('lvl','id')
        if checkBoosters:
            for booster in checkBoosters:
                if booster.lvl == 730:
                    text += "\n‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä 30–¥–Ω"
                    markup.add(InlineKeyboardButton('‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä 30–¥–Ω',callback_data='invUse_{}'.format(booster.id)))
                else:
                    text += "\n‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä {}—á".format(booster.lvl)
                    markup.add(InlineKeyboardButton('‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä {}—á'.format(booster.lvl),callback_data='invUse_{}'.format(booster.id)))
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='markdown', reply_markup=markup)


async def invRefresh(call, user):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    inventorySize = await db.getInventorySize(user)

    text = "üéí*–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å* (üì¶{}/{})\n".format(inventorySize, user.inventorySizeMax)
    count = {}
    size1 = {}
    sizes = {}

    
    if True:
        _getinv = 'getInv'
        await db.commitInventory(user, _getinv)

        inventoryFastAccess = await db.InventoryFastAccess.filter(idplayer=user.id)
        text += "\n–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø:"
        if inventoryFastAccess:
            text += "\n"
            _items = []
            for item in inventoryFastAccess: _items.append(item.name)

            for _item in db.inventorys[user.id]:
                if db.inventorys[user.id][_item]['active'] == 1:
                    if db.inventorys[user.id][_item]['name'] in _items:
                        item = {'id': _item, 'name': db.inventorys[user.id][_item]['name']}
                        if item['name'] in count:
                            name, size, bonus, atk_block, expires = await db.items(item['name'], check=True)
                            count[item['name']] += 1
                            size1[item['name']] = size1[item['name']] + int(sizes[item['name']])
                        else:
                            name, size, bonus, atk_block, expires = await db.items(item['name'], check=True)
                            count[item['name']] = 1
                            size1[item['name']] = int(size)
                            sizes[item['name']] = int(size)
                            markup.add(InlineKeyboardButton('{}'.format(str(name)), callback_data="invUse_{}".format(str(item['id']))))

            for dict in count:
                name, size, bonus, atk_block, expires = await db.items(dict, check=True)
                text += "\n—Ö{} {} üì¶{}".format(count[dict], name, size1[dict])
        else:
            text += "\n–ü—Ä–µ–¥–º–µ—Ç—ã –≤ –±—ã—Å—Ç—Ä–æ–º –¥–æ—Å—Ç—É–ø–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –î–æ–±–∞–≤–∏—Ç—å - /settings"
        markup.add(InlineKeyboardButton('üçî–ï–¥–∞', callback_data="inventory_eat"))
        markup.add(InlineKeyboardButton('üî©–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏', callback_data="inventory_heals"))
        markup.add(InlineKeyboardButton('üõ°–ë—Ä–æ–Ω—è –∏ –æ—Ä—É–∂–∏–µ', callback_data="inventory_armor"))
        markup.add(InlineKeyboardButton('üíç–ü—Ä–æ—á–µ–µ', callback_data="inventory_other"))
        check_a = await db.Inventory.exists(active=2, idplayer=user.id)
        if check_a:
            markup.add(InlineKeyboardButton('–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ', callback_data="armorpers"))
        if user.lvl >= 35:
            markup.add(InlineKeyboardButton('–ú–µ—à–æ—á–µ–∫ –¥–ª—è —Ö–ª–∞–º–∞', callback_data="craftInv"))
        markup.add(InlineKeyboardButton('–û–±–Ω–æ–≤–∏—Ç—å', callback_data="invRefresh"))
    await bot.answer_callback_query(callback_query_id=call.id, show_alert=False, text="–û–±–Ω–æ–≤–ª–µ–Ω–æ")
    await bot.send_message(call.message.chat.id, text, parse_mode='markdown', reply_markup=markup)



async def inventory_(call, user):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    inventorySize = await db.getInventorySize(user)

    text = "üéí*–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å* (üì¶{}/{})\n".format(inventorySize, user.inventorySizeMax)
    count = {}
    size1 = {}
    sizes = {}
    if user.id not in db.inventorys:
        if call.data.split("_")[1] == 'eat':
            _types = ["–ï–¥–∞", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏", "–†–µ–¥–∫–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏", "–û—Å–æ–±—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏"]
            inventory = await db.Inventory.filter(type__in=_types, idplayer=user.id, active=1).only("name", "id")
        elif call.data.split("_")[1] == 'heals':
            _types = ["–ó–µ–ª—å–µ", "–°—É–Ω–¥—É–∫", "–•–ª–∞–º", "–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞"]
            inventory = await db.Inventory.filter(type__in=_types, idplayer=user.id, active=1).only("name", "id")
        elif call.data.split("_")[1] == 'armor':
            _types = ["–ë—Ä–æ–Ω—è", "–û—Ä—É–∂–∏–µ"]
            inventory = await db.Inventory.filter(type__in=_types, idplayer=user.id, active=1).only("name", "id")
        elif call.data.split("_")[1] == 'other':
            _types = ["–ï–¥–∞", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏", "–†–µ–¥–∫–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏", "–û—Å–æ–±—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏", "–ë—Ä–æ–Ω—è", "–û—Ä—É–∂–∏–µ", 
            "–ó–µ–ª—å–µ", "–°—É–Ω–¥—É–∫", "–•–ª–∞–º", "–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞"]
            inventory = await db.Inventory.filter(~Q(type__in=_types), idplayer=user.id, active=1).only("name", "id")


        if inventory:
            for item in inventory:
                if item.name in count:
                    name, size, bonus, atk_block, expires = await db.items(item.name, check=True)
                    count[item.name] += 1
                    size1[item.name] = size1[item.name] + int(sizes[item.name])
                else:
                    if item.name != "–ë—É—Å—Ç–µ—Ä":
                        name, size, bonus, atk_block, expires = await db.items(item.name, check=True)
                        count[item.name] = 1
                        size1[item.name] = int(size)
                        sizes[item.name] = int(size)
                        markup.add(InlineKeyboardButton('{}'.format(str(name)), callback_data="invUse_{}".format(str(item.id))))
                    else:
                        itm = await db.Inventory.get(id=item.id).first()
                        markup.add(InlineKeyboardButton('‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä ({}—á)'.format(itm.lvl), callback_data="invUse_{}".format(str(item.id))))
            for dict in count:
                name, size, bonus, atk_block, expires = await db.items(dict, check=True)
                text += "\n—Ö{} {} üì¶{}".format(count[dict], name, size1[dict])

        else:
            text += "\n–ü—Ä–µ–¥–º–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    else:
        if call.data.split("_")[1] == 'eat':
            _types = ["–ï–¥–∞", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏", "–†–µ–¥–∫–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏", "–û—Å–æ–±—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏"]
        elif call.data.split("_")[1] == 'heals':
            _types = ["–ó–µ–ª—å–µ", "–°—É–Ω–¥—É–∫", "–•–ª–∞–º", "–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞"]
        elif call.data.split("_")[1] == 'armor':
            _types = ["–ë—Ä–æ–Ω—è", "–û—Ä—É–∂–∏–µ"]
        elif call.data.split("_")[1] == 'other':
            _types = ["–ï–¥–∞", "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏", "–†–µ–¥–∫–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏", "–û—Å–æ–±—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏", "–ë—Ä–æ–Ω—è", "–û—Ä—É–∂–∏–µ", 
            "–ó–µ–ª—å–µ", "–°—É–Ω–¥—É–∫", "–•–ª–∞–º", "–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞"]
        inventory = {}
        for _item in db.inventorys[user.id]:
            if db.inventorys[user.id][_item]['active'] == 1:
                item = {'id': _item, 'name': db.inventorys[user.id][_item]['name'], 'type': db.inventorys[user.id][_item]['type']}
                if call.data.split("_")[1] == 'other':
                    if item['type'] not in _types:
                        inventory[_item] = {'id': _item, 'name': db.inventorys[user.id][_item]['name'], 'type': db.inventorys[user.id][_item]['type']}
                else:
                    if item['type'] in _types:
                        inventory[_item] = {'id': _item, 'name': db.inventorys[user.id][_item]['name'], 'type': db.inventorys[user.id][_item]['type']}
        if inventory:
            for _item in inventory:
                item = inventory[_item]
                if item['name'] in count:
                    name, size, bonus, atk_block, expires = await db.items(item['name'], check=True)
                    count[item['name']] += 1
                    size1[item['name']] = size1[item['name']] + int(sizes[item['name']])
                else:
                    if item['name'] != "–ë—É—Å—Ç–µ—Ä":
                        name, size, bonus, atk_block, expires = await db.items(item['name'], check=True)
                        count[item['name']] = 1
                        size1[item['name']] = int(size)
                        sizes[item['name']] = int(size)
                        markup.add(InlineKeyboardButton('{}'.format(str(name)), callback_data="invUse_{}".format(str(_item))))
                    else:
                        itm = await db.Inventory.get(id=_item).first()
                        markup.add(InlineKeyboardButton('‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä ({}—á)'.format(itm.lvl), callback_data="invUse_{}".format(str(itm.id))))
            for dict in count:
                name, size, bonus, atk_block, expires = await db.items(dict, check=True)
                text += "\n—Ö{} {} üì¶{}".format(count[dict], name, size1[dict])

        else:
            text += "\n–ü—Ä–µ–¥–º–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"



    markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inv"))

    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='markdown', reply_markup=markup)





async def craftInv(call, user):
    await bot.edit_message_text("–ü–æ–¥—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –≤ –º–µ—à–æ—á–µ–∫, —ç—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...", call.message.chat.id, call.message.message_id)
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    inventorySize = await db.Inventory.filter(active=5, idplayer=user.id).count()
    text = "üéí*–ú–µ—à–æ—á–µ–∫ –¥–ª—è —Ö–ª–∞–º–∞* (üì¶{})\n".format(inventorySize)
    checkItems = await db.Inventory.exists(idplayer=user.id, active=5)
    if checkItems:
        if True:
            getItems = await db.Inventory.filter(idplayer=user.id, active=5).only('name', 'lvl').order_by('lvl')
            count = {}
            lvls = {}
            lastLvl = 0
            for z in getItems:
                if z.lvl != lastLvl:
                    lvls = {}
                    lastLvl = z.lvl
                if z.name in count and z.name in lvls:
                    pass
                else:
                    count[z.name] = 1
                    lvls[z.name] = z.lvl
                    _count = await db.Inventory.filter(idplayer=user.id, active=5, lvl=z.lvl, name=z.name).count()
                    text += "\nx{} {}({}—É—Ä)".format(_count, z.name, z.lvl)
    else:
        text += "\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤..."
    check_a = await db.Inventory.exists(active=2, idplayer=user.id)
    if check_a:
        markup.add(InlineKeyboardButton('–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ', callback_data="armorpers"))
    markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inv"))
    await bot.send_message(call.message.chat.id, text, reply_markup=markup, parse_mode='markdown')



async def invUse(call, user): 
    if (call.from_user.id == call.message.chat.id):
        pass
    else:
        return
    do = call.data.split('_')
    use = do[1]
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    result = await db.Inventory.exists(id=use)
    if not result:
        return
    result = await db.Inventory.get(id=use).first()
    if user.location == '–î–æ–º':
        checkhouse = await db.Houses.get_or_none(owner=user.id)
        if checkhouse and checkhouse.lvl > 4:
            markup.add(InlineKeyboardButton('–û—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–µ', callback_data="iveSklad_{}".format(str(use))))
    if result.type == '–ï–¥–∞':
        if result.name == '–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞':
            text = "üíå–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞. –° –î–Ω—ë–º –°–≤—è—Ç–æ–≥–æ –í–∞–ª–µ–Ω—Ç–∏–Ω–∞!"
        else:
            leftTime = (result.expires - time.time()) / 3600
            if leftTime >= 0:
                text = "{}\n+ü¶¥{}—Å—ã—Ç–æ—Å—Ç–∏.\n–í–ø–æ–ª–Ω–µ —Å—ä–µ–¥–æ–±–Ω–æ –µ—â–µ {}—á.\n–°—ä–µ—Å—Ç—å?".format(str(result.name), str(result.bonus), round(leftTime, 2))
            else:
                text = "{}\n+ü¶¥{}—Å—ã—Ç–æ—Å—Ç–∏.\n–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ —É–∂–µ –¥–∞–ª–µ–∫–æ –Ω–µ —Å—ä–µ–¥–æ–±–Ω–æ...".format(str(result.name), str(result.bonus))
        markup.add(InlineKeyboardButton('–°—å–µ—Å—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.type == "–•–ª–∞–º":
        text = "{}. \n–°—É–¥—è –ø–æ –≤—Å–µ–º—É, —Ö–ª–∞–º. –ú–æ–∂–µ—Ç –∫–æ–º—É –∏ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è...".format(str(result.name))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.type == "–ó–µ–ª—å–µ":
        text = "{}. –í—ã–ø–∏—Ç—å –∑–µ–ª—å–µ?".format(result.name)
        markup.add(InlineKeyboardButton('–í—ã–ø–∏—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ö–æ—Ç–µ–ª–æ–∫':
        oduvanchiki = user.oduvanchik
        rca = user.rca
        sakura = user.sakura
        roza = user.roza
        ostanki = await db.Inventory.filter(name='–û—Å—Ç–∞–Ω–∫–∏ –≥–µ—Ä–æ–µ–≤', idplayer=result.idplayer, active=1).count()
        if sakura >= 10 and roza >= 8 and rca >= 8 and ostanki >= 3: markup.add(InlineKeyboardButton('–ó–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', callback_data="varenie_restore"))
        if oduvanchiki >= 2 and rca >= 1: markup.add(InlineKeyboardButton('–°—Ä–µ–¥–Ω–µ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è', callback_data="varenie_sredne"))
        if oduvanchiki >= 1 and roza >= 1 and rca >= 1: markup.add(InlineKeyboardButton('–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è', callback_data="varenie_big"))
        text = '–ö–æ—Ç–µ–ª–æ–∫. –£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—â—å - –º–æ–∂–µ—à—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —Å–µ–±–µ –±–æ—Ä—â, –º–æ–∂–µ—à—å —Å–≤–∞—Ä–∏—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ, –Ω–æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ "–ú–∞–∫–∞—Ä–æ–Ω—ã". –ù–æ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ç–µ–ª–∫–∞ - –Ω–µ –≤–∞—Ä–∫–∞ –±—ã–≤—à–µ–≥–æ —Å–æ—Å–µ–¥–∞, –∫–∞–∫ –Ω–∏ —Å—Ç—Ä–∞–Ω–Ω–æ, –∞ –≤–∞—Ä–µ–Ω–∏–µ –∑–µ–ª–∏–π.\n–†–µ—Ü–µ–ø—Ç—ã –∑–µ–ª–∏–π –≤—ã–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–æ—Ç–µ–ª–∫–µ.\n\n–°—Ä–µ–¥–Ω–µ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è: 2üåº 1üå∑\n–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è: 1üåº 1üå∑ 1üåπ\n–ó–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: 10üå∏ 8üå∑ 8üåπ 3ü¶¥'
        checkRecipy = await db.Inventory.exists(idplayer=result.idplayer, name='–†–µ—Ü–µ–ø—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –º–∞–ª–æ–≥–æ –∑–µ–ª—å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', active=0)
        if checkRecipy:
            text += '\n–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: 5üåº 3üå∑ 3üåπ 1ü¶¥'
            if oduvanchiki >= 5 and roza >= 3 and rca >= 3 and ostanki >= 1: 
                markup.add(InlineKeyboardButton('–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', callback_data="varenie_restoreSmall"))
        checkRecipy = await db.Inventory.exists(idplayer=result.idplayer, name='–†–µ—Ü–µ–ø—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–µ–ª—å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', active=0)
        if checkRecipy:
            text += '\n–°—Ä–µ–¥–Ω–µ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: 8üåº 5üå∑ 5üåπ 2ü¶¥'
            if oduvanchiki >= 8 and roza >= 5 and rca >= 5 and ostanki >= 2: 
                markup.add(InlineKeyboardButton('–°—Ä–µ–¥–Ω–µ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', callback_data="varenie_restoreMedium"))
        checkRecipy = await db.Inventory.exists(idplayer=result.idplayer, name='–†–µ—Ü–µ–ø—Ç –±–∞–º–±—É–∫', active=0)
        if checkRecipy:
            text += '\n–ë–∞–º–±—É–∫ –¥–ª—è –∫—É—Ä–µ–Ω–∏—è: 4üåº 2üå∑ 2üåπ 1üå∏'
            if oduvanchiki >= 4 and roza >= 2 and rca >= 2 and sakura >= 1: 
                markup.add(InlineKeyboardButton('–ë–∞–º–±—É–∫ –¥–ª—è –∫—É—Ä–µ–Ω–∏—è', callback_data="varenie_bamboo"))
        checkRecipy = await db.Inventory.exists(idplayer=result.idplayer, name='–†–µ—Ü–µ–ø—Ç –≥–µ—Ä–æ–ò–Ω', active=0)
        if checkRecipy:
            text += '\n–ì–µ—Ä–æ–ò–Ω: 10ü¶¥'
            if ostanki >= 10: 
                markup.add(InlineKeyboardButton('–ì–µ—Ä–æ–ò–Ω', callback_data="varenie_geroin"))
        checkRecipy = await db.Inventory.exists(idplayer=result.idplayer, name = '–†–µ—Ü–µ–ø—Ç –±–æ—è—Ä—ã—à–Ω–∏–∫', active=0)
        if checkRecipy:
            text += '\n–ù–∞—Å—Ç–æ–π–∫–∞ –±–æ—è—Ä—ã—à–Ω–∏–∫–∞ 90¬∞: 6üåº 3üå∑ 2üåπ 4üå∏ 2ü¶¥'
            if oduvanchiki >= 6 and roza >= 3 and rca >= 2 and sakura >= 4 and ostanki >= 2: 
                markup.add(InlineKeyboardButton('–ù–∞—Å—Ç–æ–π–∫–∞ –±–æ—è—Ä—ã—à–Ω–∏–∫–∞', callback_data="varenie_boyara"))
        checkRecipy = await db.Inventory.exists(idplayer=result.idplayer, name = '–†–µ—Ü–µ–ø—Ç –í–∏–ê–≥—Ä–æ', active=0)
        if checkRecipy:
            text += '\nüíä–í–∏–ê–≥—Ä–æ: 35üåº 20üåπ'
            if oduvanchiki >= 35 and roza >= 20: 
                markup.add(InlineKeyboardButton('–í–∏–ê–≥—Ä–æ', callback_data="varenie_viagra"))
        checkRecipy = await db.Inventory.exists(idplayer=result.idplayer, name = '–†–µ—Ü–µ–ø—Ç –ø–∞—É—á–∏–π –∞—Ñ—Ä–æ–¥–∏–∑–∏–∞–∫', active=0)
        if checkRecipy:
            text += '\nüï∏–ü–∞—É—á–∏–π –∞—Ñ—Ä–æ–¥–∏–∑–∏–∞–∫: 10üåº 10üå∑ 10üåπ 10üå∏ 5ü¶¥'
            if oduvanchiki >= 10 and roza >= 10 and rca >= 10 and sakura >= 10 and ostanki >= 5: 
                markup.add(InlineKeyboardButton('–ü–∞—É—á–∏–π –∞—Ñ—Ä–æ–¥–∏–∑–∏–∞–∫', callback_data="varenie_ilovestas"))
        checkRecipy = await db.Inventory.exists(idplayer=result.idplayer, name='–†–µ—Ü–µ–ø—Ç –±–∞–∫–∏–Ω', active=0)
        if checkRecipy:
            text += '\nüíä–ë–∞–∫–∏–Ω: 3üåº 7üå∑ 2üåπ 7üå∏'
            if oduvanchiki >= 3 and roza >= 2 and rca >= 7 and sakura >= 7 : 
                markup.add(InlineKeyboardButton('–ë–∞–∫–∏–Ω', callback_data="varenie_bakin"))
        text += "\n\n–õ–∏–º–∏—Ç –Ω–∞ —Ü–≤–µ—Ç—ã: {}üì¶/–≤–∏–¥\n{}üåº {}üå∑ {}üåπ {}üå∏ {}ü¶¥".format(user.kotelokLimit, oduvanchiki, rca, roza, sakura, ostanki)
        markup.add(InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inv"))
    elif result.type == "–°—É–Ω–¥—É–∫":
        text = "–°—É–Ω–¥—É–∫. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–∫—Ä—ã—Ç—å?".format(result.name)
        markup.add(InlineKeyboardButton('–û—Ç–∫—Ä—ã—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–î—Ä–æ–≤–∞':
        text = "–î—Ä–æ–≤–∞. –ú–æ–∂–Ω–æ —Ä–∞–∑–∂–µ—á—å –∫–æ—Å—Ç—ë—Ä".format(result.name)
        markup.add(InlineKeyboardButton('–ü–æ–≥—Ä–µ—Ç—å—Å—è', callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ö–æ—Ñ–µ':
        text = f"{result.name}. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 70‚ö°Ô∏è. –í—ã–ø–∏—Ç—å?"
        markup.add(InlineKeyboardButton('–í—ã–ø–∏—Ç—å', callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.type == "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç":
        if result.name == '–ê–º—É–ª–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è':
            text = "{} ({}üîÜ). –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É 10%‚ù§Ô∏è –≤ –æ–±–º–µ–Ω –Ω–∞ 5‚ö°Ô∏è. –ó–∞ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 1%".format(result.name, result.lvl)
        elif result.name == '–û—Å–∫–æ–ª–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏':
            text = "{} ({}üîÜ). –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É 5‚ö°Ô∏è, –µ—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è –≤—ã—à–µ 5‚ö°Ô∏è, –Ω–æ –Ω–µ –≤—ã—à–µ 70‚ö°Ô∏è. –ó–∞ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π —ç–Ω–µ—Ä–≥–∏–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 0.5‚ö°Ô∏è".format(result.name, result.lvl)
        elif result.name == '–û—Å–∫–æ–ª–æ–∫ –æ–≥–Ω—è':
            text = "{} ({}üîÜ). –ë–ª–∞–≥–æ–¥–∞—Ä—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∞—É—Ä–µ, –ø–æ—Å–ª–µ –≤–∞—à–µ–π –∞—Ç–∞–∫–∏ –º–æ–Ω—Å—Ç—Ä—ã –Ω–∞—á–∏–Ω–∞—é—Ç –≥–æ—Ä–µ—Ç—å –∏–∑-–∑–∞ –ø–æ–ª—É—á–∞—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 5% (10% –≤ –ó–∞—Å–Ω–µ–∂–µ–Ω–Ω–æ–º –ª–µ—Å—É) –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è. –ó–∞ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —É—Ä–æ–Ω –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –Ω–∞ 1%".format(result.name, result.lvl)
        elif result.name == '–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ë–ú':
            text = "{}. –†–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ü–µ–Ω—â–∏–∫–∞ —à–∞–Ω—Å–æ–≤ –≤ PvP. –ó–µ–ª—ë–Ω—ã–π —Å–µ–∫—Ç–æ—Ä - —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É –≤–µ—Å—å–º–∞ –≤–µ–ª–∏–∫. –ñ–µ–ª—Ç—ã–π —Å–µ–∫—Ç–æ—Ä - —à–∞–Ω—Å—ã –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã. –ö—Ä–∞—Å–Ω—ã–π - –≤–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –ø–æ—Å—Ç–∞—Ä–∞—Ç—å—Å—è —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å.".format(result.name)
        elif result.name == '–ê–Ω—Ç–∏-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ë–ú':
            text = "{}. –°–∫—Ä—ã–≤–∞–µ—Ç –¥–ª—è –≤—Ä–∞–≥–∞, –∏–º–µ—é—â–µ–≥–æ ''–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ë–ú'' —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É –ø—Ä–æ—Ç–∏–≤ –≤–∞—Å".format(result.name)
        elif result.name == '–ö–∞–º–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏':
            text = "{} ({}üîÜ). –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–∞—Å—Å–∏–≤–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É 7‚ö°Ô∏è. –ó–∞ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π —ç–Ω–µ—Ä–≥–∏–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 2‚ö°Ô∏è".format(result.name, result.lvl)
        elif result.name == '–ì–æ—Ä—à–æ–∫ –ª–µ–ø—Ä–µ–∫–æ–Ω–∞':
            text = "{} ({}üîÜ). –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –≤ PvE –∏ —Å–º–µ—Ä—Ç–∏ –æ—Ç –≥–æ–ª–æ–¥–∞ –º–æ–Ω–µ—Ç—ã –Ω–µ —Ç—Ä–∞—Ç—è—Ç—Å—è, –æ–¥–Ω–∞–∫–æ —Å –º–æ–Ω—Å—Ç—Ä–æ–≤ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å 60% –º–æ–Ω–µ—Ç. –ó–∞ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ –∑–æ–ª–æ—Ç–∞ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –Ω–∞ 3%".format(result.name, result.lvl)
        elif result.name == '–ö–∞—Ä–º–∞–Ω–Ω–∞—è –¥—Ä–∏–∞–¥–∞':
            text = "{} ({}üîÜ). –£–¥–≤–∞–∏–≤–∞–µ—Ç –≤—ã–ø–∞–¥–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤. –ó–∞ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–∞–µ—Ç—Å—è —à–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä—ë—Ö —Ü–≤–µ—Ç–∫–æ–≤ –Ω–∞ 5%".format(result.name, result.lvl)
        elif result.name == '–ö–æ–ª—å—Ü–æ –≤—Å–µ–æ—Ç—Ä–∞–∂–µ–Ω–∏—è':
            text = "{} ({}üîÜ). C —à–∞–Ω—Å–æ–º –≤ 25% –æ—Ç—Ä–∞–∂–∞–µ—Ç –∞—Ç–∞–∫—É –º–æ–Ω—Å—Ç—Ä–∞ –≤ –Ω–µ–≥–æ —Å–∞–º–æ–≥–æ. –ó–∞ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–æ–ª—å—Ü–∞ —à–∞–Ω—Å –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –Ω–∞ 2.5%".format(result.name, result.lvl)
        elif result.name == '–û—Å–∫–æ–ª–æ–∫ –ª—å–¥–∞':
            text = "–û—Å–∫–æ–ª–æ–∫ –ª—å–¥–∞. –° —à–∞–Ω—Å–æ–º –≤ 20% –∫–∞–∂–¥—ã–π —Ö–æ–¥ –º–æ–∂–µ—Ç –Ω–∞–Ω–µ—Å—Ç–∏ —ç—Ñ—Ñ–µ–∫—Ç —Ö–æ–ª–æ–¥–∞ –Ω–∞ –º–æ–Ω—Å—Ç—Ä–∞ - –≠—Ñ—Ñ–µ–∫—Ç —Ö–æ–ª–æ–¥–∞ –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç –º–æ–Ω—Å—Ç—Ä–∞ –∏–∑-–∑–∞ —á–µ–≥–æ –æ–Ω (–º–æ–Ω—Å—Ç—Ä) –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ö–æ–¥, –Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–∞ 25% –º–µ–Ω—å—à–µ —É—Ä–æ–Ω–∞, –≤–æ –≤—Ä–µ–º—è –∑–∞–º–æ—Ä–æ–∑–∫–∏."
        elif result.name == '–û—Å–∫–æ–ª–æ–∫ —ç—Ñ–∏—Ä–∞':
            text = "–û—Å–∫–æ–ª–æ–∫ —ç—Ñ–∏—Ä–∞. –í –∫–æ–Ω—Ü–µ –±–∏—Ç–≤—ã —Å –º–æ–Ω—Å—Ç—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ‚ô•Ô∏è, —Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–±–∏—Ç—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤, —É–º–Ω–æ–∂–µ–Ω–Ω–æ–º—É –Ω–∞ {} (—Å—á—ë—Ç—á–∏–∫ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –ø–∞–¥–∞–µ—Ç –Ω–∞ 1, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 50%‚ô•Ô∏è).".format(etheriumBonus)
        elif result.name == '–°—É–≤–µ–Ω–∏—Ä —Å –º–æ—Ä—è': #–ú–µ–π–Ω –∫—Ä–∏—Ç —É—Ä–æ–Ω
            mainBuff = result.lvl
            secondBuff = int(result.lvl / 2)
            text = "{} ({}üîÜ)\n–ê—Ä—Ç–µ—Ñ–∞–∫—Ç.\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n+{}% –ö—Ä–∏—Ç —É—Ä–æ–Ω–∞\n+{}% –î–æ–ø —É—Ä–æ–Ω–∞\n+{}% —à–∞–Ω—Å –ö—Ä–∏—Ç —É–¥–∞—Ä–∞".format(str(result.name), result.lvl, mainBuff, secondBuff, secondBuff)
        elif result.name == '–ö–≤–∏–Ω—Ç—ç—Å—Å–µ–Ω—Ü–∏—è –∫–∞–º–Ω—è': #–ú–µ–π–Ω –∞—Ä–º–æ—Ä
            mainBuff = result.lvl
            secondBuff = int(result.lvl / 2)
            text = "{} ({}üîÜ)\n–ê—Ä—Ç–µ—Ñ–∞–∫—Ç.\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n+{}% –ë—Ä–æ–Ω–∏\n+{}% –î–æ–ø —É—Ä–æ–Ω–∞\n+{}% –í–∞–º–ø–∏—Ä–∏–∑–º".format(str(result.name), result.lvl, mainBuff, secondBuff, secondBuff)
        elif result.name == '–ö–∞–º–µ–Ω—å-–º–µ—Ç–∞–ª–ª–æ–ª–æ–º': #–ú–µ–π–Ω –≤–∞–º–ø–∏—Ä–∏–∑–º
            mainBuff = result.lvl
            secondBuff = int(result.lvl / 2)
            text = "{} ({}üîÜ)\n–ê—Ä—Ç–µ—Ñ–∞–∫—Ç.\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n+{}% –í–∞–º–ø–∏—Ä–∏–∑–º\n+{}% –ö—Ä–∏—Ç —É—Ä–æ–Ω–∞\n+{}% –ê—Ä–º–æ—Ä–∞".format(str(result.name), result.lvl, mainBuff, secondBuff, secondBuff)
        elif result.name == '–ü–∞–ª–∫–∞ —è—Ä–æ—Å—Ç–∏': #–ú–µ–π–Ω –¥–¥
            mainBuff = result.lvl
            secondBuff = int(result.lvl / 2)
            text = "{} ({}üîÜ)\n–ê—Ä—Ç–µ—Ñ–∞–∫—Ç.\n\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n+{}% –î–æ–ø —É—Ä–æ–Ω–∞".format(str(result.name), result.lvl, mainBuff)
        else:
            text = "{}. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ".format(result.name)
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.type == "–ë—Ä–æ–Ω—è":
        name, size, bonus, atk_block, expires = await db.items(result.name, check=True)
        if result.name == '–ñ–µ–ª–µ–∑–Ω—ã–π —â–∏—Ç':
            text = "{}. 5% —à–∞–Ω—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞—Ä–∞ –º–æ–Ω—Å—Ç—Ä–∞ (‚öîÔ∏è - {}%) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?".format(name, atk_block)
        elif result.name == '–©–∏—Ç –±–æ–º–∂–∞':
            text = "{}. 10% —à–∞–Ω—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞—Ä–∞ –º–æ–Ω—Å—Ç—Ä–∞ (‚öîÔ∏è - {}%) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?".format(name, atk_block)
        elif result.name == '–ó–æ–ª–æ—Ç–∞—è –ø–æ–∫—Ä—ã—à–∫–∞':
            text = "{}. 15% —à–∞–Ω—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞—Ä–∞ –º–æ–Ω—Å—Ç—Ä–∞ (‚öîÔ∏è - {}%) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?".format(name, atk_block)
        elif result.name == '–©–∏—Ç –≤–µ—Ä–Ω–æ—Å—Ç–∏ –†–∞—Å–∫—É–ª–æ–≤–æ–π':
            text = "{}. 20% —à–∞–Ω—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞—Ä–∞ –º–æ–Ω—Å—Ç—Ä–∞ (‚öîÔ∏è - {}%) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?".format(name, atk_block)
        else:
            text = "{}. +{}üõ° (‚öîÔ∏è - {}%) –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?".format(name, bonus, atk_block)
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ë–∞–º–±—É–∫ –¥–ª—è –∫—É—Ä–µ–Ω–∏—è':
        name, size, bonus, atk_block, expires = await db.items(result.name, check=True)
        text = "{}. –î–æ –∫–æ–Ω—Ü–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –∫–∞–∫ —Ç–æ—á–Ω–æ –∏–∑ –æ–±–º–µ–ª—å—á—ë–Ω–Ω—ã—Ö –∏ –≤—ã–≤–∞—Ä–µ–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —á—Ç–æ-—Ç–æ, –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ –Ω–∏–∫–æ—Ç–∏–Ω, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç —Ç–∞–∫. –í —ç—Ç–æ–º –º–∏—Ä–µ –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ. –í–æ—Ç —Ç–∞–∫ —É–º–µ–ª—å—Ü—ã –∏ –≤–∞—Ä—è—Ç, –∞ –ø–æ—Ç–æ–º –∑–∞–≤–æ—Ä–∞—á–∏–≤–∞—é—Ç —ç—Ç–æ—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–π –ø–æ—Ä–æ—à–æ–∫ –≤ –∫—É—Å–æ–∫ –≥–∞–∑–µ—Ç—ã, —á—Ç–æ–±—ã –ø–æ–∫—É—Ä–∏—Ç—å.\n\n–ö—É—Ä–µ–Ω–∏–µ —É–±–∏–≤–∞–µ—Ç. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 60‚ö°Ô∏è, –Ω–æ –≤–∑–∞–º–µ–Ω –º–æ–∂–µ—Ç —É–∫—Ä–∞—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ".format(result.name)
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ì–µ—Ä–æ–ò–Ω':
        name, size, bonus, atk_block, expires = await db.items(result.name, check=True)
        text = "{}. –ü—ã–ª—å –≥–µ—Ä–æ–µ–≤ –ì–µ—Ä–æ–ò–Ω - –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ –ø—Ä–æ–∑–≤–∞–ª–∏ —Å—Ç—Ä–∞–Ω–Ω—É—é –∂–∏–¥–∫–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Ä–∏—Ç—Å—è —Å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞–Ω–∫–æ–≤. –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å\n\n–ü–æ—Å–ª–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ 10 –º–∏–Ω—É—Ç, –∞ —Ç–∞–∫ –∂–µ —Å–ª—É—á–∞–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç".format(result.name)
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ü–∞—É—á–∏–π –∞—Ñ—Ä–æ–¥–∏–∑–∏–∞–∫':
        name, size, bonus, atk_block, expires = await db.items(result.name, check=True)
        text = "{}. \n\n–ü—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –≤–æ –≤–Ω—É—Ç—Ä—å –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ –≤ –≥–ª–∞–∑–∞—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –ø–æ–ª–∞, –Ω–æ —ç—Ç–æ —Ç–µ–±–µ –Ω–µ –ø–æ–º–æ–∂–µ—Ç –≤–µ–¥—å –≤ –¢–æ–• –Ω–µ—Ç —Å–µ–∫—Å–∞. –ù–æ –∑–∞—Ç–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –º–æ–±–æ–≤ –≤ –ø–æ–ª–µ —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –∏—Ö —Ö–ø –∏ –∞—Ç–∞–∫–∏ –≤ –¥–≤–∞ —Ä–∞–∑, –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –¥–æ–±—ã—á—É —Å –Ω–∏—Ö. –î–µ–π—Å—Ç–≤—É–µ—Ç 20 –º–∏–Ω—É—Ç.".format(result.name)
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ë–∞–∫–∏–Ω':
        name, size, bonus, atk_block, expires = await db.items(result.name, check=True)
        text = "{}. \n\n–ë–∞–∫–∏–Ω –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å –≤–∏–∞–≥—Ä–æ–π –¥–ª—è –º–æ–∑–≥–∞. –ü–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Ç–∞–∫–æ–π –∫–∞–π—Ñ - —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —É–º–Ω–µ–µ, –ª–æ–≤—á–µ–µ –∏ –ø—Ä–æ–≤–æ—Ä–Ω–µ–µ. –ù—É –∞ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ? –ú–æ–∂–µ—à—å –∏–¥—Ç–∏ –Ω–∞–∑–∞–¥.".format(result.name)
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ü–æ–ª–æ—Ç–µ–Ω—Ü–µ':
        name, size, bonus, atk_block, expires = await db.items(result.name, check=True)
        text = "{}. –ü–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –≤—ã—Å–æ–∫–æ–π –≤–ª–∞–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –≤—ã—Ç–µ—Ä–µ—Ç—å—Å—è".format(name)
        markup.add(InlineKeyboardButton('–í—ã—Ç–µ—Ä–µ—Ç—å—Å—è'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ë–∞–≥—Ä–æ–≤–∞—è –±–æ–º–±–∞':
        name, size, bonus, atk_block, expires = await db.items(result.name, check=True)
        text = "{}. –í–∑—Ä—ã–≤—á–∞—Ç–∫–∞ –æ–±–ª–µ–ø–ª–µ–Ω–Ω–∞—è –∫—É—á–µ–π —Ä–∞–∑–¥—Ä–æ–±–ª–µ–Ω–Ω–æ–π —á–µ—à—É–∏. –ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ø–æ –ø–ª–æ—â–∞–¥–∏. –ë—Ä–æ—Å–∞—è –ø–æ–¥ —Å–µ–±—è, –Ω—É–∂–Ω–æ –ø—Ä–æ—è–≤–ª—è—Ç—å –ø—Ä–µ–¥–µ–ª—å–Ω—É—é –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å.".format(result.name)
        markup.add(InlineKeyboardButton('–ë—Ä–æ—Å–∏—Ç—å –ø–æ–¥ —Å–µ–±—è', callback_data="bomb_{}_1".format(str(use))))
        markup.add(InlineKeyboardButton('–ë—Ä–æ—Å–∏—Ç—å —Å–ª–∞–±–æ', callback_data="bomb_{}_2".format(str(use))))
        markup.add(InlineKeyboardButton('–ë—Ä–æ—Å–∏—Ç—å —Å–∏–ª—å–Ω–æ', callback_data="bomb_{}_3".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ë–∏–ª–µ—Ç –Ω–∞ —Ç–æ—Ç —Å–≤–µ—Ç':
        name, size, bonus, atk_block, expires = await db.items(result.name, check=True)
        text = "{}. –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –º–µ—Å—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–º–µ—Ä—Ç–∏ (–∏–ª–∏ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏)".format(result.name)
        markup.add(InlineKeyboardButton('–ü—Ä–æ–∫–æ–ª–æ—Ç—å –±–∏–ª–µ—Ç–∏–∫', callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–í–∏–ê–≥—Ä–æ':
        text = "üíä–í–∏–ê–≥—Ä–æ. –í–æ–ª—à–µ–±–Ω–∞—è –ø–∏–ª—é–ª—è, —É–ª—É—á—à–∞—é—â–∞—è —Ç–≤–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ 30% –≤–æ –≤—Ä–µ–º—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–π–¥–∞ –≤ –±–∞—à–Ω–µ (–ò —Å–Ω–∏–∂–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ 30% –≤ PvP). –ü–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, —Å –≤–∞—Å —Å–Ω–∏–º–∞–µ—Ç—Å—è —ç—Ñ—Ñ–µ–∫—Ç –ü–ª–∞—â–∞-–Ω–µ–≤–∏–¥–∏–º–∫–∏ (–Ω–∞ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏—è—Ö). –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ–π–¥–∞ —ç—Ñ—Ñ–µ–∫—Ç —Ç–∞–±–ª–µ—Ç–∫–∏ –∏—Å—á–µ–∑–∞–µ—Ç."
        markup.add(InlineKeyboardButton('–í—ã–ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É', callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ö–æ—à–µ–ª—ë–∫ –ø–∞–¥—à–µ–≥–æ –≥–µ—Ä–æ—è':
        text = "–ö–æ—à–µ–ª—ë–∫ –ø–∞–¥—à–µ–≥–æ –≥–µ—Ä–æ—è. –ù—É–∂–Ω–æ –æ—Ç–Ω–µ—Å—Ç–∏ –µ–≥–æ –æ—Ö—Ä–∞–Ω–Ω–∏–∫—É, –Ω–∞–≤–µ—Ä–Ω–æ–µ —Ä–µ—á—å —Ç–æ–≥–¥–∞ —Å –Ω–∏–º —à–ª–∞ –æ–± —ç—Ç–æ–º —á–µ–ª–æ–≤–µ–∫–µ."
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
    elif result.name == '–°–≤–∏—Ç–æ–∫ –±–∞—à–Ω–∏':
        text = "üìú–°–≤–∏—Ç–æ–∫ –±–∞—à–Ω–∏. –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –≤–∞—Å –≤ –±–∞—à–Ω—é, –º–∏–Ω—É—è –¥–æ–ª–≥—É—é –ø—Ä–æ–≥—É–ª–∫—É –ø–æ —Ç—Ä–æ–ø–µ."
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
    elif result.name == '–¢—É–Ω–Ω–µ–ª—å–Ω—ã–π —Å–≤–∏—Ç–æ–∫':
        text = "üìú–¢—É–Ω–Ω–µ–ª—å–Ω—ã–π —Å–≤–∏—Ç–æ–∫. –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥."
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
    elif result.name == '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—É—Ç—ë–≤–∫–∞ –Ω–∞ —Å–≤–∞–ª–∫—É':
        text = "üéü–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—É—Ç—ë–≤–∫–∞ –Ω–∞ —Å–≤–∞–ª–∫—É. –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞ 15 –º–∏–Ω—É—Ç –Ω–∞ –°–≤–∞–ª–∫—É SR2"
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
    elif result.name == '–ö–∞—Ä—Ç–∞ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞':
        text = "üìú–ö–∞—Ä—Ç–∞ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞. –ü–æ–ª—É—á–µ–Ω–∞ –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –¥–µ–¥–∞ –∫–æ—Ç–æ—Ä—ã–π —É–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤ –∞—Ä—Ö–∏–≤–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."
        markup.add(InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–î–æ–∫—É–º–µ–Ω—Ç DSFB-4':
        text = "üìú–î–æ–∫—É–º–µ–Ω—Ç DSFB-4. –ü–æ–ª—É—á–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞. –°–∞–º –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–º —è–∑—ã–∫–µ, —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å. –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å —Å–º—ã—Å–ª –ø–æ—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤ –•—ç–≤–µ–Ω–±—É—Ä–≥–µ –ø–æ –ø–æ–≤–æ–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞."
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–°—Ç—Ä–∞–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞':
        text = "üî¶–°—Ç—Ä–∞–Ω–Ω–∞—è –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –æ—Ä—É–∂–∏—è –ö–ª–∞—Ä—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–æ—Å–∏—Ç—å —Å —Å–æ–±–æ–π —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å –µ—ë —ç–Ω–µ—Ä–≥–∏–µ–π.\n\n–ó–∞—Ä—è–∂–µ–Ω–æ –Ω–∞ üí°{}–µ–¥.".format(result.bonus)
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ü–∏—Å—å–º–æ –¥–ª—è –¢–∞–±–µ—Ä–Ω–∞–º':
        text = "‚úâÔ∏è–ü–∏—Å—å–º–æ –¥–ª—è –¢–∞–±–µ—Ä–Ω–∞–º –æ—Ç –¢–∞–±–µ—Ä–≤–∞–º–∞. –ù—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –µ–≥–æ –¢–∞–±–µ—Ä–Ω–∞–º."
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ü–∏—Å—å–º–æ –¥–ª—è –¢–∞–±–µ—Ä–≤–∞–º':
        text = "‚úâÔ∏è–ü–∏—Å—å–º–æ –¥–ª—è –¢–∞–±–µ—Ä–≤–∞–º–∞ –æ—Ç –¢–∞–±–µ—Ä–Ω–∞–º. –ù—É–∂–Ω–æ –æ—Ç–¥–∞—Ç—å –µ–≥–æ –¢–∞–±–µ—Ä–≤–∞–º—É."
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.type == '–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏':
        leftTime = (result.expires - time.time()) / 3600
        if leftTime >= 0:
            text = "{}\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏.\n–í–ø–æ–ª–Ω–µ —Å–≤–µ–∂–µ–µ –µ—â–µ {}—á.\n".format(str(result.name), round(leftTime, 2))
        else:
            text = "{}\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏.\n–ö–∞–∂–µ—Ç—Å—è, —Å —ç—Ç–∏–º —É–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å...".format(str(result.name))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.type == '–†–µ–¥–∫–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏':
        leftTime = (result.expires - time.time()) / 3600
        if leftTime >= 0:
            text = "{}\n‚≠êÔ∏è‚≠êÔ∏è–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏.\n–í–ø–æ–ª–Ω–µ —Å–≤–µ–∂–µ–µ –µ—â–µ {}—á.\n".format(str(result.name), round(leftTime, 2))
        else:
            text = "{}\n‚≠êÔ∏è‚≠êÔ∏è–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏.\n–ö–∞–∂–µ—Ç—Å—è, —Å —ç—Ç–∏–º —É–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å...".format(str(result.name))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.type == '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏':
        leftTime = (result.expires - time.time()) / 3600
        if leftTime >= 0:
            text = "{}\n‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏.\n–í–ø–æ–ª–Ω–µ —Å–≤–µ–∂–µ–µ –µ—â–µ {}—á.\n".format(str(result.name), round(leftTime, 2))
        else:
            text = "{}\n‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤–∫–∏.\n–ö–∞–∂–µ—Ç—Å—è, —Å —ç—Ç–∏–º —É–∂–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å...".format(str(result.name))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    elif result.name == '–ë—É—Å—Ç–µ—Ä':
        text = "‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –≤—ã–Ω–æ—Å–ª–∏–≤–µ–µ, –±—ã—Å—Ç—Ä–µ–µ –∏ –ª—É—á—à–µ! (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –º–∏–Ω—É—Ç—É, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞ –∏ –∑–æ–ª–æ—Ç–∞ –ø–æ–≤—ã—à–µ–Ω–æ –Ω–∞ 25%). –†–∞–±–æ—Ç–∞–µ—Ç {}—á".format(result.lvl)
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
    elif result.name == '–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑':
        allFilters = await db.Inventory.filter(name='–§–∏–ª—å—Ç—Ä—ã', bonus__gt=0, idplayer=user.id).only('bonus')
        filters = 0
        for z in allFilters: filters += z.bonus
        text = "–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑ - —Å–≤–µ—Ä—Ö-–Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —à—Ç—É–∫–∞ –≤ –ú–µ—Ç—Ä–æ. –ë–µ–∑ –ø—Ä–æ—Ç–∏–≤–æ–≥–∞–∑–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤ –Ω—ë–º —Ç—ã –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ –∑–∞–¥–æ—Ö–Ω—ë—à—å—Å—è.\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤–æ–≥–∞–∑–∞: {}/100\n–¢–≤–æ–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ö–≤–∞—Ç–∏—Ç –Ω–∞ {}-–ö".format(result.bonus, filters)
        markup.add(InlineKeyboardButton('–ù–∞–¥–µ—Ç—å', callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
    elif result.type == '–†—ã–±–∞–ª–∫–∞':
        text = "{}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?".format(result.name)
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
    elif result.name == '–•–ª–æ–ø—É—à–∫–∞':
        text = "{}. –û–≥–ª—É—à–∞–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ 10 –º–∏–Ω—É—Ç (–≤ —Ç.—á. –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ —Ö–ª–æ–ø—É—à–∫—É) - –ø–ª–∞—â–∏ –ø–µ—Ä–µ—Å—Ç–∞—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –∑–¥–æ—Ä–æ–≤—å–µ –Ω–µ –≤–∏–¥–Ω–æ, –≤ /look_around –≤–∏–¥–Ω–æ –≤—Å–µ—Ö –æ–≥–ª—É—à–µ–Ω–Ω—ã—Ö".format(result.name)
        markup.add(InlineKeyboardButton('–•–ª–æ–ø–Ω—É—Ç—å!', callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
    elif result.name == "–ó–æ–ª–æ—Ç–æ–π –∫–æ–ª—å—Ç":
        if result.descr:
            text = "–ó–æ–ª–æ—Ç–æ–π –∫–æ–ª—å—Ç. –≠–ª–∏—Ç–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –∫–æ–ª—å—Ç–∞. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å—é —è–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Ä—É–∂–∏–µ, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –ø–æ–≤–µ—Ä–∂–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ –≤ PvP\n–ù–∞ —Ä—É–∫–æ—è—Ç–∏ –≤—ã–≥—Ä–∞–≤–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç:\n\n{}".format(result.descr)
        else:
            text = "–ó–æ–ª–æ—Ç–æ–π –∫–æ–ª—å—Ç. –≠–ª–∏—Ç–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –æ–±—ã—á–Ω–æ–≥–æ –∫–æ–ª—å—Ç–∞. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å—é —è–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Ä—É–∂–∏–µ, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –ø–æ–≤–µ—Ä–∂–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø—Ä–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏–∏ –≤ PvP"
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–ù–∞–Ω–µ—Å—Ç–∏ –≥—Ä–∞–≤–∏—Ä–æ–≤–∫—É'.format(str(result.name)), callback_data="koltGrav_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
    else:
        text = "{}. \n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?".format(str(result.name))
        markup.add(InlineKeyboardButton('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å'.format(str(result.name)), callback_data="invUsing_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í—ã–±—Ä–æ—Å–∏—Ç—å', callback_data="invDrop_{}".format(str(use))))
        markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inveClose"))
    await bot.send_message(call.message.chat.id, text, reply_markup=markup)


async def invDrop(call): 
    if (call.from_user.id == call.message.chat.id):
        pass
    else:
        return
    do = call.data.split('_')
    use = do[1]
    user = await db.Users.get_or_none(user_id=call.from_user.id).first()
    result = await db.Inventory.get(id=use)
    checkOther = await db.Inventory.filter(name=result.name, active=1, idplayer=result.idplayer).count()
    if checkOther >= 2:
        text = "–£ —Ç–µ–±—è —Ö{} {}. –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤—ã–±—Ä–æ—Å–∏—Ç—å".format(checkOther, result.name)
        coinUserStatus[call.from_user.id] = 'dropItem_{}'.format(result.id)
    else:
        if result.active == 2:
            if result.type == '–ë—Ä–æ–Ω—è':
                await db.Users.filter(id=result.idplayer).update(armor=F('armor') - result.bonus)
        result.active = 0
        await result.save()
        text = "–¢—ã –≤—ã–±—Ä–æ—Å–∏–ª {}".format(result.name)
        await db.commitInventory(user, result)
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
async def invSklad(call, user): 
    if (call.from_user.id == call.message.chat.id):
        pass
    else:
        return
    do = call.data.split('_')
    use = do[1]
    if user.location == '–î–æ–º':
        checkhouse = await db.Houses.get_or_none(owner=user.id)
        if checkhouse and checkhouse.lvl > 1:
            currentSize = await db.getHouseInventorySize(user)
            result = await db.Inventory.get(id=use)
            size = await db.items(result.name, check='size')
            if size + currentSize <= checkhouse.inventory:
                result.active = 10
                await result.save()
                text = "–¢—ã –æ—Å—Ç–∞–≤–∏–ª –Ω–∞ —Å–∫–ª–∞–¥–µ {}".format(result.name)
            else:
                text = "–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞."
    else:
        text = "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤–Ω–µ –¥–æ–º–∞."
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)


@dp.message_handler(lambda m: coinUserStatus and m.from_user.id == m.chat.id and m.from_user.id in coinUserStatus and coinUserStatus[m.from_user.id] and coinUserStatus[m.from_user.id].startswith('dropItem_'))
async def InvDrop(m):
    user = await db.Users.get(user_id=m.from_user.id)
    _itemId = coinUserStatus[m.from_user.id].split("_")
    itemId =  _itemId[1]
    item = await db.Inventory.get(id=itemId)
    coinUserStatus[m.from_user.id] = None
    success = 0
    checkOther = await db.Inventory.filter(name=item.name, active=1, idplayer=item.idplayer).count()
    try:
        count = int(m.text)
    except:
        await bot.send_message(m.chat.id, "–¢—ã –≤–≤—ë–ª –Ω–µ —á–∏—Å–ª–æ. –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    if count > 0:
        pass
    else:
        await bot.send_message(m.chat.id, "–û—à–∏–±–∫–∞")
        return
    if count > checkOther: count = checkOther 
    allItemsToDrop = await db.Inventory.filter(name=item.name, active=1, idplayer=user.id).limit(count)
    for i in allItemsToDrop:
        i.active = 0
        await i.save()
        await db.commitInventory(user, i)
    await bot.send_message(m.chat.id, "–¢—ã –≤—ã–±—Ä–æ—Å–∏–ª —Ö{} {}".format(count, item.name))


bombKD = {}
async def bomb_(call, user): 
    if user.id in bombKD and bombKD[user.id] > int(time.time()):
        await bot.edit_message_text("–¢—ã –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ–º–±—ã", call.message.chat.id, call.message.message_id)
        return
    if user.location == '–•—ç–≤–µ–Ω–±—É—Ä–≥' or user.location == '–ö–∞–≤–∞–π–Ω—è' or user.location == '–û–∫–µ–∞–Ω—É—Å' or user.location == '–ì–æ—Ä–æ–¥':
        await bot.edit_message_text("*–ì–æ–ª–æ—Å –≤ –≥–æ–ª–æ–≤–µ* - –Ø —Å–ª—ã—à–∞–ª, –∑–∞ —Ç–µ—Ä—Ä–∞–∫—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ —Ç–µ–±–µ –¥–µ–ª–∞—é—Ç –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ—Å—Ç–∏ —Å —Ç–≤–æ–∏–º ‚ôÇAss‚ôÇ", call.message.chat.id, call.message.message_id)
        return
    if (call.from_user.id == call.message.chat.id):
        pass
    else:
        return
    do = call.data.split('_')
    use = do[1]
    sila = do[2]
    checkPlash = await db.Inventory.exists(name='–ü–ª–∞—â-–Ω–µ–≤–∏–¥–∏–º–∫–∞', idplayer=user.id, active=2)
    if checkPlash:
        await bot.edit_message_text("–ò–∑-–∑–∞ –ø–ª–∞—â–∞ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –±—Ä–æ—Å–∏—Ç—å –±–æ–º–±—É. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –µ–≥–æ —Å–Ω—è—Ç—å.", call.message.chat.id, call.message.message_id)
        return
    item = await db.Inventory.get(id=use)
    result = await db.Inventory.get(name=item.name, idplayer=user.id, active=1).first()
    if result.active == 1 and result.idplayer == user.id:
        bombKD[user.id] = int(time.time()) + 60
        result.active = 0
        await db.commitInventory(user, result)
        progLoc = user.progLoc.split('|')
        _progLoc = progLoc[1]
        if sila == '1': attackTo = int(_progLoc)
        elif sila == '2': attackTo = int(_progLoc) + 1
        elif sila == '3': attackTo = int(_progLoc) + 2
        else: attackTo = int(_progLoc) + 1
        progLocAtk = "{}|{}".format(progLoc[0], attackTo)
        usrs = await db.Users.filter(location=user.location, progLoc=progLocAtk)
        markup = InlineKeyboardMarkup()
        markup.row_width = 2
        markup.add(InlineKeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–∞–Ω–∏–µ –∏–≥—Ä–æ–∫—É (1üíé)', callback_data="poslanie_{}".format(user.user_id)))
        for z in usrs:
            z.nowhp = int(z.nowhp) - int((z.hp) * 0.2)
            if z.nowhp <= 0:
                try:
                    if z.id != user.id:
                        wastedgold = int(z.money * 0.2)
                        await bot.send_message(z.user_id, "–ó–≤—É–∫ –ø–∞–¥–µ–Ω–∏—è —á–µ–≥–æ-—Ç–æ —Ç—è–∂–µ–ª–æ–≥–æ, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π—Å—è –∫—Ä–∏–∫–æ–º _–õ–æ–∂–∏—Å—å!_ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–æ —Ç—ã —Å–ª—ã—à–∞–ª –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —Å–æ—Ç–Ω–∏ –∫—Ä–æ—à–µ—á–Ω—ã—Ö, –æ—Å—Ç—Ä—ã—Ö —Ç–æ—á–Ω–æ –ª–µ–∑–≤–∏–µ –æ—Å–∫–æ–ª–∫–æ–≤ –ø—Ä–æ–Ω–∑–∏–ª–∏ —Ç–≤–æ–µ —Ç–µ–ª–æ –≤–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö, —Å–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞–≤ —Ä–∞–∑—Ä—ã–≤—ã —Ç–∫–∞–Ω–µ–π –∏ —Å–∏–ª—å–Ω–µ–π—à–µ–µ –∂–æ–ø–Ω–æ–µ –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–µ. _WASTED_\n–ü–æ—Ç–µ—Ä—è–Ω–æ: {}üí∞".format(wastedgold), reply_markup=markup, parse_mode='markdown')
                    else:
                        await bot.send_message(z.user_id, "–ö–∞–º–∏–∫–∞ÃÅ–¥–∑–µ (—è–ø. Á•ûÈ¢® –∫–∞–º–∏–∫–∞–¥–∑—ç) ‚Äì —á–∞—Å—Ç—å —à–∏—Ä–æ–∫–æ–≥–æ —è–ø–æ–Ω—Å–∫–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞ —Ç–æ–∫–∫–æ—Ç–∞–π, –∫–æ—Ç–æ—Ä—ã–º –æ–±–æ–∑–Ω–∞—á–∞–ª–∏ –≤—Å–µ—Ö –¥–æ–±—Ä–æ–≤–æ–ª—å—Ü–µ–≤-—Å–º–µ—Ä—Ç–Ω–∏–∫–æ–≤.")
                except:
                    pass
                z.nowhp = z.hp
                z.location = '–•—ç–≤–µ–Ω–±—É—Ä–≥'
                z.position = '–ù–æ–º–µ—Ä –≤ –æ—Ç–µ–ª–µ'
                z.money = int(z.money - (z.money * 0.2))
                await db.Users.filter(id=z.id).update(nowhp=z.hp, location='–•—ç–≤–µ–Ω–±—É—Ä–≥', position='–ù–æ–º–µ—Ä –≤ –æ—Ç–µ–ª–µ', money=z.money, battleStatus=0)
            else:
                try:
                    await bot.send_message(z.user_id, "–ó–≤—É–∫ –ø–∞–¥–µ–Ω–∏—è —á–µ–≥–æ-—Ç–æ —Ç—è–∂–µ–ª–æ–≥–æ, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—é—â–∏–π—Å—è –∫—Ä–∏–∫–æ–º –õ–æ–∂–∏—Å—å! ‚Äî –≤—Å–µ, —á—Ç–æ —Ç—ã —Å–ª—ã—à–∞–ª –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤ —Ç–µ–±—è –≤–ø–∏–ª–∏—Å—å —Å–æ—Ç–Ω–∏ –æ—Å–∫–æ–ª–∫–æ–≤ –æ—Ç –±—Ä–æ—à–µ–Ω–Ω–æ–π –∫–∞–∫–∏–º-—Ç–æ –º—É–¥–∞–∫–æ–º –≥—Ä–∞–Ω–∞—Ç—ã. \n")
                except:
                    pass
            await db.Users.filter(id=z.id).update(nowhp=z.nowhp)
        await result.save()
        text = "–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {} –∏, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –∫–æ–≥–æ-—Ç–æ –∑–∞–¥–µ–ª. –°—Ç–æ–∏—Ç –ø–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å?".format(result.name)
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)



effectUsers = {}



async def invUsing(call, user): 
    if (call.from_user.id == call.message.chat.id):
        pass
    else:
        return
    do = call.data.split('_')
    use = do[1]
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    result = await db.Inventory.exists(id=use)
    if not result:
        return
    result = await db.Inventory.get_or_none(id=use)
    if user.battleStatus == 2:
        await bot.edit_message_text("–£ —Ç–µ–±—è –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å - –≤—ã –¥–µ—Ä—ë—Ç–µ—Å—å!", call.message.chat.id, call.message.message_id)
        return
    if result and result.active != 0 and user.id == result.idplayer:
        pass
    else:
        checkOther = await db.Inventory.exists(name=result.name, idplayer=user.id, active=1)
        if checkOther:
            result = await db.Inventory.get(name=result.name, idplayer=user.id, active=1).first()
        else:
            text = "–ü—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
            return
    if result.type == '–ï–¥–∞' or result.name == '–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞':
        text = await db.useEat(user, result)
    elif result.name  ==  '–°–≤–∏—Ç–æ–∫ –±–∞—à–Ω–∏':
        if user.quest == '–ò—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π' and user.questStatus == 1 and user.location != '–ü–µ—Å—á–∞–Ω–∞—è –ø–∏—Ä–∞–º–∏–¥–∞':
            progSplit = user.progLoc.split("|")
            num = progSplit[1]
            quest = await db.tempQuest.get(user_id=user.user_id, quest=user.quest, status=0).first()
            quest.progress += int(num)
            await db.tempQuest.filter(user_id=user.user_id, quest=user.quest, status=0).update(progress=quest.progress)
        if user.battleStatus == 1:
            mob = await db.Monsters.exists(id=user.battleWith)
            if mob:
                mob = await db.Monsters.get(id=user.battleWith)
                mob.battleStatus = 0
                mob.nowhp = mob.hp
                await db.Monsters.filter(id=user.battleWith).update(battleStatus=0, nowhp=mob.hp)
                user.battleStatus = 0
        result.active = 0
        user.location = '–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏'
        user.progLoc = '–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|0'
        user.progStatus = 1
        user.position = '–ü–ª–æ—â–∞–¥—å'
        user.battleStatus = 0
        text = "–¢—ã –ø—Ä–æ—á—ë–ª üìú–°–≤–∏—Ç–æ–∫ –±–∞—à–Ω–∏"
        await db.Users.filter(id=user.id).update(location=user.location, position=user.position, battleStatus=0, progLoc=user.progLoc, progStatus=1)
    elif result.name == '–¢—É–Ω–Ω–µ–ª—å–Ω—ã–π —Å–≤–∏—Ç–æ–∫':
        result.active = 0
        user.location = '–ì–æ—Ä–æ–¥'
        user.position = '–ü–ª–æ—â–∞–¥—å'
        await db.Users.filter(id=user.id).update(location=user.location, position=user.position, battleStatus=0)
        text = "–¢—ã –ø—Ä–æ—á—ë–ª üìú–¢—É–Ω–Ω–µ–ª—å–Ω—ã–π —Å–≤–∏—Ç–æ–∫"
    elif result.name == "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—É—Ç—ë–≤–∫–∞ –Ω–∞ —Å–≤–∞–ª–∫—É":
        result.active = 0
        await result.save()
        user.location = "–°–≤–∞–ª–∫–∞ SR2"
        await db.Users.filter(id=user.id).update(location=user.location, battleStatus=0, progLoc="–°–≤–∞–ª–∫–∞ SR2|0", progStatus=1)
        await bot.edit_message_text("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –Ω–∞ –°–≤–∞–ª–∫—É SR2. –û—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ, –¥–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è, –º–æ–Ω—Å—Ç—Ä—ã –Ω–∞—á–∏–Ω–∞—é—Ç –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ...", call.message.chat.id, call.message.message_id)
        await asyncio.sleep(10)
        await user.refresh_from_db()
        await giveMobSR(user)
        await asyncio.sleep(900)
        await user.refresh_from_db()
        if user.location == "–°–≤–∞–ª–∫–∞ SR2":
            await db.Users.filter(id=user.id).update(location="–•—ç–≤–µ–Ω–±—É—Ä–≥")
            try:
                await bot.send_message(user.user_id, "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø—É—Ç—ë–≤–∫–∏ –∫–æ–Ω—á–∏–ª–æ—Å—å.")
            except:
                pass
        text = "–£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ"
    elif result.name == '–°–≤–∏—Ç–æ–∫ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏':
        if user.quest == '–ò—Å–∫–∞—Ç–µ–ª—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π' and user.questStatus == 1 and user.location != '–ü–µ—Å—á–∞–Ω–∞—è –ø–∏—Ä–∞–º–∏–¥–∞':
            progSplit = user.progLoc.split("|")
            num = progSplit[1]
            quest = await db.tempQuest.get_or_none(user_id=user.user_id, quest=user.quest, status=0).first()
            if quest:
                quest.progress += int(num)
                await db.tempQuest.filter(user_id=user.user_id, quest=user.quest, status=0).update(progress=quest.progress)
        if user.battleStatus == 1:
            mob = await db.Monsters.exists(id=user.battleWith)
            if mob:
                mob = await db.Monsters.get(id=user.battleWith)
                mob.battleStatus = 0
                mob.nowhp = mob.hp
                await db.Monsters.filter(id=user.battleWith).update(battleStatus=0, nowhp=mob.hp)
                user.battleStatus = 0
        result.active = 0
        checkgorod = await db.Inventory.exists(idplayer=user.id, name='–ë–æ–ª—å—à–æ–π –≥–æ—Ä–æ–¥')
        user.position = '–ü–ª–æ—â–∞–¥—å'
        user.battleStatus = 0
        text = "–¢—ã –ø—Ä–æ—á—ë–ª üìú–°–≤–∏—Ç–æ–∫ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏"
        await result.save()
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
        if checkgorod:
            user.location = '–•—ç–≤–µ–Ω–±—É—Ä–≥'
            call.data = 'nav_bigcity_centr'
            await db.Users.filter(id=user.id).update(location=user.location, position=user.position, battleStatus=0)
            await nav_bigcity(call, user)
        else:
            user.location = '–ì–æ—Ä–æ–¥'
            call.data = 'nav_city_centr'
            await db.Users.filter(id=user.id).update(location=user.location, position=user.position, battleStatus=0)
            await nav_city(call, user)
        return
    elif result.name == '–ö–æ—Ñ–µ':
        result.active = 0
        user.zamoroz -= 25
        if user.zamoroz < 0:
            user.zamoroz = 0
        user.energy = user.energy + 70
        if user.energy > 100:
            user.energy = 100
        text = "–¢—ã –≤—ã–ø–∏–ª ‚òïÔ∏è–ö–æ—Ñ–µ. –£–¥–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ —Å–æ–≥—Ä–µ—Ç—å—Å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ–¥—Ä–æ—Å—Ç—å."
        await db.Users.filter(id=user.id).update(zamoroz=user.zamoroz, energy=user.energy)
    elif result.name == '–ë–∞–º–±—É–∫ –¥–ª—è –∫—É—Ä–µ–Ω–∏—è':
        result.active = 0
        user.energy = user.energy + 60
        user.nowhp = user.nowhp - int(user.hp / 3)
        if user.nowhp <= 0:
            text = "–¢—ã —Ä–µ—à–∏–ª –ø—Ä–∏—Å–µ—Å—Ç—å –Ω–∞ –∑–µ–º–ª–µ –∏ —Å–ø–æ–∫–æ–π–Ω–æ–π –ø–æ–∫—É—Ä–∏—Ç—å, –º–µ—á—Ç–∞—è –æ –≤–µ—á–Ω–æ–º. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ—Å–ª–µ —Ç—Ä–µ—Ç—å–µ–π –∑–∞—Ç—è–∂–∫–∏ –≤—ã –Ω–∞—á–∞–ª–∏ –∑–∞–¥—ã—Ö–∞—Ç—å—Å—è. –ù–∞–¥–ø–∏—Å—å ''–ö—É—Ä–µ–Ω–∏–µ —É–±–∏–≤–∞–µ—Ç'' –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–µ —Ç—É–ø–æ–π —à—É—Ç–∫–æ–π –ö–µ—Ñ–∏—Ä–∞."
            user.money = int(user.money / 2)
            await db.Users.filter(id=user.id).update(energy=100, nowhp=user.hp, location='–•—ç–≤–µ–Ω–±—É—Ä–≥', position='–ù–æ–º–µ—Ä –≤ –æ—Ç–µ–ª–µ', money=user.money)
        else:
            text = "–¢—ã —Ä–µ—à–∏–ª –ø—Ä–∏—Å–µ—Å—Ç—å –Ω–∞ –∑–µ–º–ª–µ –∏ —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–∫—É—Ä–∏—Ç—å, –ø–æ–º–µ—á—Ç–∞–≤ –æ –≤–µ—á–Ω–æ–º..."
            await db.Users.filter(id=user.id).update(energy=user.energy, nowhp=user.nowhp)
    elif result.name == '–ì–µ—Ä–æ–ò–Ω':
        if effectUsers and user.id in effectUsers and effectUsers[user.id] != None:
            await bot.edit_message_text("–ü–æ–∫–∞ —á—Ç–æ —Ç–µ–±–µ —Ö–≤–∞—Ç–∏—Ç..", call.message.chat.id, call.message.message_id)
            return
        result.active = 0
        await result.save()
        if user.booster >= time.time(): user.booster += 600
        else: user.booster = time.time() + 600
        await db.Users.filter(id=user.id).update(booster=user.booster)
        text = "–ü—Ä–∏–º–µ–Ω–∏–≤ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –ø—ã–ª—å –≥–µ—Ä–æ–µ–≤ ''–ì–µ—Ä–æ–ò–Ω'', –¢—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª –∫–∞–∫ –Ω–∞–ø–ª—ã–≤–∞–µ—Ç —ç–π—Ñ–æ—Ä–∏—è."
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
        effects = ['hp', 'atk', 'minushp']
        effect = random.choice(effects)
        usr = await db.Users.get(id=user.id)
        if effect == 'hp':
            usr.nowhp += 100
            await db.Users.filter(id=user.id).update(nowhp=usr.nowhp)
        elif effect == 'atk':
            buffs = [10, 20, 30, 40]
            plusAtk = random.choice(buffs)
            _timeEnd = int(time.time() + 600)
            newBuff = await db.Buffs(owner=usr.id, type='atk', num=plusAtk, status=1, timeEnd=_timeEnd)
            await newBuff.save()
            _buzyUsers[call.from_user.id] = 'free'
            effectUsers[usr.id] = None
        elif effect == 'minushp':
            usr.nowhp -= 50
            await db.Users.filter(id=user.id).update(nowhp=usr.nowhp)
        await db.commitInventory(user, result)
        return
    elif result.name == '–ù–∞—Å—Ç–æ–π–∫–∞ –±–æ—è—Ä—ã—à–Ω–∏–∫–∞':
        result.active = 0
        await result.save()
        text = "–¢—ã –≤—ã–ø–∏–ª –Ω–∞—Å—Ç–æ–π–∫—É. –ù–æ–≥–∏ –ø–æ–¥–∫–∞—à–∏–≤–∞—é—Ç—Å—è..."
        usr = await db.Users.get(id=user.id)
        await db.Users.filter(id=user.id).update(progStatus=0)
        boyaraUsers[user.user_id] = 1
        await bot.send_message(call.message.chat.id, text)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        effectUsers[usr.id] = "boyara"
        _buzyUsers[call.from_user.id] = 'free'
        await asyncio.sleep(300)
        effectUsers[usr.id] = None
        user = await db.Users.get(id=usr.id)
        user.progStatus = 1
        user.battleStatus = 0
        boyaraUsers[user.user_id] = 0
        locations = ['–ì–æ—Ä–æ–¥', '–ü—É—Å—Ç—ã–Ω—è', '–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å', '–ó–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã–π –ª–µ—Å', '–ü–µ—Å—á–∞–Ω–∞—è –ø–∏—Ä–∞–º–∏–¥–∞', '–õ–µ—Å–Ω–∞—è –≥—Ä–æ–±–Ω–∏—Ü–∞', '–û–∫—É—Å –õ–æ–∫—É—Å', '–†–∞–¥–∞—Ä', '–û–∫–µ–∞–Ω—É—Å', '–ü—É—Å—Ç—ã–Ω—è', '–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å', '–ó–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã–π –ª–µ—Å', '–ü–µ—Å—á–∞–Ω–∞—è –ø–∏—Ä–∞–º–∏–¥–∞', '–õ–µ—Å–Ω–∞—è –≥—Ä–æ–±–Ω–∏—Ü–∞', '–û–∫—É—Å –õ–æ–∫—É—Å', '–†–∞–¥–∞—Ä', '–û–∫–µ–∞–Ω—É—Å']
        randomProgLoc = random.randint(0, 30)
        newLoc = random.choice(locations)
        user.progLoc = "{}|{}".format(newLoc, randomProgLoc)
        await db.Users.filter(id=user.id).update(progStatus=1, battleStatus=0, progLoc=user.progLoc, location=newLoc)
        await bot.send_message(user.user_id, "–¢–µ–±—è, –Ω–∞–∫–æ–Ω–µ—Ü, –æ—Ç–ø—É—Å—Ç–∏–ª–æ –æ—Ç –Ω–∞—Å—Ç–æ–π–∫–∏. –û–≥–ª—è–Ω—É–≤—à–∏—Å—å, –¢—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ {}".format(newLoc))
        await db.commitInventory(user, result)
        return
    elif result.name == '–ü–∞—É—á–∏–π –∞—Ñ—Ä–æ–¥–∏–∑–∏–∞–∫':
        result.active = 0
        await result.save()
        text = "–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª üï∏–ü–∞—É—á–∏–π –∞—Ñ—Ä–æ–¥–∏–∑–∏–∞–∫. –ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫–æ–π —Ç—ã boss of the gym."
        user.psy = -10 # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ü–ï–†–ï–î–ï–õ–ê–¢–¨ –ü–û–î –ß–¢–û-–¢–û –î–†–£–ì–û–ï –í –ë–£–î–£–©–ï–ú
        await db.Users.filter(id=user.id).update(psy=user.psy)
        await bot.send_message(call.message.chat.id, text)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        effectUsers[user.id] = "paukiBlyat"
        await asyncio.sleep(1200)
        await db.Users.filter(id=user.id).update(psy=100)
        effectUsers[user.id] = None
        await bot.send_message(user.user_id, "–î–µ–π—Å—Ç–≤–∏–µ –ø–∞—É—á—å–µ–≥–æ –∞—Ñ—Ä–æ–¥–∏–∑–∏–∞–∫–∞ –∫–æ–Ω—á–∏–ª–æ—Å—å.")
        await db.commitInventory(user, result)
        return
    elif result.name == '–ë–∞–∫–∏–Ω':
        result.active = 0
        await result.save()
        text = "–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª üíä–ë–∞–∫–∏–Ω. –ù—É —á—Ç–æ —è –º–æ–≥—É —Å–∫–∞–∑–∞—Ç—å? –ü–æ—Ä–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∑–ª—ã–º –≥–µ–Ω–∏–µ–º –∏ –ª–æ–≤–∏—Ç—å —Ç–µ—Ö –∫—Ç–æ —Å–∑–∞–¥–∏.."
        await db.Users.filter(id=user.id).update(progStatus=2)
        await bot.send_message(call.message.chat.id, text)
        await bot.delete_message(call.message.chat.id, call.message.message_id)
    elif result.name == '–î—Ä–æ–≤–∞':
        result.active = 0
        user.zamoroz = 0
        user.progStatus = 1
        await db.Users.filter(id=user.id).update(zamoroz=0, progStatus=1)
        await result.save()
        text = "–ö–æ—Å—Ç—ë—Ä –ø–æ–º–æ–≥ —Ç–µ–±–µ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–º—ë—Ä–∑–Ω—É—Ç—å..."
    elif result.name == '–ü–æ–ª–æ—Ç–µ–Ω—Ü–µ':
        result.active = 0
        user.humidity = 0
        user.progStatus = 1
        await db.Users.filter(id=user.id).update(humidity=0, progStatus=1)
        await result.save()
        text = "–í—ã—Ç–µ—Ä—à–∏—Å—å –æ –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ —Ç–µ–±–µ —Å—Ç–∞–ª–æ –Ω–µ–º–Ω–æ–≥–æ –ª–µ–≥—á–µ –∏–¥—Ç–∏..."
    elif result.type == '–ó–µ–ª—å–µ':
        if user.battleStatus == 2:
            text = "–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–∏—Ç—å –∑–µ–ª—å–µ –≤–æ –≤—Ä–µ–º—è –±–æ—è!"
        else:
            if result.name == '–ß–µ—à—É–π—á–∞—Ç–æ–µ —Å–Ω–∞–¥–æ–±—å–µ':
                result.active = 0
                user.nowhp += 40
                await db.Users.filter(id=user.id).update(nowhp=user.nowhp)
                text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª üß´{}".format(result.name)
            elif result.name == '–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è':
                result.active = 0
                plusHp = user.hp * 0.35
                if user.nowhp + plusHp > user.hp: newHp = user.hp
                else: newHp = user.nowhp + plusHp
                await db.Users.filter(id=user.id).update(nowhp=newHp)
                text = "–¢—ã –≤—ã–ø–∏–ª üß™–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n‚ù§Ô∏è{}/{}".format(int(newHp), user.hp)
            elif result.name == '–°—Ä–µ–¥–Ω–µ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è':
                result.active = 0
                plusHp = user.hp * 0.5
                if user.nowhp + plusHp > user.hp: newHp = user.hp
                else: newHp = user.nowhp + plusHp
                await db.Users.filter(id=user.id).update(nowhp=newHp)
                text = "–¢—ã –≤—ã–ø–∏–ª üß™–°—Ä–µ–¥–Ω–µ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n‚ù§Ô∏è{}/{}".format(int(newHp), user.hp)
            elif result.name == '–ó–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è':
                result.active = 0
                user.nowhp = user.hp
                text = "–¢—ã –≤—ã–ø–∏–ª üß™–ó–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
                await db.Users.filter(id=user.id).update(nowhp=user.hp)
            elif result.name == '–ó–µ–ª—å–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Ö–æ–ª–æ–¥—É':
                timeEnd = int(time.time()) + 900
                newBuff = await db.Buffs(owner=result.idplayer, type='antiZamoroz', num=20, status=1, timeEnd=timeEnd)
                await newBuff.save()
                result.active = 0
                await result.save()
                text = "–¢—ã –≤—ã–ø–∏–ª üß™–ó–µ–ª—å–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Ö–æ–ª–æ–¥—É. –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∞ –º–æ–∂–Ω–æ –≤ /profile"
            elif result.name == '–ó–µ–ª—å–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Ö–æ–ª–æ–¥—É':
                timeEnd = int(time.time()) + 900
                newBuff = await db.Buffs(owner=result.idplayer, type='antiHumidity', num=20, status=1, timeEnd=timeEnd)
                await newBuff.save()
                result.active = 0
                await result.save()
                text = "–¢—ã –≤—ã–ø–∏–ª üß™–ó–µ–ª—å–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤–ª–∞–∂–Ω–æ—Å—Ç–∏. –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∞ –º–æ–∂–Ω–æ –≤ /profile"
            elif result.name == '–ó–µ–ª—å–µ —Ü–µ–ø–Ω–æ–π –º–æ–ª–Ω–∏–∏':
                timeEnd = int(time.time()) + 600
                newBuff = await db.Buffs(owner=result.idplayer, type='electro', num=5, status=1, timeEnd=timeEnd)
                await newBuff.save()
                result.active = 0
                await result.save()
                text = "–¢—ã –≤—ã–ø–∏–ª üß™–ó–µ–ª—å–µ —Ü–µ–ø–Ω–æ–π –º–æ–ª–Ω–∏–∏. –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∞ –º–æ–∂–Ω–æ –≤ /profile"
            else:
                result.active = 0
                user.nowhp = user.nowhp + result.bonus
                if user.nowhp > user.hp:
                    user.nowhp = user.hp
                await db.Users.filter(id=user.id).update(nowhp=user.nowhp)
                text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {}\n‚ù§Ô∏è{}/{}".format(result.name, int(user.nowhp), user.hp)
    elif result.type == '–°—É–Ω–¥—É–∫':
        text = await case(result, user)
    elif result.type == '–ë—Ä–æ–Ω—è':
        user = await db.Users.get(user_id=call.from_user.id).first()
        text = await armoruse(call, use, result, user)
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
        await db.cachedInventory(user, result)
        return
    elif result.name == '–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑':
        user = await db.Users.get(user_id=call.from_user.id).first()
        text = await armoruse(call, use, result, user)
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
        await db.cachedInventory(user, result)
        return
    elif result.type == '–†—ã–±–∞–ª–∫–∞':
        user = await db.Users.get(user_id=call.from_user.id).first()
        text = await armoruse(call, use, result, user)
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
        await db.cachedInventory(user, result)
        return
    elif result.type == '–û—Ä—É–∂–∏–µ':
        user = await db.Users.get(user_id=call.from_user.id).first()
        text = await armoruse(call, use, result, user)
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
        await db.cachedInventory(user, result)
        return
    elif result.type == '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç':
        user = await db.Users.get(user_id=call.from_user.id)
        text, result = await userart(call, use, result, user)
        await db.cachedInventory(user, result)

    elif result.name == '–ë–∏–ª–µ—Ç –Ω–∞ —Ç–æ—Ç —Å–≤–µ—Ç':
        user = await db.Users.get(user_id=call.from_user.id)
        _newLoc = user.progLoc.split("|")
        newLoc = _newLoc[0]
        blackListLocs = ["–ë–∞–∑–∞ –∫–ª–∞–Ω–∞", "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –†–∞–¥–∞—Ä–∞", "–°–≤–∞–ª–∫–∞ SR2", "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è"]
        if newLoc not in blackListLocs or not newLoc.startswith("–û–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏"):
            await db.Users.filter(id=user.id).update(location=newLoc, progStatus=1, battleStatus=0)
            result.active = 0
            await result.save()
            text = "–ü—Ä–æ–∫–æ–ª–æ–≤ –∏ –±–µ–∑ —Ç–æ–≥–æ –æ–±–∫–æ–ª–æ—Ç—ã–π –±–∏–ª–µ—Ç–∏–∫, –¢—ã –ø–æ—Ç–µ—Ä—è–ª —Å–æ–∑–Ω–∞–Ω–∏–µ. –û—á–Ω—É–≤—à–∏—Å—å, –æ—Å–º–æ—Ç—Ä–µ–ª—Å—è –∏ —É–∑–Ω–∞–ª –º–µ—Å—Ç–Ω–æ—Å—Ç—å. –≠—Ç–æ {}".format(newLoc)
        else:
            text = "–ö–∞–∫ –±—ã —Ç—ã –Ω–µ –∫–æ–ª–æ–ª —ç—Ç–æ—Ç –ø—Ä–æ–∫–ª—è—Ç—ã–π –±–∏–ª–µ—Ç–∏–∫, –Ω–∏—á–µ–≥–æ —Ç–∞–∫ –∏ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—ã –∏—Å–∫–æ–ª–æ–ª —Å–≤–æ–∏ –ø–∞–ª—å—Ü—ã, —Ç—ã —É–±—Ä–∞–ª –±–∏–ª–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ"
    elif result.name == '–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä—é–∫–∑–∞–∫':
        user = await db.Users.get(user_id=call.from_user.id)
        user.inventorySizeMax += 5
        await db.Users.filter(id=user.id).update(inventorySizeMax=user.inventorySizeMax)
        result.active = 0
        await result.save()
        text = "–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä—é–∫–∑–∞–∫"
    elif result.name == '–í–∏–ê–≥—Ä–æ':
        if result.active == 1:
            text = "–¢—ã –≤—ã–ø–∏–ª —Ç–∞–±–ª–µ—Ç–∫—É üíä–í–∏–ê–≥—Ä–æ. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç 10 –¢—ã –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—ã–π ''–¥–≤–∏–∂ –≤ —à—Ç–∞–Ω–∞—Ö'', –Ω–æ –Ω–µ –≤–æ–ª–Ω—É–π—Å—è - —ç—Ç–æ –ø—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ —Ö–æ–¥–∏—Ç—å –Ω–∞ —Ä–µ–π–¥."
            await bot.send_message(call.message.chat.id, text)
            await bot.delete_message(call.message.chat.id, call.message.message_id)
            result.active = 3
            await result.save()
            await db.commitInventory(user, result)
            _buzyUsers[call.from_user.id] = 'free'
            await asyncio.sleep(600)
            result.active = 4
            await result.save()
            await bot.send_message(call.message.chat.id, "–ù–∞–∫–æ–Ω–µ—Ü, —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª —Å—Ç—Ä–∞–Ω–Ω–æ–µ –æ—â—É—â–µ–Ω–∏–µ –æ—Ç —Ç–∞–±–ª–µ—Ç–∫–∏. –¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –≤–æ–ª—à–µ–±–Ω–∞—è –ø–∞–ª–æ—á–∫–∞ –Ω–∞—Ü–µ–ª–µ–Ω–∞ –≤ —Å—Ç–æ—Ä–æ–Ω—É –±–∞—à–Ω–∏", reply_markup=markup, parse_mode='markdown')
            return
        else:
            text = "–û—à–∏–±–∫–∞"
    elif result.name == '–ö–æ—Ä–æ–±–∫–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏':
        if result.active == 1:
            item = await legendaryCase(user, result)
            text = "–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–æ—Ä–æ–±–∫—É..."
        else:
            text = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
    elif result.type == '–†–µ—Ü–µ–ø—Ç':
        result.active = 0
        text = "–¢—ã –ø–µ—Ä–µ–ø–∏—Å–∞–ª –Ω–∞–¥–ø–∏—Å—å –Ω–∞ –±—É–º–∞–∂–∫–µ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º –Ω–∞ –∫–æ—Ç–µ–ª–æ–∫. –¢–µ–ø–µ—Ä—å —ç—Ç–∞ –≥—Ä—è–∑–Ω–∞—è –±—É–º–∞–∂–∫–∞ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è."
    elif result.name == '–ö–∞—Ä—Ç–∞ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞':
        if result.active == 1:
            text = "–í—ã–≥–ª—è–¥–∏—Ç –∏–∑ —Ä—É–∫ –≤–æ–Ω –ø–ª–æ—Ö–æ - —Å—Ä–∞–∑—É –≤–∏–¥–Ω–æ, —á—Ç–æ –¥–µ–¥ —Ä–∏—Å–æ–≤–∞–ª –Ω–∞ —Å–∫–æ—Ä—É—é —Ä—É–∫—É –∏ –æ—Å–æ–±–æ –Ω–µ –∑–∞–º–æ—Ä–∞—á–∏–≤–∞–ª—Å—è..."
            photo = open('./media/mapArchive.png', 'rb')
            await bot.send_photo(call.message.chat.id, photo, caption=text)
    elif result.name == "–•–ª–æ–ø—É—à–∫–∞":
        if result.active == 1 and user.location not in ["–•—ç–≤–µ–Ω–±—É—Ä–≥", "–ö–∞–≤–∞–π–Ω—è", "–ú–µ—Ç—Ä–æ", "–û–∫–µ–∞–Ω—É—Å", "–ì–æ—Ä–æ–¥", "–†–∞–¥–∞—Ä"]:
            result.active=0
            await result.save()
            await bot.edit_message_text("–í–∑—Ä—ã–≤–∞–µ–º —Ö–ª–æ–ø—É—à–∫—É!", call.message.chat.id, call.message.message_id)
            currentPosition = int(user.progLoc.split("|")[1])
            minPos = currentPosition - 5
            maxPos = currentPosition + 5
            allPos = []
            for i in range(minPos, maxPos): allPos.append("{}|{}".format(user.progLoc.split("|")[0], i))
            allUsers = await db.Users.filter(progLoc__in=allPos, location=user.progLoc.split("|")[0])
            for usr in allUsers:
                timeEnd = int(time.time()) + 600
                await db.Buffs.create(owner=usr.id, type='hlopushka', num=0, status=1, timeEnd=timeEnd)
                try:
                    await bot.send_message(usr.user_id, "–ö—Ç–æ-—Ç–æ –Ω–µ–¥–∞–ª–µ–∫–æ –≤–∑–æ—Ä–≤–∞–ª —Ö–ª–æ–ø—É—à–∫—É. –¢–µ–±—è –æ–≥–ª—É—à–∏–ª–æ!")
                except:
                    pass
            await db.commitInventory(user, result)
            return
        else:
            if user.location in ["–•—ç–≤–µ–Ω–±—É—Ä–≥", "–ö–∞–≤–∞–π–Ω—è", "–ú–µ—Ç—Ä–æ", "–û–∫–µ–∞–Ω—É—Å", "–ì–æ—Ä–æ–¥", "–†–∞–¥–∞—Ä"]:
                text = "–•–ª–æ–ø—É—à–∫—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ –≥–æ—Ä–æ–¥–∞."
            else:
                text = "–û—à–∏–±–∫–∞"
    elif result.name == '–ë—É—Å—Ç–µ—Ä':
        if result.active == 1:
            result.active = 0
            boostTime = result.lvl * 60 * 60
            if user.booster >= time.time(): await db.Users.filter(id=user.id).update(booster=F('booster') + boostTime)
            else: await db.Users.filter(id=user.id).update(booster=time.time() + boostTime)
            text = "‚ö°Ô∏è–ë—É—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω."
        else:
            text = "–ö–∞–∂–µ—Ç—Å—è, –æ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω..."
    else:
        text = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    await db.commitInventory(user, result)
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton('–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inv"))
    await result.save()
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='markdown')




async def invClose(call, user): 
    if (call.from_user.id == call.message.chat.id):
        pass
    else:
        return
    text = "–¢—ã –∑–∞–∫—Ä—ã–ª –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. –¢—ã —Ç–∞–∫ —Ä–µ–¥–∫–æ —ç—Ç–æ –¥–µ–ª–∞–µ—à—å..."
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)


#################
# ARMOR & ARTS  #
#################
async def userart(call, use, res, user):
    if res.idplayer != user.id:
        text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–æ—á–∫–∞"
        return text
    if res.name == '–ö—É—Å–æ–∫ –ø–∞–∑–∑–ª–∞':
        if res.active == 1:
            res.active = 0
            user.atk += 10
            user.hp += 10
            await db.Users.filter(id=user.id).update(atk=user.atk, hp=user.hp)
            await res.save()
            text = "–ù–µ –∑–Ω–∞—è —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º –∫—É—Å–æ—á–∫–æ–º –ø–∞–∑–∑–ª–∞, —Ç—ã —Å–ª—É—á–∞–π–Ω–æ —Å–ª–æ–º–∞–ª –µ–≥–æ. –í–Ω–µ–∑–∞–ø–Ω–æ, —Ç—ã –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª –ª—ë–≥–∫–æ—Å—Ç—å –∏ –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ, –∞ –≤–æ–∫—Ä—É–≥ –ø–∞–∑–∑–ª–∞ –ø–æ—è–≤–∏–ª–æ—Å—å —Å—Ç—Ä–∞–Ω–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–∑–≥–æ—Ä–∞–ª–æ—Å—å –≤—Å—ë —è—Ä—á–µ –∏ —è—Ä—á–µ. –ö–æ–≥–¥–∞ —Å–≤–µ—Ç –ø—Ä–æ–ø–∞–ª, –ø–∞–∑–∑–ª–∞ —Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª.\n+10üî™ + 10‚ù§Ô∏è"
        else:
            text = "–ö—É—Å–æ–∫ –ø–∞–∑–∑–ª–∞. –û–Ω —Å–ª–æ–º–∞–Ω. –í—Ä—è–¥ –ª–∏ —Å –Ω–∏–º —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–ª—É—á–∏—Ç—Å—è"
    elif res.name == '–í–æ–ª—à–µ–±–Ω—ã–µ –∫–æ—Å—Ç–∏':
        text = "–¢—ã –ø—Ä–æ—Å—Ç–æ... –ë—Ä–æ—Å–∏–ª –∫–æ—Å—Ç–∏ –Ω–∞ –ø–æ–ª, –≥–ª—è–¥—è –Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é. –ù–æ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–ª—É—á–∏–ª–æ—Å—å. –ü—Ä–∏—à–ª–æ—Å—å –∏—Ö –ø–æ–¥–æ–±—Ä–∞—Ç—å... –ù–∞–≤–µ—Ä–Ω–æ–µ, –Ω—É–∂–Ω–æ –∏—Ö –æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞."
    elif res.name == '–ê–º—É–ª–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è':
        checkother = await db.Inventory.exists(idplayer=user.id, name='–ê–º—É–ª–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è', active=2)
        if res.active == 2:
            res.active = 1
            await res.save()
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª {}".format(res.name)
            return text, res
        if checkother:
            text = "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        else:
            text = "–¢—ã –Ω–∞–¥–µ–ª üî∂–ê–º—É–ª–µ—Ç –∑–¥–æ—Ä–æ–≤—å—è"
            res.active = 2
            await res.save()
    elif res.name == '–û—Å–∫–æ–ª–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏':
        checkother = await db.Inventory.exists(idplayer=user.id, name='–û—Å–∫–æ–ª–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏', active=2)
        checkother2 = await db.Inventory.exists(idplayer=user.id, name='–ö–∞–º–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏', active=2)
        if res.active == 2:
            res.active = 1
            await res.save()
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª {}".format(res.name)
            return text, res
        if checkother or checkother2:
            text = "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ–¥–æ–±–Ω–æ–≥–æ —Ç–∏–ø–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        else:
            text = "–¢—ã –Ω–∞–¥–µ–ª üî∑–û—Å–∫–æ–ª–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏"
            res.active = 2
            await res.save()
    elif res.name == '–ö–∞–º–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏':
        checkother = await db.Inventory.exists(idplayer=user.id, name='–û—Å–∫–æ–ª–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏', active=2)
        checkother2 = await db.Inventory.exists(idplayer=user.id, name='–ö–∞–º–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏', active=2)
        if res.active == 2:
            res.active = 1
            await res.save()
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª {}".format(res.name)
            return text, res
        if checkother or checkother2:
            text = "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ–¥–æ–±–Ω–æ–≥–æ —Ç–∏–ø–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        else:
            text = "–¢—ã –Ω–∞–¥–µ–ª üî∑–ö–∞–º–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏"
            res.active = 2
            await res.save()
    elif res.name == '–ì–æ—Ä—à–æ–∫ –ª–µ–ø—Ä–µ–∫–æ–Ω–∞':
        checkother = await db.Inventory.exists(idplayer=user.id, name='–ì–æ—Ä—à–æ–∫ –ª–µ–ø—Ä–µ–∫–æ–Ω–∞', active=2)
        if res.active == 2:
            res.active = 1
            await res.save()
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª {}".format(res.name)
            return text, res
        if checkother:
            text = "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ–¥–æ–±–Ω–æ–≥–æ —Ç–∏–ø–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        else:
            text = "–¢—ã –Ω–∞–¥–µ–ª üçØ–ì–æ—Ä—à–æ–∫ –ª–µ–ø—Ä–µ–∫–æ–Ω–∞"
            res.active = 2
            await res.save()
    elif res.name == '–ö–∞—Ä–º–∞–Ω–Ω–∞—è –¥—Ä–∏–∞–¥–∞':
        checkother = await db.Inventory.exists(idplayer=user.id, name='–ö–∞—Ä–º–∞–Ω–Ω–∞—è –¥—Ä–∏–∞–¥–∞', active=2)
        if res.active == 2:
            res.active = 1
            await res.save()
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª {}".format(res.name)
            return text, res
        if checkother:
            text = "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –ø–æ–¥–æ–±–Ω–æ–≥–æ —Ç–∏–ø–∞, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        else:
            text = "–¢—ã –Ω–∞–¥–µ–ª üåø–ö–∞—Ä–º–∞–Ω–Ω–∞—è –¥—Ä–∏–∞–¥–∞"
            res.active = 2
            await res.save()
    elif res.name == '–û—Å–∫–æ–ª–æ–∫ –æ–≥–Ω—è':
        checkother3 = await db.Inventory.exists(idplayer=user.id, name='–û—Å–∫–æ–ª–æ–∫ –æ–≥–Ω—è', active=2)
        if res.active == 2:
            res.active = 1
            await res.save()
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª {}".format(res.name)
        if checkother3:
            text = "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        else:
            text = "–¢—ã –Ω–∞–¥–µ–ª üî•–û—Å–∫–æ–ª–æ–∫ –æ–≥–Ω—è"
            res.active = 2
            await res.save()
    elif res.name == '–ü–ª–∞—â-–Ω–µ–≤–∏–¥–∏–º–∫–∞':
        checkother = await db.Inventory.exists(idplayer=user.id, name='–ü–ª–∞—â-–Ω–µ–≤–∏–¥–∏–º–∫–∞', active=2)
        if res.active == 2:
            res.active = 1
            await res.save()
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª {}".format(res.name)
            return text, res
        if checkother:
            text = "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
        else:
            await bot.edit_message_text("–ù–∞–¥–µ–≤–∞–µ–º –ø–ª–∞—â, —ç—Ç–æ –∑–∞–π–º—ë—Ç –¥–æ –º–∏–Ω—É—Ç—ã...", call.message.chat.id, call.message.message_id)
            await asyncio.sleep(60)
            text = "–¢—ã –Ω–∞–¥–µ–ª –ü–ª–∞—â-–Ω–µ–≤–∏–¥–∏–º–∫—É"
            res.active = 2
            await res.save()
    else:
        checkother = await db.Inventory.exists(idplayer=user.id, name=res.name, active=2)
        if res.active == 2:
            res.active = 1
            await res.save()
            text = "–¢—ã —Å–Ω—è–ª {}".format(res.name)
        else:
            if checkother:
                text = "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç"
            else:
                if res.active == 1:
                    res.active = 2
                    await res.save()
                    text = "–¢—ã –Ω–∞–¥–µ–ª {}".format(res.name)

    return text, res


async def armorpers(call, user):
    re = await db.Inventory.filter(idplayer=user.id, active=2)
    text = '–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, —á—Ç–æ —Ç—ã –Ω–æ—Å–∏—à—å:'
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    for z in re:
        if z.type == '–ë—Ä–æ–Ω—è':
            name, bonus, size, atk_block, expires = await db.items(z.name, check=True)
            if atk_block and atk_block > 0:
                text += "\n{} | +{}üõ° (‚öîÔ∏è {}%)".format(name, z.bonus, atk_block)
            else:
                text += "\n{} | +{}üõ°".format(name, z.bonus)
        elif z.type == '–ê—Ä—Ç–µ—Ñ–∞–∫—Ç':
            name, bonus, size, atk_block, expires = await db.items(z.name, check=True)
            text += "\n{} ({}üîÜ)".format(name, z.lvl)
        elif z.type == '–û—Ä—É–∂–∏–µ':
            name, bonus, size, atk_block, expires = await db.items(z.name, check=True)
            text += "\n{} ({}üîÜ)".format(name, z.lvl)
        elif z.name == '–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑':
            name, bonus, size, atk_block, expires = await db.items(z.name, check=True)
            allFilters = await db.Inventory.filter(name='–§–∏–ª—å—Ç—Ä—ã', bonus__gt=0, idplayer=user.id).only('bonus')
            filters = 0
            for x in allFilters: filters += x.bonus
            text += "\nü§ø–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑: {}/100 (üï≥{})".format(z.bonus, filters)
        elif z.type == '–†—ã–±–∞–ª–∫–∞':
            name, bonus, size, atk_block, expires = await db.items(z.name, check=True)
            text += "\n{} ({}üîÜ)".format(name, z.lvl)
        markup.add(InlineKeyboardButton('–°–Ω—è—Ç—å {}'.format(name), callback_data="invUsing_{}".format(z.id)))
    markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="invClose"))
    await bot.send_message(call.message.chat.id, text, reply_markup=markup, parse_mode='markdown')
    await bot.delete_message(call.message.chat.id, call.message.message_id)


async def armoruse(call, use, result, user):
    head = ['head', '–•–æ–∫–∫–µ–π–Ω–∞—è –º–∞—Å–∫–∞', '–ö–æ–∂–∞–Ω—ã–π —à–ª–µ–º', '–®–ª—è–ø–∞ —Ñ–æ–∫—É—Å–Ω–∏–∫–∞', '–ö–µ–ø–∫–∞ –∞–¥–∏–¥–∞—Å', '–®–ª–µ–º –∏–∑ —Ñ–æ–ª—å–≥–∏', '–ö–æ–ª–ø–∞–∫ –≥–ª–∞–≤–≤—Ä–∞—á–∞', '–ö–æ–ª—é—á–∞—è –º–∞—Å–∫–∞', '–®–∞–ø–∫–∞-—É—à–∞–Ω–∫–∞', '–ì–æ—Ä–Ω–∞—è —à–∞–ø–∫–∞', '–û—á–∫–∏', '–®–ª–µ–º —É—Å–∏–ª–µ–Ω–Ω—ã–π', '–®–ª–µ–º']
    body = ['body', '–ö–æ–∂–∞–Ω—ã–π –Ω–∞–≥—Ä—É–¥–Ω–∏–∫', '–ë—Ä–æ–Ω–µ–∂–∏–ª–µ—Ç', '–ö–æ–º–±–∏–Ω–µ–∑–æ–Ω —Å—Ç–∞–ª–∫–µ—Ä–∞', '–ù–æ—á–Ω—É—à–∫–∞ –†–∞—Å–∫—É–ª–æ–≤–æ–π', '–ú–∞–π–∫–∞ –∏–∑ –ø–∞–∫–µ—Ç–∞', '–•–∞–ª–∞—Ç –≥–ª–∞–≤—Ä–∞—á–∞', '–ë–∞–≥—Ä–æ–≤—ã–π –∂–∏–ª–µ—Ç', '–ê–®—É–±–∞', '–ñ–∏–ª–µ—Ç —Å–∫–∞–ª–æ–ª–∞–∑–∞', '–ö—É–ø–∞–ª—å–Ω–∏–∫ –†–∞—Å–∫—É–ª–æ–≤–æ–π', '–ü–ª–∞—â-—É—è—â', '–ö–æ—Å—Ç—é–º —Ö–∏–º–∑–∞—â–∏—Ç—ã']
    foot = ['foot', '–ö–æ–∂–∞–Ω—ã–µ —à—Ç–∞–Ω—ã', '–°–ø–æ—Ä—Ç–∏–≤–∫–∏ –∞–¥–∏–¥–∞—Å', '–ù–∏–∂–Ω–µ–µ –±–µ–ª—å—ë –†–∞—Å–∫—É–ª–æ–≤–æ–π', '–®—Ç–∞–Ω—ã –ê—à–æ–¥–∞—Å', '–ú–æ–¥–Ω—ã–µ —à—Ç–∞–Ω—ã', '–®—Ç–∞–Ω—ã –≥–ª–∞–≤–≤—Ä–∞—á–∞', '–ë–∞–≥—Ä–æ–≤—ã–µ –ø–æ–Ω–æ–∂–∏', '–õ–µ—Ç–Ω–∏–µ —à–æ—Ä—Ç—ã', '–ö–æ—Ä–æ—Ç–∫–∏–µ —à–æ—Ä—Ç—ã', '–ü–ª–∞–≤–∫–∏', '–ß—É–ª–∫–∏', '–®–æ—Ä—Ç–∏–∫–∏', '–®–æ—Ä—Ç–∏–∫–∏ 2.0']
    shoes = ['shoes', '–ë–µ—Ä—Ü—ã', '–ö–æ–∂–∞–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏', '–ö—Ä–æ—Å—ã –∞–¥–∏–¥–∞—Å', '–¢—É—Ñ–µ–ª—å–∫–∏ –†–∞—Å–∫—É–ª–æ–≤–æ–π', '–ù–ï–∫—Ä–æ—Å—Å–æ–≤–∫–∏', '–¢–∞–ø–æ—á–∫–∏ –≥–ª–∞–≤–≤—Ä–∞—á–∞', '–ë–æ—Ç–∏–Ω–∫–∏ —Å —à–∏–ø–∞–º–∏', '–ó–∏–º–Ω–∏–µ –∫–∞–ª–æ—à–∏', '–ì–æ—Ä–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏', '–î—ã—Ä—è–≤–∞—è –ª–æ–¥–∫–∞', '–°—Ç–∞–ª–∫–µ—Ä—Å–∫–∏–µ –±–æ—Ç–∏–Ω–∫–∏', '–ü—Ä–æ—Ç–∏–≤–æ—Ä–∞–¥–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ –±–æ—Ç–∏–Ω–∫–∏']
    armor = ['armor', '–ö—Ä—ã—à–∫–∞ –æ—Ç –º—É—Å–æ—Ä–Ω–∏–∫–∞', '–ü–æ–∫—Ä—ã—à–∫–∞ —Å–æ —Å–≤–∞–ª–∫–∏', '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —â–∏—Ç', '–©–∏—Ç –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞', '–©–∏—Ç –ø–æ–∫–æ—Ä–∏—Ç–µ–ª—è –®–∞–∏-–•—É–ª—É–¥–∞', '–ñ–µ–ª–µ–∑–Ω—ã–π —â–∏—Ç', '–©–∏—Ç –±–æ–º–∂–∞', '–ó–æ–ª–æ—Ç–∞—è –ø–æ–∫—Ä—ã—à–∫–∞', '–©–∏—Ç –≤–µ—Ä–Ω–æ—Å—Ç–∏ –†–∞—Å–∫—É–ª–æ–≤–æ–π', '–©–∏—Ç-–∫—Ä—ã–ª–æ', '–Ø–π—Ü–∞ –†–µ–Ω–∞–Ω–≤–∞', '–°–∞–º–æ–Ω–∞–≥—Ä–µ–≤–∞—é—â–∞—è—Å—è –ø–æ–∫—Ä—ã—à–∫–∞']
    weapon = ['weapon', '–ü–∏—Å—Ç–æ–ª–µ—Ç —Å –Ω–æ–∂–æ–º', '–ö–æ–ø—å—ë', '–ö–∞—Ç–∞–Ω–∞', '–ú–µ—á', '–ö–∏–Ω–∂–∞–ª –≤–∞–º–ø–∏—Ä–∞', '–ö–æ–ª—å—Ç', '–ó–æ–ª–æ—Ç–æ–π –∫–æ–ª—å—Ç']
    art = ['art', '–°—É–≤–µ–Ω–∏—Ä —Å –º–æ—Ä—è', '–ö–≤–∏–Ω—Ç—ç—Å—Å–µ–Ω—Ü–∏—è –∫–∞–º–Ω—è', '–ö–∞–º–µ–Ω—å-–º–µ—Ç–∞–ª–ª–æ–ª–æ–º', '–ü–∞–ª–∫–∞ —è—Ä–æ—Å—Ç–∏']
    other =  ['other', '–ü—Ä–æ—Ç–∏–≤–æ–≥–∞–∑']
    fishing = ['fishing', '–ü—Ä–æ—Å—Ç–∞—è —É–¥–æ—á–∫–∞', '–ù–µ–ø—Ä–æ—Å—Ç–∞—è —É–¥–æ—á–∫–∞', '–û—á–µ–Ω—å –Ω–µ–ø—Ä–æ—Å—Ç–∞—è —É–¥–æ—á–∫–∞', '–í–µ—Å—å–º–∞ –Ω–µ–ø—Ä–æ—Å—Ç–∞—è —É–¥–æ—á–∫–∞']

    if result.name in head:
        armor_type = head[0]
    elif result.name in body:
        armor_type = body[0]
    elif result.name in foot:
        armor_type = foot[0]
    elif result.name in shoes:
        armor_type = shoes[0]
    elif result.name in armor:
        armor_type = armor[0]
    elif result.name in weapon:
        armor_type = weapon[0]
    elif result.name in other:
        armor_type = other[0]
    elif result.name in fishing:
        armor_type = fishing[0]
    if result.idplayer != user.id:
        text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–æ—á–∫–∞."
        return text
    if result.active == 1:
        weared = await db.Inventory.filter(~Q(id=result.id), idplayer=result.idplayer, active=2, type__in=['–ë—Ä–æ–Ω—è', '–û—Ä—É–∂–∏–µ', '–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞', '–†—ã–±–∞–ª–∫–∞'])
        for item in weared:
            if item.name in head:
                old_armor_type = head[0]
            elif item.name in body:
                old_armor_type = body[0]
            elif item.name in foot:
                old_armor_type = foot[0]
            elif item.name in shoes:
                old_armor_type = shoes[0]
            elif item.name in armor:
                old_armor_type = armor[0]
            elif item.name in weapon:
                old_armor_type = weapon[0]
            elif item.name in other:
                old_armor_type = other[0]
            elif item.name in fishing:
                old_armor_type = fishing[0]
            if old_armor_type == armor_type:
                if armor_type != 'weapon' and armor_type != 'other' and armor_type != 'fishing':
                    await db.Users.filter(id=user.id).update(armor=F('armor') - item.bonus)
                    await db.Users.filter(id=user.id).update(armor=F('armor') + result.bonus) 
                elif armor_type == 'art':
                    checkItem = await db.Inventory.exists(name=user.item, active=2, idplayer=user.id)
                    if not user.item or not checkItem:
                        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –±–µ–∑ –æ—Ä—É–∂–∏—è –Ω–µ –≤—ã–π–¥–µ—Ç"
                        return text
                elif armor_type == 'weapon':
                    await db.Users.filter(id=user.id).update(item=result.name)
                await db.Inventory.filter(id=item.id).update(active=1)
                await db.Inventory.filter(id=result.id).update(active=2)
                text = f"–¢—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–¥–µ–ª {result.name} –≤–º–µ—Å—Ç–æ {item.name}."
                return text
        result.active = 2

        if armor_type == 'weapon':
            await db.Users.filter(id=user.id).update(item=result.name)
        elif armor_type == 'other' or armor_type == 'fishing' or armor_type == 'art': pass
        else:
            await db.Users.filter(id=user.id).update(armor=F('armor') + result.bonus)
        await result.save()
        text = f"–¢—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–¥–µ–ª —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ."
    else:
        inventorySize = await db.getInventorySize(user)
        if result.size + inventorySize > user.inventorySizeMax:
            text = "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∫—É–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –¥–µ—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ - –≤ –∑—É–±—ã, –Ω–æ –æ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–µ –¥–ª—è —ç—Ç–æ–≥–æ"
        else:
            if result.type == '–ë—Ä–æ–Ω—è':
                result.active = 1
                user.armor = user.armor - result.bonus
                await result.save()
                await db.Users.filter(id=user.id).update(armor=F('armor') - result.bonus)
                text = "–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ."
            else:
                result.active = 1
                await result.save()

                text = "–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å."
    await db.cachedInventory(user, result)
    return text



#############################
#         BLACKLIST         #
#############################
async def itemsBlackList(m, user):
    if m.chat.id == m.from_user.id:
        text = "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–µ –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤ –Ω—ë–º. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /blacklistAdd –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.\n–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:\n\n"
        allItemsInBlackList = await db.BlacklistItems.filter(idplayer=user.id)
        if allItemsInBlackList:
            for item in allItemsInBlackList:
                text += "\n{} - /blacklistDelete_{}".format(item.name, item.id)
        else:
            text += "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        await bot.send_message(m.chat.id, text)

@dp.message_handler(lambda m:m.text and m.text.startswith('/blacklistDelete_'))
async def blDL_(m):
    if m.chat.id == m.from_user.id:
        user = await db.Users.get_or_none(user_id=m.from_user.id).first()
        if user and user.ban != 1:
            result = m.text.replace('/blacklistDelete_', '', 1).replace('@TowerOfHeaven_bot', '', 1)
            checkItemInBlackList = await db.BlacklistItems.get_or_none(id=result)
            if checkItemInBlackList and checkItemInBlackList.idplayer == user.id:
                await bot.send_message(m.chat.id, "–ò–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±—ã–ª —É–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç {}".format(checkItemInBlackList.name))
                await checkItemInBlackList.delete()

@dp.message_handler(lambda m:m.text and m.text.startswith('/blacklistAdd'))
async def blAdd(m):
    if m.chat.id == m.from_user.id:
        user = await db.Users.get_or_none(user_id=m.from_user.id).first()
        if user and user.ban != 1:
            result = m.text.replace('/blacklistAdd ', '', 1).replace('@TowerOfHeaven_bot', '', 1)
            check = await db.items(result, check='check')
            if check == True:
                checkAnotherItemInBlackList = await db.BlacklistItems.exists(idplayer=user.id, name=result)
                if checkAnotherItemInBlackList:
                    await bot.send_message(m.chat.id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
                else:
                    newItemToBlackList = await db.BlacklistItems(idplayer=user.id, name=result)
                    await newItemToBlackList.save()
                    await bot.send_message(m.chat.id, "–¢—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª {} –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤".format(result))
            else:
                await bot.send_message(m.chat.id, "–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")






async def koltGrav_(call, user):
    item = call.data.split("_")[1]
    checkItem = await db.Inventory.get_or_none(name="–ó–æ–ª–æ—Ç–æ–π –∫–æ–ª—å—Ç", idplayer=user.id, active=1, id=item).first()
    if checkItem:
        await bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∏.", call.message.chat.id, call.message.message_id)
        await GetQuantity.koltGrav.set()
    else:
        return await bot.edit_message_text("–ó–æ–ª–æ—Ç–æ–π –∫–æ–ª—å—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ", call.message.chat.id, call.message.message_id)


@dp.message_handler(state=GetQuantity.koltGrav)
async def koltGrav(message: types.Message, state=FSMContext):
    user = await db.Users.get_or_none(user_id=message.from_user.id).first()
    if user:
        checkItem = await db.Inventory.get_or_none(name="–ó–æ–ª–æ—Ç–æ–π –∫–æ–ª—å—Ç", idplayer=user.id, active=1).first()
        if len(message.text) <= 200:
            checkItem.descr = message.text
            await checkItem.save()
            await bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ!")
        else:
            await bot.send_message(message.chat.id, "–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤")
    await state.finish()



################################
#    REFERAL O4KA I DONATE     #
################################

@dp.inline_handler()
async def inline_handler(query: types.InlineQuery):
        # –í—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    switch_text = "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –≤ –∏–≥—Ä—É" \
        if len(query.query) == 0 \
        else "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É. –î–æ–±–∞–≤–∏—Ç—å ¬ª¬ª"
    ref_text = """
<i><b>–ë–æ–ª—å—à–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ª–æ–∫–∞—Ü–∏–π, –±–µ—Å—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω—Å—Ç—Ä–æ–≤,  –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∫–ª–∞–Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ —É–∂–µ –∂–¥—ë—Ç —Ç–µ–±—è –≤ 
Tower of Heaven !</b></i>

üéÅ <a href="http://t.me/TowerOfHeaven_bot?start={}">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è</a>, –∏ –Ω–∞—á–∏–Ω–∞–π —Å–≤–æ–π –ø—É—Ç—å —Å –ø—Ä–∏—è—Ç–Ω—ã–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º  = )
    """
    results = []
    test = types.InlineQueryResultArticle(id='1', title="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –≤ –∏–≥—Ä—É.",description="–ö–∏–¥–∞–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å –≤–∞—à–µ–π —Ä–µ—Ñ.—Å—Å—ã–ª–∫–æ–π",input_message_content=types.InputTextMessageContent(message_text=ref_text.format(query.from_user.id), parse_mode='HTML', disable_web_page_preview=True))
    results.append(test)

    await bot.answer_inline_query(query.id, results, cache_time=1)



async def refs(m, user):
    if m.chat.id == m.from_user.id:
        pass
    else:
        return


    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π', url="tg://share?url=@TowerOfHeaven_bot&nbsp;&nbsp;ref"))
    result = await db.Users.filter(ref=m.from_user.id)
    count = 0
    textc = ""
    for dict1 in result:
        count += 1
        donatesum = int(dict1.donatesum * 0.1)
        textc += "{} - {}lvl. –î–æ—Ö–æ–¥: {}üíé\n".format(dict1.username, dict1.lvl, donatesum)
    if count != 0:
        text = "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n–ü—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å üí∞ –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ–¥–Ω—è—Ç—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ —Ñ–æ—Ä–º—É–ª–µ [—É—Ä–æ–≤–µ–Ω—å * 5] + –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –≤–∏–¥–µ 1000üçó.\n–ü—Ä–∏ –¥–æ–Ω–∞—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10%üíé –æ—Ç —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞.\n–í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\nhttps://t.me/TowerOfHeaven_bot?start={}\n–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏ –¥–æ—Ö–æ–¥–∞ —Å –Ω–∏—Ö:\n{}".format(str(m.from_user.id), textc)
        if len(text) > 4096:
            for x in range(0, len(text), 4096):
                await bot.send_message(m.chat.id, text[x:x+4096])
        else:
            await bot.send_message(m.chat.id, text)
    else:
        text = "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n–ü—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å üí∞ –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ–¥–Ω—è—Ç—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ —Ñ–æ—Ä–º—É–ª–µ [—É—Ä–æ–≤–µ–Ω—å * 5] + –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π –±–æ–Ω—É—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –≤–∏–¥–µ 1000üçó.\n–ü—Ä–∏ –¥–æ–Ω–∞—Ç–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10%üíé –æ—Ç —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞.\n–í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n<code>https://t.me/TowerOfHeaven_bot?start={}</code>\n–£ –≤–∞—Å –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.".format(str(m.from_user.id))
        await m.answer(text, reply_markup=markup, parse_mode='html')




async def mypartn(m, user):
    if m.chat.id == m.from_user.id:
        re = await db.Users.get(user_id=m.from_user.id).first()
        if re.partner == 0: return await m.answer("–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 30% –æ—Ç –¥–æ–Ω–∞—Ç–æ–≤ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤. –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç —Ä–µ–∫–ª–∞–º–Ω—É—é –ø–ª–æ—â–∞–¥–∫—É. –í—ã–≤–æ–¥—ã –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É/–¥–æ–Ω–∞—Ç—ã –≤ –¥—Ä—É–≥–∏–µ –∏–≥—Ä—ã/YooMoney\n\n–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏/–∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ /report")
        result = await db.Users.filter(ref=m.from_user.id)
        count = 0
        zarabotok = 0
        textc = ""
        for dict in result:
            count += 1
            if re.partner == 1:
                zarabotok += int(dict.donatesumPartn * 0.3)
            elif re.partner == 2:
                zarabotok += int(dict.donatesumPartn * 0.5)
        text = "–í–∞—à–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n`https://t.me/TowerOfHeaven_bot?start={}`\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ - {} —á–µ–ª.\n–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {}—Ä—É–±.".format(str(m.from_user.id), count, zarabotok)
        await m.answer(text, parse_mode='markdown')




###############
#     API     #
###############

async def settings(m, user):
    if m.chat.id != m.from_user.id: return
    if user:
        await m.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n/blacklist - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n/inv_fa - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ\n/api_settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ API (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±–æ—Ç–æ–≤)\n/notif_settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")


async def inv_fa(m, user):
    if m.chat.id == m.from_user.id:
        text = f"\n–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–º–æ–≥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã, –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞—è—Å—å –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /fastAccessAdd –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.\n\n–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –±—ã—Å—Ç—Ä–æ–º –¥–æ—Å—Ç—É–ø–µ:\n\n"
        allItemsInFastAccess = await db.InventoryFastAccess.filter(idplayer=user.id)
        if allItemsInFastAccess:
            for item in allItemsInFastAccess:
                text += "\n{} - /fastAccessDelete_{}".format(item.name, item.id)
        else:
            text += "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
        await bot.send_message(m.chat.id, text)

@dp.message_handler(lambda m:m.text and m.text.startswith('/fastAccessDelete_'))
async def fastAccessDelete_(m):
    if m.chat.id == m.from_user.id:
        user = await db.Users.get_or_none(user_id=m.from_user.id).first()
        if user and user.ban != 1:
            result = m.text.replace('/fastAccessDelete_', '', 1).replace('@TowerOfHeaven_bot', '', 1)
            checkItemInFastAccess = await db.InventoryFastAccess.get_or_none(id=result)
            if checkItemInFastAccess and checkItemInFastAccess.idplayer == user.id:
                await bot.send_message(m.chat.id, "–ò–∑ —Å–ø–∏—Å–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –±—ã–ª —É–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç {}".format(checkItemInFastAccess.name))
                await checkItemInFastAccess.delete()

@dp.message_handler(lambda m:m.text and m.text.startswith('/fastAccessAdd '))
async def fastAccessAdd(m):
    if m.chat.id == m.from_user.id:
        user = await db.Users.get_or_none(user_id=m.from_user.id).first()
        if user and user.ban != 1:
            result = m.text.replace('/fastAccessAdd ', '', 1).replace('@TowerOfHeaven_bot', '', 1)
            check = await db.items(result, check='check')
            if check == True:
                checkAnotherItemInFastAccess = await db.InventoryFastAccess.exists(idplayer=user.id, name=result)
                if checkAnotherItemInFastAccess:
                    await bot.send_message(m.chat.id, "–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ —Å–ø–∏—Å–∫–µ")
                else:
                    newItemInFastAccess = await db.InventoryFastAccess(idplayer=user.id, name=result)
                    await newItemInFastAccess.save()
                    await bot.send_message(m.chat.id, "–¢—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª {} –≤ —Å–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞".format(result))
            else:
                await bot.send_message(m.chat.id, "–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")



async def notif_settings(m, user):
    if m.chat.id == m.from_user.id:
        checkSettings = await db.Notifications.get_or_none(idplayer=user.id).first()
        if not checkSettings:
            checkSettings = await db.Notifications(idplayer=user.id)
            await checkSettings.save()
        if checkSettings.hotel == 1: hotel = "‚úÖ"
        else: hotel = "‚ùå"

        if checkSettings.onsen == 1: onsen = "‚úÖ"
        else: onsen = "‚ùå"
        
        if checkSettings.eat == 1: eat = "‚úÖ"
        else: eat = "‚ùå"

        if checkSettings.energy == 1: energy = "‚úÖ"
        else: energy = "‚ùå"

        if checkSettings.loc_effects == 1: loc_effects = "‚úÖ"
        else: loc_effects = "‚ùå"

        if checkSettings.regs == 1: regs = "‚úÖ"
        else: regs = "‚ùå"

        if checkSettings.buffs == 1: buffs = "‚úÖ"
        else: buffs = "‚ùå" 

    text = """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:

({}) /nf_hotel - –û—Ç–µ–ª—å
({}) /nf_onsen - –ò—Å—Ç–æ—á–Ω–∏–∫–∏
({}) /nf_eat - –ï–¥–∞
({}) /nf_energy - –≠–Ω–µ—Ä–≥–∏—è
({}) /nf_locEffects - –≠—Ñ—Ñ–µ–∫—Ç—ã –ª–æ–∫–∞—Ü–∏–π
({}) /nf_regs - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
({}) /nf_buffs - –ö–æ–Ω–µ—Ü –¥–µ–π—Å—Ç–≤–∏—è –±–∞—Ñ—Ñ–∞""".format(hotel, onsen, eat, energy, loc_effects, regs, buffs)
    await m.answer(text)

async def nf_(m, user):
    if m.chat.id == m.from_user.id:
        pass
    else:
        return
    result = m.text.replace('/nf_', '', 1).replace('@TowerOfHeaven_bot', '', 1)
    user = await db.Users.get(user_id=m.from_user.id).first()
    if user:
        checkSettings = await db.Notifications.get_or_none(idplayer=user.id).first()
        if not checkSettings:
            checkSettings = await db.Notifications(idplayer=user.id)
            await checkSettings.save()
        if result == 'hotel':
            if checkSettings.hotel == 0: checkSettings.hotel = 1
            else: checkSettings.hotel = 0
        elif result == 'onsen':
            if checkSettings.onsen == 0: checkSettings.onsen = 1
            else: checkSettings.onsen = 0
        elif result == 'eat':
            if checkSettings.eat == 0: checkSettings.eat = 1
            else: checkSettings.eat = 0
        elif result == 'energy':
            if checkSettings.energy == 0: checkSettings.energy = 1
            else: checkSettings.energy = 0
        elif result == 'locEffects':
            if checkSettings.loc_effects == 0: checkSettings.loc_effects = 1
            else: checkSettings.loc_effects = 0
        elif result == 'regs':
            if checkSettings.regs == 0: checkSettings.regs = 1
            else: checkSettings.regs = 0
        elif result == 'buffs':
            if checkSettings.buffs == 0: checkSettings.buffs = 1
            else: checkSettings.buffs = 0
        else:
            await m.answer("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞")
        await checkSettings.save()
        await m.answer("Done!")

async def usrSetApi(m, user):
    if m.chat.id != m.from_user.id: return
    apiBotsGet = await db.Api.filter(idplayer=user.id)
    text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API:"
    if apiBotsGet:
        for z in apiBotsGet:
            if z.botStatus == 1:
                text += "\n@{} - –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω (/s_api_{})".format(z.bot, z.id)
            else:
                text += "\n@{} - –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç (/s_api_{})".format(z.bot, z.id)
    else:
        text += "\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"
    await bot.send_message(m.chat.id, text)

async def s_api(m, user):
    if m.chat.id == m.from_user.id:
        pass
    else:
        return
    result = m.text.replace('/s_api_', '', 1).replace('@TowerOfHeaven_bot', '', 1)
    apiSet = await db.Api.exists(id=result)
    if apiSet:
        apiSet = await db.Api.get(id=result).first()
    if apiSet and apiSet.idplayer == user.id:
        if apiSet.botStatus == 1:
            apiSet.botStatus = 0
            await apiSet.save()
            await bot.send_message(m.chat.id, "–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ API –¥–ª—è –±–æ—Ç–∞ @{}".format(apiSet.bot))
        elif apiSet.botStatus == 0:
            apiSet.botStatus = 1
            await apiSet.save()
            await bot.send_message(m.chat.id, "–í—ã –≤–∫–ª—é—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –ø–æ API –¥–ª—è –±–æ—Ç–∞ @{}".format(apiSet.bot))
    else:
        return


#############
#  ALCHEMY  #
#############
async def varenie(call, user=None): 
    if (call.from_user.id == call.message.chat.id):
        pass
    else:
        return
    if antiflood and call.from_user.id in antiflood and antiflood[call.from_user.id] == 'buzy':
        await bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–ö–∞–∂–µ—Ç—Å—è, —Ç—ã —É–∂–µ –≤–∞—Ä–∏—à—å —á—Ç–æ-—Ç–æ... –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(60)
        antiflood[call.from_user.id] = None
        return
    antiflood[call.from_user.id] = 'buzy'
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    do = call.data.split('_')
    use = do[1]


    ostanki = await db.Inventory.filter(name='–û—Å—Ç–∞–Ω–∫–∏ –≥–µ—Ä–æ–µ–≤', idplayer=user.id).count()
    oduvanchiki = user.oduvanchik
    rca = user.rca
    sakura = user.sakura
    roza = user.roza

    if oduvanchiki >= 2 and rca >= 1: passSredne = 1
    else: passSredne = 0
    if oduvanchiki >= 1 and roza >= 1 and rca >= 1: passBig =1
    else: passBig = 0
    checkRecipy = await db.Inventory.exists(idplayer=user.id, name='–†–µ—Ü–µ–ø—Ç –±–∞–º–±—É–∫', active=0)
    if oduvanchiki >= 4 and roza >= 2 and rca >= 2 and sakura >= 1 and checkRecipy: passBamboo = 1
    else: passBamboo = 0
    recipy = await db.Inventory.exists(name='–†–µ—Ü–µ–ø—Ç –≥–µ—Ä–æ–ò–Ω', idplayer=user.id, active=0)
    if ostanki >= 10 and recipy: passGeroin = 1
    else: passGeroin = 0
    checkRecipy = await db.Inventory.exists(idplayer=user.id, name='–†–µ—Ü–µ–ø—Ç –±–æ—è—Ä—ã—à–Ω–∏–∫', active=0)
    if oduvanchiki >= 6 and roza >= 3 and rca >= 2 and sakura >= 4 and ostanki >= 2 and checkRecipy: passBoyara = 1
    else: passBoyara = 0
    checkRecipy = await db.Inventory.exists(idplayer=user.id, name='–†–µ—Ü–µ–ø—Ç –í–∏–ê–≥—Ä–æ', active=0)
    if oduvanchiki >= 35 and roza >= 20 and checkRecipy: passViagra = 1
    else: passViagra = 0
    checkRecipy = await db.Inventory.exists(idplayer=user.id, name='–†–µ—Ü–µ–ø—Ç –ø–∞—É—á–∏–π –∞—Ñ—Ä–æ–¥–∏–∑–∏–∞–∫', active=0)
    if oduvanchiki >= 10 and roza >= 10 and rca >= 10 and sakura >= 10 and ostanki >= 5 and checkRecipy: passPaukiblyat = 1
    else: passPaukiblyat = 0
    checkRecipy = await db.Inventory.exists(idplayer=user.id, name='–†–µ—Ü–µ–ø—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –º–∞–ª–æ–≥–æ –∑–µ–ª—å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', active=0)
    if oduvanchiki >= 5 and roza >= 3 and rca >= 3 and ostanki >= 1 and checkRecipy: passRestoreSmall = 1
    else: passRestoreSmall = 0
    checkRecipy = await db.Inventory.exists(idplayer=user.id, name='–†–µ—Ü–µ–ø—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–µ–ª—å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', active=0)
    if oduvanchiki >= 8 and roza >= 5 and rca >= 5 and ostanki >= 2 and checkRecipy: passRestoreMedium = 1
    else: passRestoreMedium = 0
    if sakura >= 10 and roza >= 8 and rca >= 8 and ostanki >= 3: passRestore = 1
    else: passRestore = 0
    checkRecipy = await db.Inventory.exists(idplayer=user.id, name='–†–µ—Ü–µ–ø—Ç –±–∞–∫–∏–Ω', active=0)
    if oduvanchiki >= 3 and roza >= 7 and rca >= 2 and sakura >= 7 and checkRecipy: passBakin = 1
    else: passBakin = 0 



    if use == 'restore':
        if passRestore == 1:

            await call.message.answer('–°–∫–æ–ª—å–∫–æ —Ç–∞–∫–∏—Ö —Å–≤–∞—Ä–∏—Ç—å? –ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª, –≤–≤–µ–¥–∏ "–æ—Ç–º–µ–Ω–∞"')
            await GetQuantity.restore.set()
            return
        else:
            text = "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."

    elif use == 'restoreSmall':
        if passRestoreSmall == 1:
            await call.message.answer('–°–∫–æ–ª—å–∫–æ —Ç–∞–∫–∏—Ö —Å–≤–∞—Ä–∏—Ç—å? –ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª, –≤–≤–µ–¥–∏ "–æ—Ç–º–µ–Ω–∞"')
            await GetQuantity.restoreSmall.set()
            return
        else:
            text = "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."
    
    elif use == 'restoreMedium':
        if passRestoreSmall == 1:
            await call.message.answer('–°–∫–æ–ª—å–∫–æ —Ç–∞–∫–∏—Ö —Å–≤–∞—Ä–∏—Ç—å? –ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª, –≤–≤–µ–¥–∏ "–æ—Ç–º–µ–Ω–∞"')
            await GetQuantity.restoreMedium.set()
            return
        else:
            text = "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."

    elif use == 'sredne':
        if passSredne == 1:
            await db.Users.filter(id=user.id).update(rca = F('rca') - 1, oduvanchik = F('oduvanchik') - 2)
            await db.addItem('–°—Ä–µ–¥–Ω–µ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è', user)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–≤–∞—Ä–∏–ª üß™–°—Ä–µ–¥–Ω–µ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è"
        else:
            text = "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"

    elif use == 'big':
        if passBig == 1:
            await db.Users.filter(id=user.id).update(roza = F('roza') - 1, rca = F('rca') - 1, oduvanchik = F('oduvanchik') - 1)
            await db.addItem('–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è', user)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–≤–∞—Ä–∏–ª üß™–ë–æ–ª—å—à–æ–µ –∑–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è"
        else:
            text = "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"

    elif use == 'bamboo':
        if passBamboo == 1:
            await db.Users.filter(id=user.id).update(sakura = F('sakura') - 1,
                                                    roza = F('roza') - 2,
                                                    rca = F('rca') - 2,
                                                    oduvanchik = F('oduvanchik') - 4)
            await db.addItem('–ë–∞–º–±—É–∫ –¥–ª—è –∫—É—Ä–µ–Ω–∏—è', user)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª üö¨–ë–∞–º–±—É–∫ –¥–ª—è –∫—É—Ä–µ–Ω–∏—è"
        else:
            text = "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."

    elif use == 'geroin':
        if passGeroin == 1:

            bones = await db.Inventory.filter(name='–û—Å—Ç–∞–Ω–∫–∏ –≥–µ—Ä–æ–µ–≤', active=1, idplayer=user.id).limit(10).delete()
            await db.addItem('–ì–µ—Ä–æ–ò–Ω', user)
            text = '–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –ì–µ—Ä–æ–ò–Ω'
        else:
            text = '–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤'

    elif use == 'boyara':
        if passBoyara == 1:
            await db.Users.filter(id=user.id).update(oduvanchik = F('oduvanchik') - 6, roza = F('roza') - 3, rca = F('rca') - 2, sakura = F('sakura') - 4)
            await db.Inventory.filter(name='–û—Å—Ç–∞–Ω–∫–∏ –≥–µ—Ä–æ–µ–≤', active=1, idplayer=user.id).limit(2).delete()

            await db.addItem('–ù–∞—Å—Ç–æ–π–∫–∞ –±–æ—è—Ä—ã—à–Ω–∏–∫–∞', user)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª üç∂–ù–∞—Å—Ç–æ–π–∫—É –±–æ—è—Ä—ã—à–Ω–∏–∫–∞"
        else:
            text = "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"

    elif use == 'viagra':
        if passViagra == 1:
            await db.Users.filter(id=user.id).update(roza = F('roza') - 20, oduvanchik = F('oduvanchik') - 35)
            await db.addItem('–í–∏–ê–≥—Ä–æ', user)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª üíä–í–∏–ê–≥—Ä–æ"
        else:
            text = "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"

    elif use == 'bakin':
        if passBakin == 1:
            await db.Users.filter(id=user.id).update(oduvanchik = F('oduvanchik') - 3, roza = F('roza') - 2, rca = F('rca') - 7, sakura=F('sakura') - 7)
            await db.addItem('–ë–∞–∫–∏–Ω', user)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª üíä–ë–∞–∫–∏–Ω"
        else:
            text = "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"

    elif use == 'ilovestas':
        if passPaukiblyat == 1:
            await db.Users.filter(id=user.id).update(sakura = F('sakura') - 10,
                                                    roza = F('roza') - 10,
                                                    rca = F('rca') - 10,
                                                    oduvanchik = F('oduvanchik') - 10)
            await db.Inventory.filter(name='–û—Å—Ç–∞–Ω–∫–∏ –≥–µ—Ä–æ–µ–≤', active=1, idplayer=user.id).limit(5).delete()
            await db.addItem('–ü–∞—É—á–∏–π –∞—Ñ—Ä–æ–¥–∏–∑–∏–∞–∫', user)
            text = "–¢—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª üï∏–ü–∞—É—á–∏–π –∞—Ñ—Ä–æ–¥–∏–∑–∏–∞–∫"
        else:
            text = "–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"
    antiflood[call.from_user.id] = 'free'
    # await user.save()
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(InlineKeyboardButton('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data="inv"))
    await bot.send_message(call.message.chat.id, text, reply_markup=markup)



@dp.message_handler(state=GetQuantity.restore)
async def create_restore(message: types.Message, state=FSMContext):
    antiflood[message.from_user.id] = 'buzy'

    user = await db.Users.get(user_id=message.from_user.id)

    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await message.answer('–û–∫. –Ω–µ –±—É–¥—É –ø–æ–∫–∞ –≤–∞—Ä–∏—Ç—å.')
        await state.finish()
        return

    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ).')
        return

    if int(message.text) >= 50:
        await message.answer('–Ø —É—Å—Ç–∞–Ω—É —Å—Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏—Ç—å... –¥–∞–≤–∞–π –Ω–µ –±–æ–ª—å—à–µ 50, —Ö–æ—Ç—è –±—ã. ')
        await state.finish()
        return

    if int(message.text) == 0:
        await message.answer('–í—Ä–æ–¥–µ —Ö–æ—Ç–µ–ª —Å–≤–∞—Ä–∏—Ç—å —á—Ç–æ-—Ç–æ, –∞ –≤—Ä–æ–¥–µ —É–∂–µ –∏ –Ω–µ —Ö–æ—á—É...')
        await state.finish()
        return

    await message.answer('–ù–∞—á–∏–Ω–∞—é –≤–∞—Ä–∏—Ç—å...')

    requirements = {'sakura': 10, 'roza': 8, 'rca': 8, 'bones': 3}

    quantity = int(message.text)

    user_have_bones = await db.Inventory.filter(name='–û—Å—Ç–∞–Ω–∫–∏ –≥–µ—Ä–æ–µ–≤', active=1, idplayer=user.id).count()
    user_have_flowers = {'sakura': user.sakura, 'roza': user.roza, 'rca': user.rca, 'bones': user_have_bones}

    for x in requirements:
        requirements[x] *= quantity


    bool_dict = {item:bool(user_have_flowers[item] >= requirements[item]) for item in requirements}
    # await message.answer(bool_dict)
    if False in bool_dict.values():
        await message.answer(f'–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–≤–∞—Ä–∏—Ç—å –ø–æ–º–µ–Ω—å—à–µ.\n\n–î–ª—è –≤–∞—Ä–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ö{requirements["rca"]}üå∑ x{requirements["roza"]}üåπ x{requirements["sakura"]}üå∏ x{requirements["bones"]}ü¶¥')
        await state.finish()
        return

    cannot_create = 0
    for i in range(1, quantity+1):
        success = await db.addItem('–ó–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', user)
        if success == False:
            cannot_create += 1
        else:
            await db.Users.filter(id=user.id).update(sakura = F('sakura') - 10, roza = F('roza') - 8, rca = F('rca') - 8)

            await db.Inventory.filter(name='–û—Å—Ç–∞–Ω–∫–∏ –≥–µ—Ä–æ–µ–≤', active=1, idplayer=user.id).limit(3).delete()

    quantity -= cannot_create
    text = f"–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–≤–∞—Ä–∏–ª x{quantity}üß™–ó–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."

    antiflood[message.from_user.id] = 'free'
    await message.answer(text)
    await state.finish()

@dp.message_handler(state=GetQuantity.restoreSmall)
async def create_restore(message: types.Message, state=FSMContext):
    antiflood[message.from_user.id] = 'buzy'

    user = await db.Users.get(user_id=message.from_user.id)

    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await message.answer('–û–∫. –Ω–µ –±—É–¥—É –ø–æ–∫–∞ –≤–∞—Ä–∏—Ç—å.')
        await state.finish()
        return

    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ).')
        return

    if int(message.text) > 50:
        await message.answer('–Ø —É—Å—Ç–∞–Ω—É —Å—Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏—Ç—å... –¥–∞–≤–∞–π –Ω–µ –±–æ–ª—å—à–µ 50, —Ö–æ—Ç—è –±—ã. ')
        await state.finish()
        return

    if int(message.text) == 0:
        await message.answer('–í—Ä–æ–¥–µ —Ö–æ—Ç–µ–ª —Å–≤–∞—Ä–∏—Ç—å —á—Ç–æ-—Ç–æ, –∞ –≤—Ä–æ–¥–µ —É–∂–µ –∏ –Ω–µ —Ö–æ—á—É...')
        await state.finish()
        return

    await message.answer('–ù–∞—á–∏–Ω–∞—é –≤–∞—Ä–∏—Ç—å...')

    requirements = {'oduvanchiki': 5, 'roza': 3, 'rca': 3, 'bones': 1}

    quantity = int(message.text)

    user_have_bones = await db.Inventory.filter(name='–û—Å—Ç–∞–Ω–∫–∏ –≥–µ—Ä–æ–µ–≤', active=1, idplayer=user.id).count()
    user_have_flowers = {'oduvanchiki': user.oduvanchik, 'roza': user.roza, 'rca': user.rca, 'bones': user_have_bones}

    for x in requirements:
        requirements[x] *= quantity


    bool_dict = {item:bool(user_have_flowers[item] >= requirements[item]) for item in requirements}
    # await message.answer(bool_dict)
    if False in bool_dict.values():
        await message.answer(f'–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–≤–∞—Ä–∏—Ç—å –ø–æ–º–µ–Ω—å—à–µ.\n\n–î–ª—è –≤–∞—Ä–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ö{requirements["oduvanchiki"]}üåº x{requirements["roza"]}üåπ x{requirements["rca"]}üå∑ x{requirements["bones"]}ü¶¥')
        await state.finish()
        return

    cannot_create = 0
    for i in range(1, quantity+1):
        success = await db.addItem('–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', user)
        if success == False:
            cannot_create += 1
        else:
            await db.Users.filter(id=user.id).update(oduvanchik = F('oduvanchik') - 5, roza = F('roza') - 3, rca = F('rca') - 3)

            await db.Inventory.filter(name='–û—Å—Ç–∞–Ω–∫–∏ –≥–µ—Ä–æ–µ–≤', active=1, idplayer=user.id).limit(1).delete()

    quantity -= cannot_create
    text = f"–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–≤–∞—Ä–∏–ª x{quantity}üß™–ú–∞–ª–æ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."

    antiflood[message.from_user.id] = 'free'
    await message.answer(text)
    await state.finish()
@dp.message_handler(state=GetQuantity.restoreMedium)
async def create_restore(message: types.Message, state=FSMContext):
    antiflood[message.from_user.id] = 'buzy'

    user = await db.Users.get(user_id=message.from_user.id)

    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await message.answer('–í—Ä–æ–¥–µ —Ö–æ—Ç–µ–ª —Å–≤–∞—Ä–∏—Ç—å —á—Ç–æ-—Ç–æ, –∞ –≤—Ä–æ–¥–µ —É–∂–µ –∏ –Ω–µ —Ö–æ—á—É...')
        await state.finish()
        return

    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ).')
        return

    if int(message.text) > 50:
        await message.answer('–Ø —É—Å—Ç–∞–Ω—É —Å—Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏—Ç—å... –¥–∞–≤–∞–π –Ω–µ –±–æ–ª—å—à–µ 50, —Ö–æ—Ç—è –±—ã. ')
        await state.finish()
        return

    if int(message.text) == 0:
        await message.answer('–í—Ä–æ–¥–µ —Ö–æ—Ç–µ–ª —Å–≤–∞—Ä–∏—Ç—å —á—Ç–æ-—Ç–æ, –∞ –≤—Ä–æ–¥–µ —É–∂–µ –∏ –Ω–µ —Ö–æ—á—É...')
        await state.finish()
        return

    await message.answer('–ù–∞—á–∏–Ω–∞—é –≤–∞—Ä–∏—Ç—å...')

    requirements = {'oduvanchiki': 8, 'roza': 5, 'rca': 5, 'bones': 2}

    quantity = int(message.text)

    user_have_bones = await db.Inventory.filter(name='–û—Å—Ç–∞–Ω–∫–∏ –≥–µ—Ä–æ–µ–≤', active=1, idplayer=user.id).count()
    user_have_flowers = {'oduvanchiki': user.oduvanchik, 'roza': user.roza, 'rca': user.rca, 'bones': user_have_bones}

    for x in requirements:
        requirements[x] *= quantity


    bool_dict = {item:bool(user_have_flowers[item] >= requirements[item]) for item in requirements}
    if False in bool_dict.values():
        await message.answer(f'–£ —Ç–µ–±—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–≤–∞—Ä–∏—Ç—å –ø–æ–º–µ–Ω—å—à–µ.\n\n–î–ª—è –≤–∞—Ä–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–æ–±–æ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ö{requirements["oduvanchiki"]}üåº x{requirements["roza"]}üåπ x{requirements["rca"]}üå∑ x{requirements["bones"]}ü¶¥')
        await state.finish()
        return

    cannot_create = 0
    for i in range(1, quantity+1):
        success = await db.addItem('–°—Ä–µ–¥–Ω–µ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è', user)
        if success == False:
            cannot_create += 1
        else:
            await db.Users.filter(id=user.id).update(oduvanchik = F('oduvanchik') - 8, roza = F('roza') - 5, rca = F('rca') - 5)

            await db.Inventory.filter(name='–û—Å—Ç–∞–Ω–∫–∏ –≥–µ—Ä–æ–µ–≤', active=1, idplayer=user.id).limit(2).delete()

    quantity -= cannot_create
    text = f"–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–≤–∞—Ä–∏–ª x{quantity}üß™–°—Ä–µ–¥–Ω–µ–µ –∑–µ–ª—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."

    antiflood[message.from_user.id] = 'free'
    await message.answer(text)
    await state.finish()
