class FractionActions(StatesGroup):
    deposit = State()
    frac_kick_reason = State()
    ad_text = State()
    player_award = State()
    clanCreation = State()
    clanAd = State()



async def nav_base(call, user):
    navWhere = call.data.split("_")
    nav = navWhere[2]
    frak = await db.Fraks.get_or_none(name=user.frak)
    if frak:
        if user.location != '–ë–∞–∑–∞ –∫–ª–∞–Ω–∞':
            if user.location != '–û–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ {}'.format(frak.name):
                return
            else:
                await db.Users.filter(id=user.id).update(location='–ë–∞–∑–∞ –∫–ª–∞–Ω–∞')
                await user.refresh_from_db()
        if nav == 'onsen':
            if frak.onsenLvl == 0:
                await bot.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–¥–µ—Ä –µ—â–µ –Ω–µ –≤—ã–¥–µ–ª–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É.", call.message.chat.id, call.message.message_id)
            else:
                await db.Users.filter(id=user.id).update(position='–ò—Å—Ç–æ—á–Ω–∏–∫–∏')
                await bot.edit_message_text("–≠—Ö, –∫–∞–∫ —Ö–æ—Ä–æ—à–æ... –í —ç—Ç–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —É–∂ —Ç–æ—á–Ω–æ –Ω–µ—Ç –Ω–∏ –º–æ—á–∏, –Ω–∏, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–µ–≤–∏—Ü, –æ–¥–Ω–∞–∫–æ –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –≤–æ—Ç —Ç–∞–∫ –≤–æ—Ç –ø–æ—Å–∏–¥–µ—Ç—å –∏ –ø–æ–º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –≥–æ—Ä—è—á–µ–π –≤–æ–¥–µ...\n\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ {}%‚ù§Ô∏è/–º–∏–Ω".format(frak.onsenLvl), call.message.chat.id, call.message.message_id)    
        elif nav == 'hotel':
            if frak.hotelLvl == 0:
                await bot.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–∏–¥–µ—Ä –µ—â–µ –Ω–µ –≤—ã–¥–µ–ª–∏–ª —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É.", call.message.chat.id, call.message.message_id)
            else:
                await db.Users.filter(id=user.id).update(position='–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞')
                await bot.edit_message_text("–í–æ—Ç —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–ø–ª–æ—Ö–æ –≤ —Ä–µ–∑–∏–¥–µ–Ω—Ü–∏–∏ –∫–ª–∞–Ω–∞, —Ç–∞–∫ —ç—Ç–æ –∫–æ–º–Ω–∞—Ç—ã. –£ –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ—è –ª–∏—á–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞! –ú–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –¥—É—à–∞ –ø–æ–∂–µ–ª–∞–µ—Ç!\n\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ {}‚ö°Ô∏è/–º–∏–Ω".format(frak.hotelLvl), call.message.chat.id, call.message.message_id)    
        elif nav == 'centr':
            await db.Users.filter(id=user.id).update(position='–°–∞–¥')
            if frak.leader == user.id or frak.zam == user.id:
                await bot.edit_message_text("–ê—Ö, –∫–∞–∫–æ–µ –∂–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ! –í–æ–∫—Ä—É–≥ —Ä–æ—Å—Ç—É—Ç –¥–µ—Ä–µ–≤—å—è, –ø—Ç–∏—á–∫–∏ –ø–æ—é—Ç - —ç—Ç–æ —Å–∞–º—ã–π –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–∞–π! –ê –µ—â–µ –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ —Ä–µ—à–∞—é—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ (–∏ –Ω–µ —Ç–æ–ª—å–∫–æ) –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∞–Ω–∞.", call.message.chat.id, call.message.message_id)    
            else:
                await bot.edit_message_text("–ê—Ö, –∫–∞–∫–æ–µ –∂–µ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ! –í–æ–∫—Ä—É–≥ —Ä–æ—Å—Ç—É—Ç –¥–µ—Ä–µ–≤—å—è, –ø—Ç–∏—á–∫–∏ –ø–æ—é—Ç - —ç—Ç–æ —Å–∞–º—ã–π –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–∞–π! –ê –µ—â–µ –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ –º–æ–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã –æ—Ç –ª–∏–¥–µ—Ä–∞, –∏–ª–∏ –∂–µ —á–µ—Ä–µ–∑ –∫–ª–µ—Ä–∫–∞ –≤–Ω–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –≤ —Ñ–æ–Ω–¥.", call.message.chat.id, call.message.message_id)    
            await asyncio.sleep(1)
            await grouppanel(call, user)
        elif nav == 'exitHeaven':
            await db.Users.filter(id=user.id).update(location='–•—ç–≤–µ–Ω–±—É—Ä–≥', position='–ü–ª–æ—â–∞–¥—å')
            await bot.edit_message_text("–°–æ–±—Ä–∞–≤—à–∏—Å—å —Å —Å–∏–ª–∞–º–∏, –¥–≤–∏–Ω—É–ª—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—É –•—ç–≤–µ–Ω–±—É—Ä–≥–∞...", call.message.chat.id, call.message.message_id)
        elif nav == 'exitTower':
            await db.Users.filter(id=user.id).update(location='–¢—Ä–æ–ø–∞ –∫ –±–∞—à–Ω–µ', progLoc='–¢—Ä–æ–ø–∞ –∫ –±–∞—à–Ω–µ|0', progStatus=1)
            await bot.edit_message_text("–°–æ–±—Ä–∞–≤—à–∏—Å—å —Å —Å–∏–ª–∞–º–∏, –¥–≤–∏–Ω—É–ª—Å—è –≤ —Å—Ç–æ—Ä–æ–Ω—É –±–∞—à–Ω–∏...", call.message.chat.id, call.message.message_id)
        elif nav == 'security':
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton('1', callback_data="frakSecurity_1"))
            markup.add(InlineKeyboardButton('2', callback_data="frakSecurity_2"))
            markup.add(InlineKeyboardButton('3', callback_data="frakSecurity_3"))
            markup.add(InlineKeyboardButton('4', callback_data="frakSecurity_4"))
            markup.add(InlineKeyboardButton('5', callback_data="frakSecurity_5"))
            await bot.edit_message_text("–í—ã–±–µ—Ä–∏ –æ—Ö—Ä–∞–Ω—è–µ–º—ã–π –∫–≤–∞–¥—Ä–∞—Ç.", call.message.chat.id, call.message.message_id, reply_markup=markup)

        elif nav == 'krazha':
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            fraks = await db.Fraks.filter(~Q(name=user.frak)).only('id', 'name', 'cooldown')
            for z in fraks:
                if z.cooldown >= int(time.time()):
                    pass
                else:
                    markup.add(InlineKeyboardButton('–ù–∞–ª—ë—Ç –Ω–∞ {}'.format(z.name), callback_data="frakKrazha_{}".format(z.id)))
            markup.add(InlineKeyboardButton('–Ø –ø–µ—Ä–µ–¥—É–º–∞–ª, –º–∞–º–∞, –∑–∞–±–µ—Ä–∏ –º–µ–Ω—è!', callback_data="nav_base_centr"))
            await bot.edit_message_text("–ö–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –≥—Ä–∞–±–∏—Ç—å –±—É–¥–µ–º?", call.message.chat.id, call.message.message_id, reply_markup=markup)



async def frakKrazha(call, user):
    navWhere = call.data.split("_")
    nav = navWhere[1]
    frak = await db.Fraks.get_or_none(name=user.frak)
    selectedFrak = await db.Fraks.get_or_none(id=nav)
    if selectedFrak and user.location == '–ë–∞–∑–∞ –∫–ª–∞–Ω–∞' and selectedFrak.cooldown <= int(time.time()):
        newProgLoc = "–û–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ {}|0".format(selectedFrak.name, nav)
        location = "–û–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ {}".format(selectedFrak.name)
        await db.Users.filter(id=user.id).update(progLoc=newProgLoc, location=location, progStatus=1)
        await bot.edit_message_text("–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –ø–æ–ø—ã—Ç–∫—É –æ–≥—Ä–∞–±–∏—Ç—å –≤—Å—ë —á—Ç–æ –Ω–∞–π–¥—ë—à—å —É {}".format(selectedFrak.name), call.message.chat.id, call.message.message_id)
    else:
        await bot.edit_message_text("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ —É –∫–ª–∞–Ω–∞ –∏–º–º—É–Ω–∏—Ç–µ—Ç –ª–∏–±–æ –∂–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤–Ω–µ –±–∞–∑—ã —Å–≤–æ–µ–π –∫–ª–∞–Ω–∞.", call.message.chat.id, call.message.message_id)

async def frakSecurity_(call, user):
    navWhere = call.data.split("_")
    nav = navWhere[1]
    frak = await db.Fraks.get_or_none(name=user.frak)
    if frak and user.location == '–ë–∞–∑–∞ –∫–ª–∞–Ω–∞':
        newProgLoc = "–û–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ {}|{}".format(frak.name, nav)
        location = "–û–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ {}".format(frak.name)
        await db.Users.filter(id=user.id).update(progLoc=newProgLoc, location=location)
        await bot.edit_message_text("–ß–µ—Ä–µ–∑ –º–µ–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–π–¥—ë—Ç! –° –≤–∞–∂–Ω—ã–º –≤–∏–¥–æ–º –∑–∞–Ω–∏–º–∞–µ—à—å –Ω—É–∂–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –∏ –ø—Ä–∏—Å—Ç—É–ø–∞–µ—à—å –∫ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—é.\n‚ö†Ô∏è–ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã - –≤–µ—Å—å–º–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞–Ω–∞ —Ä–µ—à–∏—Ç—Å—è –Ω–∞ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ, –≤–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –∏–≥—Ä–æ–∫–æ–º –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ PvP.", call.message.chat.id, call.message.message_id)
    else:
        return

async def grouppanel(call, user):
    fraka = str(user.frak)
    frak = await db.Fraks.get(name=fraka)
    needExp = frak.lvl * 1000
    leader = await db.Users.get(id=frak.leader)
    zam = await db.Users.exists(id=frak.zam)
    frakplayers = await db.Users.filter(frak=frak.name).count()
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    if frak.lvl >= 8: maxPlayers = 10
    else: maxPlayers = frak.lvl + 2
    if zam:
        zam = await db.Users.get(id=frak.zam)
        text = "{}\nüèÜ{}üèÜ\nü•à{}ü•à\n\n‚ú≥Ô∏è–£—Ä–æ–≤–µ–Ω—å: {}\n‚ùáÔ∏è–û–ø—ã—Ç: {}/{}\nüí∞–§–æ–Ω–¥: {}üí∞ {}üíé\nüë•–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {}/{}\nüî™–ë–æ–Ω—É—Å –∞—Ç–∞–∫–∏ +{}%\n\n\nüü£{}\nüî¥{}\nüîµ{}\nüü¢{}\n‚≠êÔ∏è–ë–æ–Ω—É—Å –∫ —Å–∏–ª–µ: {}\n–î–µ–±–∞—Ñ—Ñ –±–∞—à–Ω–∏: {}%\n\n‚õ≤Ô∏è–ò—Å—Ç–æ—á–Ω–∏–∫–∏ {} —É—Ä–æ–≤–Ω—è\nüè´–ù–æ—á–ª–µ–≥ {} —É—Ä–æ–≤–Ω—è".format(frak.name, leader.username, zam.username, frak.lvl, frak.exp, needExp, frak.fond, frak.fondKri, frakplayers, maxPlayers, frak.atk, frak.ametist, frak.rubin, frak.sapphire, frak.izumrud, frak.pvpBonus, frak.debuff, frak.onsenLvl, frak.hotelLvl)
    else:
        text = "{}\nüèÜ{}üèÜ\n\n‚ú≥Ô∏è–£—Ä–æ–≤–µ–Ω—å: {}\n‚ùáÔ∏è–û–ø—ã—Ç: {}/{}\nüí∞–§–æ–Ω–¥: {}üí∞ {}üíé\nüë•–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {}/{}\nüî™–ë–æ–Ω—É—Å –∞—Ç–∞–∫–∏ +{}%\n\n\nüü£{}\nüî¥{}\nüîµ{}\nüü¢{}\n‚≠êÔ∏è–ë–æ–Ω—É—Å –∫ —Å–∏–ª–µ: {}\n –î–µ–±–∞—Ñ—Ñ –±–∞—à–Ω–∏: {}%\n\n‚õ≤Ô∏è–ò—Å—Ç–æ—á–Ω–∏–∫–∏ {} —É—Ä–æ–≤–Ω—è\nüè´–ù–æ—á–ª–µ–≥ {} —É—Ä–æ–≤–Ω—è".format(frak.name, leader.username, frak.lvl, frak.exp, needExp, frak.fond, frak.fondKri, frakplayers, maxPlayers, frak.atk, frak.ametist, frak.rubin, frak.sapphire, frak.izumrud, frak.pvpBonus, frak.debuff, frak.onsenLvl, frak.hotelLvl)
    if frak.cooldown >= int(time.time()):
        timeLeft = frak.cooldown - int(time.time())
        if timeLeft <= 172800:
            timeleft = timeLeft / 3600
            boostLeft = "{}—á".format(round(timeleft, 2))
        else:
            timeleft = timeLeft / 86400
            boostLeft = "{}–¥–Ω".format(int(timeleft))
        text += "\n\nüõ°–ò–º–º—É–Ω–∏—Ç–µ—Ç –∫—Ä–∞–∂–∏ {}".format(boostLeft)
    sunday = await db.System.get(name='sunday')
    saturday = await db.System.get(name='saturday')
    if leader.id == user.id:
        markup.add(InlineKeyboardButton('–ü–∞–Ω–µ–ª—å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è', callback_data="fraka_panel"))
    if sunday.value == 1:
        markup.add(InlineKeyboardButton('–°–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã', callback_data="sunday"))
    if saturday.value == 1 and frak.saturday == 1:
        markup.add(InlineKeyboardButton('–¢–µ–ª–µ–ø–æ—Ä—Ç –∫ –±–æ—Å—Å—É', callback_data="saturday"))
    if user.id == frak.zam:
        markup.add(InlineKeyboardButton('IRTSoT', callback_data="frakapanel_irtst"))
        markup.add(InlineKeyboardButton('–ù–∞–≥—Ä–∞–¥–∏—Ç—å –∏–≥—Ä–æ–∫–∞', callback_data="frakapanel_award"))
    markup.add(InlineKeyboardButton('–í–∑–Ω–æ—Å –≤ —Ñ–æ–Ω–¥', callback_data="fraka_pay"))
    if user.id  != leader.id:
        markup.add(InlineKeyboardButton('–ü–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω', callback_data="fraka_leave"))
    await bot.send_message(call.message.chat.id, text, reply_markup=markup)



async def fraka(call, user): 
    if (call.from_user.id != call.message.chat.id):
        return

    fraka = await db.Fraks.get(name=user.frak)
    nav = call.data.split('_')
    navWhere = nav[1]
    if user.location == '–ë–∞–∑–∞ –∫–ª–∞–Ω–∞' and user.position == '–°–∞–¥':
        if navWhere == "pay":
            await bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤–∞–ª—é—Ç–∞ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ) –¥–ª—è –≤–∫–ª–∞–¥–∞ –≤ —Ñ–æ–Ω–¥ –∫–ª–∞–Ω–∞. –£ –≤–∞—Å {}üí∞ {}üíé\n–î–ª—è –æ—Ç–º–µ–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ''–û—Ç–º–µ–Ω–∏—Ç—å''.".format(user.money, user.almaz), call.message.chat.id, call.message.message_id)
            await FractionActions.deposit.set()
        elif navWhere == "panel":
            if fraka.leader == user.id:
                markup = InlineKeyboardMarkup(row_width=2)
                markup.add(InlineKeyboardButton('IRTSoT', callback_data="frakapanel_irtst"))
                markup.add(InlineKeyboardButton('–í—ã–≥–Ω–∞—Ç—å –∏–≥—Ä–æ–∫–∞', callback_data="frakapanel_kick"))
                markup.add(InlineKeyboardButton('–†–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è', callback_data="frakapanel_ads"))
                markup.add(InlineKeyboardButton('–ù–∞–≥—Ä–∞–¥–∏—Ç—å –∏–≥—Ä–æ–∫–∞', callback_data="frakapanel_award"))
                markup.add(InlineKeyboardButton('–ü—Ä–æ–∫–∞—á–∫–∞ –±–æ–Ω—É—Å–æ–≤', callback_data="frakapanel_kach"))
                markup.add(InlineKeyboardButton('–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è', callback_data="frakapanel_zam"))
                markup.add(InlineKeyboardButton('–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–Ω–∏—è', callback_data="frakapanel_changeLead"))
                markup.add(InlineKeyboardButton('–ü—Ä–æ–¥–ª–∏—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç –Ω–∞ 12—á (15üíé)', callback_data="frakapanel_immunity"))
                await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", call.message.chat.id, call.message.message_id, reply_markup=markup)
            else:
                return
        elif navWhere == 'leave':
            if fraka.leader != user.id:
                markup = InlineKeyboardMarkup(row_width=2)
                markup.add(InlineKeyboardButton('–ù–µ—Ç', callback_data="fraka_leaveNo"))
                markup.add(InlineKeyboardButton('–ù–µ—Ç', callback_data="fraka_leaveNo"))
                markup.add(InlineKeyboardButton('–î–∞', callback_data="fraka_leaveYes"))
                markup.add(InlineKeyboardButton('–ù–µ—Ç', callback_data="fraka_leaveNo"))
                markup.add(InlineKeyboardButton('–ù–µ—Ç', callback_data="fraka_leaveNo"))
                await bot.edit_message_text("–¢—ã —É–≤–µ—Ä–µ–Ω?", call.message.chat.id, call.message.message_id, reply_markup=markup)
        elif navWhere == 'leaveNo':
            await bot.edit_message_text("–•–æ—Ä–æ—à–æ, —Å–æ–æ–±—â–∏ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å.", call.message.chat.id, call.message.message_id)
        elif navWhere == 'leaveYes':
            if fraka.leader != user.id:
                await db.Users.filter(id=user.id).update(frak="", location='–•—ç–≤–µ–Ω–±—É—Ä–≥', position='–ü–ª–æ—â–∞–¥—å')
                await bot.edit_message_text("–¢—ã –ø–æ–∫–∏–Ω—É–ª –∫–ª–∞–Ω.", call.message.chat.id, call.message.message_id)
                try:
                    await bot.send_message(leader.user_id, f"–ò–≥—Ä–æ–∫ {user.username} –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–ª–∞–Ω.")
                except:
                    pass
            else:
                await bot.edit_message_text("–õ–∏–¥–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–ª–∞–Ω, –æ–Ω–∏ –∂–µ –±–µ–∑ —Ç–µ–±—è –±—É–¥—É—Ç –≥—Ä—É—Å—Ç–∏—Ç—å!", call.message.chat.id, call.message.message_id)
    else:
        await bot.edit_message_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–π—Ç–∏ –≤ —Å–∞–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–Ω–æ–º", call.message.chat.id, call.message.message_id)


@dp.message_handler(lambda m: m.chat.id == m.from_user.id, state=FractionActions.deposit, content_types=types.ContentTypes.TEXT)
async def vznosFrak(m, state=FSMContext):
    user = await db.Users.get(user_id=m.from_user.id)
    fraka = await db.Fraks.get(name=user.frak)

    if m.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å':
        await m.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.finish()
        return

    if not m.text.isdigit():
        await m.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
        return

    value = int(m.text)
    if value and value > 0:
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(InlineKeyboardButton('üí∞', callback_data="vsnosFrak_{}_gold".format(value)))
        markup.add(InlineKeyboardButton('üíé', callback_data="vsnosFrak_{}_almaz".format(value)))
        await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=markup)
        await state.finish()



async def frac_deposit(call, user): 
    if user.location != '–ë–∞–∑–∞ –∫–ª–∞–Ω–∞' and user.position != '–°–∞–¥':
        await bot.edit_message_text("–ó–¥–µ—Å—å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–Ω–µ—Å—Ç–∏ –≤–∑–Ω–æ—Å.", call.message.chat.id, call.message.message_id)
        return
    fraka = await db.Fraks.get(name=user.frak)
    nav = call.data.split('_')
    value = int(nav[1])
    valute = nav[2]
    if valute == 'gold':
        if user.money >= value:
            newFond = fraka.fond + value
            await db.Fraks.filter(name=user.frak).update(fond=newFond)
            await db.Users.filter(id=user.id).update(money=F('money') - value)
            await bot.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–ª–∏ {}üí∞ –≤ —Ñ–æ–Ω–¥".format(value), call.message.chat.id, call.message.message_id)
            await logBot.send_message(tradeChat, "–ò–≥—Ä–æ–∫ {} ({}) –≤–Ω—ë—Å {}üí∞ –≤ —Ñ–æ–Ω–¥ {}".format(user.username, user.id, value, user.frak))
        else:
            await bot.edit_message_text("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç üí∞", call.message.chat.id, call.message.message_id)
    elif valute == 'almaz':
        if user.almaz >= value:
            newFond = fraka.fondKri + value
            await db.Fraks.filter(name=user.frak).update(fondKri=newFond)
            await db.Users.filter(id=user.id).update(almaz=F('almaz') - value)
            await bot.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–ª–∏ {}üíé –≤ —Ñ–æ–Ω–¥".format(value), call.message.chat.id, call.message.message_id)
            await logBot.send_message(tradeChat, "–ò–≥—Ä–æ–∫ {} ({}) –≤–Ω—ë—Å {}üíé –≤ —Ñ–æ–Ω–¥ {}".format(user.username, user.id, value, user.frak))
        else:
            await bot.edit_message_text("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç üíé", call.message.chat.id, call.message.message_id)


@dp.message_handler(commands=['tstats'])
async def irtst(m):
    user = await db.Users.get_or_none(user_id=m.from_user.id)
    if user:
        if user.frak:
            frak = await db.Fraks.get(name=user.frak)
            if frak.leader == user.id or frak.zam == user.id: 
                users = await db.Users.filter(frak=user.frak, location__in=['–¢—Ä–æ–ø–∞ –∫ –±–∞—à–Ω–µ', '–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏', '–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏', '–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏', '–ß–µ—Ç–≤—ë—Ä—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏'])
                text = "In Real Time Stats of Tower\n"
                if users:
                    for z in users:
                        text += "\n[{}](tg://user?id={}) - {} ({}üî™ {}/{}‚ù§Ô∏è)".format(z.username, z.user_id, z.location, z.atk, z.nowhp, z.hp)
                else:
                    text += "\n–í –±–∞—à–Ω–µ —Å–µ–π—á–∞—Å –Ω–∏–∫–æ–≥–æ"
                await bot.send_message(m.chat.id, text, parse_mode='markdown')


@dp.callback_query_handler(lambda call: call.from_user.id == call.message.chat.id and call.data.startswith('frakapanel_'))
async def frakapanel(call, state=FSMContext): 

    user = await db.Users.get(user_id=call.from_user.id)
    if user.location != '–ë–∞–∑–∞ –∫–ª–∞–Ω–∞' and user.position != '–°–∞–¥':
        await bot.edit_message_text("–ó–¥–µ—Å—å –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∞–Ω–æ–º.", call.message.chat.id, call.message.message_id)
        return
    fraka = await db.Fraks.get(name=user.frak)
    nav = call.data.split('_')
    navWhere = nav[1]
    if fraka.leader == user.id or fraka.zam == user.id:
        markup = InlineKeyboardMarkup(row_width=2)
        if navWhere == 'kick' and len(nav) > 2:
            kicking = int(nav[2])
            await state.update_data(player_to_kick=kicking)
            userToKick = await db.Users.get(id=kicking)
            if userToKick.frak == user.frak:
                text = '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑–≥–Ω–∞–Ω–∏—è {}. –ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å –∏–≥—Ä–æ–∫–æ–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–û—Ç–º–µ–Ω–∏—Ç—å".'.format(userToKick.username)
                await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
                # bot.register_next_step_handler(gg, kickingFromFrak)
                await FractionActions.frac_kick_reason.set()
                return

        elif navWhere == 'kick' and len(nav) == 2:
            players = await db.Users.filter(~Q(id=fraka.leader), frak=user.frak)
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–≥–Ω–∞—Ç—å –∏–∑ –∫–ª–∞–Ω–∞:\n"
            for z in players:
                text += "\n[{}](tg://user?id={})".format(z.username, z.user_id)
                markup.add(InlineKeyboardButton('{}'.format(z.username), callback_data="frakapanel_kick_{}".format(z.id)))
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='markdown')
        
        elif navWhere == 'ads':
            text = "–†–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è.\n–¢–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã:\n\n{}".format(fraka.adText)
            markup.add(InlineKeyboardButton('–°–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data="frakapanel_changeAdText"))
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

        elif navWhere == 'changeAdText':
            await bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 150 –∑–Ω–∞–∫–æ–≤ –∏ —Å–º–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–æ–∏—Ç 20000üí∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Å —Ñ–æ–Ω–¥–∞ –∫–ª–∞–Ω–∞. –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è - –Ω–∞–ø–∏—Å–∞—Ç—å ''–û—Ç–º–µ–Ω–∏—Ç—å''", call.message.chat.id, call.message.message_id)
            #bot.register_next_step_handler(gg, newTextForFrak)
            await FractionActions.ad_text.set()
            return

        elif navWhere == 'award' and len(nav) > 2:
            awarding = nav[2]
            userToAward = await db.Users.get(id=awarding)
            if userToAward.frak == user.frak:
                await state.update_data(player_award_id=awarding)
                text = '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞ {}.'.format(userToAward.username)
                await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
                #bot.register_next_step_handler(gg, awardingFromFrak)
                await FractionActions.player_award.set()
                return
        elif navWhere == 'award' and len(nav) == 2:
            players = await db.Users.filter(frak=user.frak)
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–≥—Ä–∞–¥–∏—Ç—å:"
            for z in players:
                text += "\n[{}](tg://user?id={})".format(z.username, z.user_id)
                markup.add(InlineKeyboardButton('{}'.format(z.username), callback_data="frakapanel_award_{}".format(z.id)))
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup, parse_mode='markdown')
        
        elif navWhere == 'irtst':
            users = await db.Users.filter(frak=user.frak)
            text = "In Real Time Stats of Tower\n"
            if users:
                for z in users:
                    if z.location in ['–¢—Ä–æ–ø–∞ –∫ –±–∞—à–Ω–µ', '–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏', '–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏', '–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏', '–ß–µ—Ç–≤—ë—Ä—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏']:
                        text += "\n[{}](tg://user?id={}) - {} ({}üî™ {}/{}‚ù§Ô∏è)".format(z.username, z.user_id, z.location, z.atk, z.nowhp, z.hp)
            else:
                text += "\n–í –±–∞—à–Ω–µ —Å–µ–π—á–∞—Å –Ω–∏–∫–æ–≥–æ"
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, parse_mode='markdown')

        elif navWhere == 'kach':
            pricesForArmor = fraka.armor * 5 #ametist
            pricesForCreet = fraka.creet * 5 #rubin
            pricesForAtk = fraka.atk * 5 #sapphire
            priceForAnti = await priceToUpFrak(fraka, param='anti')
            priceForHotel = await priceToUpFrak(fraka, param='hotelLvl')
            priceForOnsen = await priceToUpFrak(fraka, param='onsenLvl')
            qw = priceForAnti.split("|")
            if qw[0] == 'Ametist': qname = "üü£"
            elif qw[0] == 'Rubin': qname = 'üî¥'
            elif qw[0] == 'Izumrud': qname = 'üü¢'
            elif qw[0] == 'Sapphire': qname = 'üîµ'
            elif qw[0] == 'Gold': qname = 'üí∞'
            qwe = priceForHotel.split("|")
            if qw[0] == 'Ametist': qname = "üü£"
            elif qw[0] == 'Rubin': qname = 'üî¥'
            elif qw[0] == 'Izumrud': qname = 'üü¢'
            elif qw[0] == 'Sapphire': qname = 'üîµ'
            elif qw[0] == 'Gold': qname = 'üí∞'
            qwer = priceForOnsen.split("|")
            if qw[0] == 'Ametist': qname = "üü£"
            elif qw[0] == 'Rubin': qname = 'üî¥'
            elif qw[0] == 'Izumrud': qname = 'üü¢'
            elif qw[0] == 'Sapphire': qname = 'üîµ'
            elif qw[0] == 'Gold': qname = 'üí∞'
            text = "–¢–µ–∫—É—â–∏–µ –±–æ–Ω—É—Å—ã –æ—Ç –∫–ª–∞–Ω–∞:\n\n"
            if frak.lvl > frak.atk: text += "–ë–æ–Ω—É—Å –∫ –∞—Ç–∞–∫–µ: + {}% | {}üîµ".format(fraka.atk, pricesForAtk)
            else: text += "–ë–æ–Ω—É—Å –∫ –∞—Ç–∞–∫–µ: + {}% | max".format(fraka.atk)
            if frak.lvl > frak.armor: text += "–ë–æ–Ω—É—Å –∫ –±—Ä–æ–Ω–µ: + {}% | {}üü£".format(fraka.armor, pricesForArmor)
            else: text += "–ë–æ–Ω—É—Å –∫ –±—Ä–æ–Ω–µ: + {}% | max".format(fraka.armor)
            if frak.lvl > frak.creet: text += "–ë–æ–Ω—É—Å –∫ –∫—Ä–∏—Ç—É: + {}% | {}üî¥".format(fraka.creet, pricesForCreet)
            else: text += "–ë–æ–Ω—É—Å –∫ –∫—Ä–∏—Ç—É: + {}% | max".format(fraka.creet)
            if qw[1]: text += "\n–ê–Ω—Ç–∏-–≥—Ä–∞–±—ë–∂: {}% | {}{}".format(fraka.anti, qw[1], qname)
            else: text += "\n–ê–Ω—Ç–∏-–≥—Ä–∞–±—ë–∂: {}% | max".format(fraka.anti)
            if qwer[1]: text += "\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {}% | {}{}".format(fraka.onsenLvl, qwer[1], qname)
            else: text += "\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {}% | max".format(fraka.onsenLvl)
            if qwe[1]: text += "\n–ù–æ—á–ª–µ–≥: {}% | {}{}".format(fraka.hotelLvl, qwe[1], qname)
            else: text += "\n–ù–æ—á–ª–µ–≥: {}% | max".format(fraka.hotelLvl)
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton('–ü–æ–≤—ã—Å–∏—Ç—å –±–æ–Ω—É—Å –∫ –∞—Ç–∞–∫–µ', callback_data="groupBonusKach_atk"))
            markup.add(InlineKeyboardButton('–ü–æ–≤—ã—Å–∏—Ç—å –±–æ–Ω—É—Å –∫ –±—Ä–æ–Ω–µ', callback_data="groupBonusKach_armor"))
            markup.add(InlineKeyboardButton('–ü–æ–≤—ã—Å–∏—Ç—å –±–æ–Ω—É—Å –∫ –∫—Ä–∏—Ç—É', callback_data="groupBonusKach_creete"))
            markup.add(InlineKeyboardButton('–ü–æ–≤—ã—Å–∏—Ç—å –Ω–∞–≤—ã–∫ –∞–Ω—Ç–∏-–≥—Ä–∞–±–µ–∂–∞', callback_data="groupBonusKach_anti"))
            markup.add(InlineKeyboardButton('–£–ª—É—á—à–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏', callback_data="groupBonusKach_onsen"))
            markup.add(InlineKeyboardButton('–£–ª—É—á—à–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã', callback_data="groupBonusKach_hotel"))
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)
        elif navWhere == 'zam':
            markup = InlineKeyboardMarkup(row_width=2)
            users = await db.Users.filter(~Q(id=user.id), frak=user.frak)
            text = "–í—ã–±–æ—Ä –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è –∫–ª–∞–Ω–∞. –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è IRTSoT –∏ —Ñ–æ–Ω–¥–æ–º."
            for x in users:
                markup.add(InlineKeyboardButton('{}'.format(x.username), callback_data="zamSet_{}".format(x.id)))
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)
        elif navWhere == 'changeLead':
            markup = InlineKeyboardMarkup(row_width=2)
            users = await db.Users.filter(~Q(id=user.id), frak=user.frak)
            text = "–í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª–∞–Ω–∞."
            for x in users:
                markup.add(InlineKeyboardButton('{}'.format(x.username), callback_data="leadSet_{}".format(x.id)))
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)
        elif navWhere == 'immunity':
            if fraka.fondKri >= 15:
                if fraka.cooldown >= int(time.time()):
                    await db.Fraks.filter(id=fraka.id).update(fondKri=F('fondKri') - 15, cooldown=F('cooldown') + 43200)
                else:
                    cooldown = int(time.time()) + 43200
                    await db.Fraks.filter(id=fraka.id).update(fondKri=F('fondKri') - 15, cooldown=cooldown)
                await bot.edit_message_text("–í—ã –ø—Ä–æ–¥–ª–∏–ª–∏ –∏–º–º—É–Ω–∏—Ç–µ—Ç –∞–Ω—Ç–∏-–∫—Ä–∞–∂–∏ –Ω–∞ 12 —á–∞—Å–æ–≤", call.message.chat.id, call.message.message_id)
            else:
                await bot.edit_message_text("–í —Ñ–æ–Ω–¥–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤", call.message.chat.id, call.message.message_id)

async def zamSet_(call, user):

    fraka = await db.Fraks.get(name=user.frak)
    nav = call.data.split('_')
    navWhere = nav[1]
    if user.id == fraka.leader:
        usr = await db.Users.exists(id=navWhere)
        if usr:
            usr = await db.Users.get(id=navWhere)
            if usr and usr.frak == fraka.name:
                await db.Fraks.filter(id=fraka.id).update(zam=usr.id)
                try:
                    await bot.send_message(usr.user_id, "–í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º –∫–ª–∞–Ω–∞ {}".format(frak.name))
                except:
                    pass
                await bot.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ {} –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º.".format(usr.username), call.message.chat.id, call.message.message_id)
            else:
                await bot.edit_message_text("–û—à–∏–±–∫–∞", call.message.chat.id, call.message.message_id)
        else:
            await bot.edit_message_text("–û—à–∏–±–∫–∞", call.message.chat.id, call.message.message_id)
    else:
        await bot.edit_message_text("–û—à–∏–±–∫–∞", call.message.chat.id, call.message.message_id)

async def leadSet_(call, user):

    fraka = await db.Fraks.get(name=user.frak)
    nav = call.data.split('_')
    navWhere = nav[1]
    if user.id == fraka.leader:
        usr = await db.Users.exists(id=navWhere)
        if usr:
            usr = await db.Users.get(id=navWhere)
            if usr and usr.frak == fraka.name:
                await db.Fraks.filter(id=fraka.id).update(leader=usr.id)
                try:
                    await bot.send_message(usr.user_id, "–í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–æ–≤—ã–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞ {}".format(frak.name))
                except:
                    pass
                await bot.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ {} –Ω–æ–≤—ã–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞.".format(usr.username), call.message.chat.id, call.message.message_id)
            else:
                await bot.edit_message_text("–û—à–∏–±–∫–∞", call.message.chat.id, call.message.message_id)
        else:
            await bot.edit_message_text("–û—à–∏–±–∫–∞", call.message.chat.id, call.message.message_id)
    else:
        await bot.edit_message_text("–û—à–∏–±–∫–∞", call.message.chat.id, call.message.message_id)


async def sunday(call, user):
    fraka = await db.Fraks.get(name=user.frak)
    sunday = await db.System.get(name='sunday')
    if user.location == '–ë–∞–∑–∞ –∫–ª–∞–Ω–∞' and sunday.value == 1:
        checkItems = await db.Inventory.exists(name='–û–±–ª–æ–º–æ–∫ —Å–∏–Ω–µ–≥–æ –∫–∞–º–Ω—è', idplayer=user.id, active=1)
        if checkItems:
            count = await db.Inventory.filter(name='–û–±–ª–æ–º–æ–∫ —Å–∏–Ω–µ–≥–æ –∫–∞–º–Ω—è', idplayer=user.id, active=1).count()
            await db.Inventory.filter(name='–û–±–ª–æ–º–æ–∫ —Å–∏–Ω–µ–≥–æ –∫–∞–º–Ω—è', idplayer=user.id, active=1).update(active=0)
            await bot.edit_message_text("–¢—ã –≤–Ω—ë—Å x{} –û–±–ª–æ–º–æ–∫ —Å–∏–Ω–µ–≥–æ –∫–∞–º–Ω—è".format(count), call.message.chat.id, call.message.message_id)
            await db.Temp.filter(user_id=user.frak).update(count=F('count') + count)
        else:
            await bot.edit_message_text("–£ —Ç–µ–±—è –Ω–µ—Ç –û–±–ª–æ–º–æ–∫ —Å–∏–Ω–µ–≥–æ –∫–∞–º–Ω—è ", call.message.chat.id, call.message.message_id)



async def groupBonusKach_(call, user): 
    if (call.from_user.id == call.message.chat.id):
        pass
    else:
        return
    fraka = await db.Fraks.get(name=user.frak)
    nav = call.data.split('_')
    navWhere = nav[1]
    if user.id == fraka.leader:
        if navWhere == 'atk':
            if fraka.lvl > fraka.atk:
                need = fraka.atk * 5
                if fraka.sapphire >= need:
                    await db.Fraks.filter(name=fraka.name).update(atk=F('atk') + 1, sapphire=F('sapphire') - need)
                    text = "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ."
                else:
                    text = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤."
            else:
                text = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        elif navWhere == 'armor':
            if fraka.lvl > fraka.armor:
                need = fraka.armor * 5
                if fraka.ametist >= need:
                    await db.Fraks.filter(name=fraka.name).update(armor=F('armor') + 1, ametist=F('ametist') - need)
                    text = "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ."
                else:
                    text = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤."
            else:
                text = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        elif navWhere == 'creet':
            if fraka.lvl > fraka.creet:
                need = fraka.creet * 5
                if fraka.rubin >= need:
                    await db.Fraks.filter(name=fraka.name).update(creet=F('creet') + 1, rubin=F('rubin') - need)
                    text = "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ."
                else:
                    text = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤."
            else:
                text = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ."
        elif navWhere == 'anti':
            priceForAnti = await priceToUpFrak(fraka, param='anti')
            qw = priceForAnti.split("|")
            value = int(qw[1])
            if fraka.fond >= value:
                await db.Fraks.filter(name=fraka.name).update(fond=F('fond') - value, anti=F('anti') + 1)
                text = "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ."
            else:
                text = "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤."
        elif navWhere == 'onsen':
            priceForAnti = await priceToUpFrak(fraka, param='onsenLvl')
            qw = priceForAnti.split("|")
            value = int(qw[1])
            if fraka.fond >= value:
                await db.Fraks.filter(name=fraka.name).update(fond=F('fond') - value, onsenLvl=F('onsenLvl') + 1)
                text = "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ."
            else:
                text = "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤."
        elif navWhere == 'hotel':
            priceForAnti = await priceToUpFrak(fraka, param='hotelLvl')
            qw = priceForAnti.split("|")
            value = int(qw[1])
            if fraka.fond >= value:
                await db.Fraks.filter(name=fraka.name).update(fond=F('fond') - value, hotelLvl=F('hotelLvl') + 1)
                text = "–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ."
            else:
                text = "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤."
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)


@dp.message_handler(lambda m: m.chat.id == m.from_user.id, state=FractionActions.ad_text, content_types=types.ContentTypes.TEXT)
async def newTextForFrak(m, state=FSMContext):
    user = await db.Users.get(user_id=m.from_user.id)
    fraka = await db.Fraks.get(name=user.frak)
    if m.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å':
        await m.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.finish()
        return

    if user.id == fraka.leader:
        if fraka.fond >= 20000:
            await db.Fraks.filter(name=fraka.name).update(adText=m.text, fond=F('fond') - 20000)
            await m.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç", reply_markup=types.ReplyKeyboardRemove())
        else:
            await m.answer("–í —Ñ–æ–Ω–¥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç üí∞", reply_markup=types.ReplyKeyboardRemove())

    await state.finish()


@dp.message_handler(lambda m: m.chat.id == m.from_user.id, state=FractionActions.frac_kick_reason, content_types=types.ContentTypes.TEXT)
async def kickingFromFrak(m, state=FSMContext):

    if m.text.lower() == '–æ—Ç–º–µ–Ω–∏—Ç—å':
        await m.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
        return

    data = await state.get_data()

    user = await db.Users.get(user_id=m.from_user.id)
    fraka = await db.Fraks.get(name=user.frak)
    check = 0
    userToKick = await db.Users.get(id=data['player_to_kick'])
    if userToKick.frak == fraka.name:
        await db.Users.filter(id=userToKick.id).update(frak='')
        await db.Fraks.filter(name=fraka.name).update(players=F('players') - 1)
        check = 1
        try:
            await bot.send_message(userToKick.user_id, "–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∫–ª–∞–Ω–∞ –ø–æ —Ä–µ—à–µ–Ω–∏—é –µ—ë –ª–∏–¥–µ—Ä–∞. –ü—Ä–∏—á–∏–Ω–∞:\n{}".format(m.text))
        except:
            pass
        try:
            await bot.kick_chat_member(groupid, userToKick.user_id)
        except:
            pass
        await bot.send_message(tradeChat, "–ò–≥—Ä–æ–∫ {} –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –∫–ª–∞–Ω–∞ {}".format(userToKick.username, fraka.name))
        await bot.send_message(m.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–∏–ª–∏ –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–ª–∞–Ω–∞", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
    if check == 0:
        await m.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()
        return


@dp.message_handler(lambda m: m.chat.id == m.from_user.id, state=FractionActions.player_award, content_types=types.ContentTypes.TEXT)
async def awardingFromFrak(m, state=FSMContext):

    if not m.text.isdigit():
        await m.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.')
        return

    user = await db.Users.get(user_id=m.from_user.id)
    fraka = await db.Fraks.get(name=user.frak)
    check = 0
    data = await state.get_data()
    userToAward = await db.Users.get(id=data['player_award_id'])
    if userToAward.frak == fraka.name:
        if int(m.text) and fraka.fond >= int(m.text) and int(m.text) > 0:
            await db.Users.filter(id=userToAward.id).update(money=F('money') + int(m.text))
            await db.Fraks.filter(name=fraka.name).update(fond=F('fond') - int(m.text), limitFond=F('limitFond') + int(m.text))
            check = 1
            try:
                await bot.send_message(userToAward.user_id, "–í—ã –±—ã–ª–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω—ã –ª–∏–¥–µ—Ä–æ–º –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {}üí∞".format(m.text))
            except:
                pass
            await bot.send_message(m.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞–≥—Ä–∞–¥–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {} –≤ —Ä–∞–∑–º–µ—Ä–µ {}üí∞".format(userToAward.username, m.text))
            await bot.send_message(tradeChat, "–í–´–ü–õ–ê–¢–ê –û–¢ –§–†–ê–ö–¶–ò–ò {} –ò–ì–†–û–ö–£ {}({}) –í –†–ê–ó–ú–ï–†–ï {}üí∞".format(fraka.name, userToAward.username, userToAward.id, m.text))
            await state.finish()
        else:
            await m.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ß–∏—Å–ª–æ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ, –ª–∏–±–æ –≤ —Ñ–æ–Ω–¥–µ –∫–ª–∞–Ω–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞")
            await state.finish()
            return
    if check == 0:
        await m.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

@dp.message_handler(commands=['frak_award'])
async def frak_award(m):

    command = m.text.replace('/frak_award', '', 1).split(':')
    user = await db.Users.get(user_id=m.from_user.id)
    if user.location != '–ë–∞–∑–∞ –∫–ª–∞–Ω–∞' and user.position != '–°–∞–¥':
        await bot.send_message(m.chat.id, "–û—Ç—Å—é–¥–∞ –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–ª–∞–Ω–æ–º")
        return
    playerToAward = command[0]
    try:
        sumToAward = int(command[1])
    except:
        await bot.send_message(m.from_user.id, "–°—É–º–º–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ –≤ —á–∏—Å–ª–µ")
        return
    frak = await db.Fraks.get(name=user.frak)
    if frak.leader == user.id or frak.zam == user.id:
        player = await db.Users.get(id=playerToAward)
        if sumToAward > 0 and sumToAward <= frak.fondKri and player.frak == frak.name:
            await db.Fraks.filter(name=frak.name).update(fondKri=F('fondKri') - int(sumToAward))
            await db.Users.filter(id=player.id).update(almaz=F('almaz') + int(sumToAward))
            await bot.send_message(m.from_user.id, "–í—ã –Ω–∞–≥—Ä–∞–¥–∏–ª–∏ {} –≤ —Ä–∞–∑–º–µ—Ä–µ {}üíé".format(player.username, sumToAward))
            try:
                await bot.send_message(player.user_id, "–í—ã –±—ã–ª–∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω—ã –ª–∏–¥–µ—Ä–æ–º –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {}üíé".format(sumToAward))
            except:
                pass
            await bot.send_message(tradeChat, "–í–´–ü–õ–ê–¢–ê –û–¢ –§–†–ê–ö–¶–ò–ò {} –ò–ì–†–û–ö–£ {}({}) –í –†–ê–ó–ú–ï–†–ï {}üíé".format(frak.name, player.username, player.id, m.text))
        else:
            await bot.send_message(m.from_user.id, "–û—à–∏–±–∫–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è.")
    else:
        return

@dp.callback_query_handler(lambda call: call.from_user.id == call.message.chat.id and call.data.startswith('tower_'))
async def tower_(call): 
    user = await db.Users.get(user_id=call.from_user.id)
    nav = call.data.split('_')
    navWhere = nav[1]
    if user.battleStatus == 2: return await bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="–í–æ –≤—Ä–µ–º—è PvP –æ—Å–æ–±–æ –Ω–µ –ø–æ–±–µ–≥–∞–µ—à—å...")                
    if navWhere == "1":
        if user.location == '–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏' and user.progLoc == '–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|0' and user.nowhp > 0:
            # user.location = '–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏'
            # user.progLoc = '–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|5'
            # user.progStatus = 1
            await db.Users.filter(id=user.id).update(location='–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏',
                                                    progLoc='–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|5',
                                                    progStatus=1)
            text = "–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏"
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
    elif navWhere == "2":
        if user.location == '–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏' and user.progLoc == '–ü–µ—Ä–≤—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|5' and user.nowhp > 0:
            await db.Users.filter(id=user.id).update(location='–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏',
                                                    progLoc='–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|0',
                                                    progStatus=1)
            text = "–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏"
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
        elif user.location == '–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏' and user.progLoc == '–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|0' and user.nowhp > 0:
            await db.Users.filter(id=user.id).update(location='–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏',
                                                    progLoc='–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|5',
                                                    progStatus=1)
            text = "–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏"
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
    elif navWhere == "3":
        if user.location == '–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏' and user.progLoc == '–í—Ç–æ—Ä–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|5' and user.nowhp > 0:
            await db.Users.filter(id=user.id).update(location='–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏',
                                                    progLoc='–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|0',
                                                    progStatus=1)
            text = "–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Ç—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏"
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
        if user.location == '–ß–µ—Ç–≤—ë—Ä—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏' and user.progLoc == '–ß–µ—Ç–≤—ë—Ä—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|0' and user.nowhp > 0:
            await db.Users.filter(id=user.id).update(location='–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏',
                                                    progLoc='–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|5',
                                                    progStatus=1)
            text = "–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Ç—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏"
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
    elif navWhere == "4":
        if user.location == '–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏' and user.progLoc == '–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|5' and user.nowhp > 0:
            await db.Users.filter(id=user.id).update(location='–ß–µ—Ç–≤—ë—Ä—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏',
                                                    progLoc='–ß–µ—Ç–≤—ë—Ä—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|0',
                                                    progStatus=1)
            text = "–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —á–µ—Ç–≤—ë—Ä—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏"
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
    elif navWhere == "5":
        if user.location == '–ß–µ—Ç–≤—ë—Ä—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏' and user.progLoc == '–ß–µ—Ç–≤—ë—Ä—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|5' and user.nowhp > 0:
            await db.Users.filter(id=user.id).update(location='–ü—è—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏',
                                                    progLoc='–ü—è—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|0',
                                                    progStatus=1)
            text = "–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –ø—è—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏"
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
    elif navWhere == "6":
        if user.location == '–ü—è—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏' and user.progLoc == '–ü—è—Ç—ã–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|13' and user.nowhp > 0:
            await db.Users.filter(id=user.id).update(location='–®–µ—Å—Ç–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏',
                                                    progLoc='–®–µ—Å—Ç–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏|0',
                                                    progStatus=1)
            text = "–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —à–µ—Å—Ç–æ–π —ç—Ç–∞–∂ –±–∞—à–Ω–∏ –ø–∏–ø–µ—Ü —ç—Ç–æ –∫–∞–∫ –≤–æ–æ–±—â–µ"
            await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)
    else:
        text = "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ /report"
        await bot.edit_message_text(text, call.message.chat.id, call.message.message_id)



async def createClan(call, user):
    text = "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–ª–∞–Ω, –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –Ω–∞–ª–∏—á–∏—è 75 —É—Ä–æ–≤–Ω—è, –∞ —Ç–∞–∫ –∂–µ - –æ–ø–ª–∞—Ç–∏–≤ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞–ª–æ–≥ –≤ —Ä–∞–∑–º–µ—Ä–µ 500000üí∞ –∏ 500üíé (–¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ 200+ —É—Ä–æ–≤–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ)."
    text += "\n–ò–º–µ—è –∫–ª–∞–Ω, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫–∏ –∂–µ–ª–∞—é—â–∏—Ö –≤—Å—Ç—É–ø–∏—Ç—å, —É–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ–Ω–¥–æ–º –∫–ª–∞–Ω–∞, —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–∑—ã–≤–æ–º –±–æ—Å—Å–æ–≤, –≤—ã–±—Ä–∞—Ç—å —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω–Ω–æ–≥–æ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –≤—Å—ë –≤—ã—à–µ—É–ø–æ–º—è–Ω—É—Ç–æ–µ."
    text += "\n\n–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª–∞–Ω —Å üõ°–ò–º–º—É–Ω–∏—Ç–µ—Ç–æ–º –∫—Ä–∞–∂–∏ –≤ 2 –Ω–µ–¥–µ–ª–∏, üî™–ë–æ–Ω—É—Å–æ–º –∞—Ç–∞–∫–∏ +20%"
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    if user.lvl >= 200 and user.id not in [2031, 723]:
        markup.add(InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–ª–∞–Ω', callback_data="clanCreate"))
    elif user.lvl >= 75 and user.almaz >= 500 and user.money >= 500000:
        markup.add(InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–ª–∞–Ω', callback_data="clanCreate"))
    markup.add(InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data="nav_bigcity_bar"))
    await bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)

async def clanCreate(call, user):
    if user.lvl >= 200:
        await FractionActions.clanCreation.set()
        await bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –∫–ª–∞–Ω–∞.\n‚ö†Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –º–µ–Ω—å—à–µ 32 —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É –∏ —Å–ª–æ–≤–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∫–ª–∞–Ω –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.", call.message.chat.id, call.message.message_id)
    elif user.lvl >= 75 and user.almaz >= 500 and user.money >= 500000:
        await db.Users.filter(id=user.id).update(almaz=F('almaz') - 500, money=F('money') - 500000)
        await FractionActions.clanCreation.set()
        await bot.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –±—É–¥—É—â–µ–≥–æ –∫–ª–∞–Ω–∞.\n‚ö†Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –º–µ–Ω—å—à–µ 32 —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É –∏ —Å–ª–æ–≤–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∫–ª–∞–Ω –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.", call.message.chat.id, call.message.message_id)


@dp.message_handler(state=FractionActions.clanCreation)
async def clanCreaction(m: types.Message, state=FSMContext):
    if len(m.text) <= 32:
        checkSame = await db.Fraks.get_or_none(name=m.text).first()
        if checkSame:
            await bot.send_message(m.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ.")
        else:
            kd = int(time.time()) + 1209600
            user = await db.Users.get_or_none(user_id=m.from_user.id).first()
            await db.Fraks.create(name=m.text, cooldown=kd, leader=user.id)
            await db.Users.filter(id=user.id).update(frak=m.text)
            await state.finish()
            await FractionActions.clanAd.set()
            await bot.send_message(m.chat.id, "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞–Ω–∞, –¥–æ 150 —Å–∏–º–≤–æ–ª–æ–≤.")
    else:
        await bot.send_message(m.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ.\n‚ö†Ô∏è–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –º–µ–Ω—å—à–µ 32 —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É –∏ —Å–ª–æ–≤–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∫–ª–∞–Ω –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.")

@dp.message_handler(state=FractionActions.clanAd)
async def clanCreaction(m: types.Message, state=FSMContext):
    if len(m.text) <= 149:
        user = await db.Users.get_or_none(user_id=m.from_user.id).first()
        await db.Fraks.filter(name=user.frak).update(adText=m.text)
        await state.finish()
        await bot.send_message(m.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–ª–∞–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –±–∞–∑–µ —Å–≤–æ–µ–≥–æ –∫–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ –≤–æ—Ä–æ—Ç–∞ –•—ç–≤–µ–Ω–±—É—Ä–≥–∞.")
        await bot.send_message(tradeChat, f"–ò–≥—Ä–æ–∫ {user.username} —Å–æ–∑–¥–∞–ª –∫–ª–∞–Ω {user.frak}")
    else:
        await bot.send_message(m.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ.\n‚ö†Ô∏è–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –º–µ–Ω—å—à–µ 150 —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É –∏ —Å–ª–æ–≤–∞ —Å–µ–∫—Å—É–∞–ª—å–Ω–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –∫–ª–∞–Ω –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.")


clansZayv = {}

@dp.message_handler(lambda m:m.text and m.text.startswith('/clanInfo_'))
async def clanInfo_(m):
    if m.chat.id != m.from_user.id: return
    user = await db.Users.get(user_id=m.from_user.id)
    result = m.text.replace('/clanInfo_', '', 1).replace('@TowerOfHeaven_bot', '', 1)
    checkClan = await db.Fraks.get_or_none(id=result).first()
    if checkClan:
        if checkClan.name != user.frak:
            markup = InlineKeyboardMarkup()
            markup.row_width = 2
            markup.add(InlineKeyboardButton('–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ', callback_data="joinClan_{}".format(checkClan.id)))
            leader = await db.Users.get_or_none(id=checkClan.leader).first()
            if leader:
                await m.answer("‚ö†Ô∏è–ü–æ–¥–∞–≤–∞—è –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω, –ª–∏–¥–µ—Ä —É–≤–∏–¥–∏—Ç –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n\n–ö–ª–∞–Ω: {}.\n–í–ª–∞–¥–µ–ª–µ—Ü: {}\n–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {}".format(checkClan.name, leader.username, checkClan.adText), reply_markup=markup)
            else:
                await m.answer("‚ö†Ô∏è–ü–æ–¥–∞–≤–∞—è –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω, –ª–∏–¥–µ—Ä —É–≤–∏–¥–∏—Ç –≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n\n–ö–ª–∞–Ω: {}.\n–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {}".format(checkClan.name, checkClan.adText), reply_markup=markup)
        else:
            await m.answer("–í–∞—à –∫–ª–∞–Ω: {}. {}".format(checkClan.name, checkClan.adText))
    else:
        await m.answer("–¢–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")


async def joinClan_(call, user):
    if user.frak in ['', None]:
        checkClan = await db.Fraks.get_or_none(id=call.data.split("_")[1])
        if checkClan.name not in clansZayv: clansZayv[checkClan.name] = []
        if checkClan:
            if checkClan.name in clansZayv and user.id in clansZayv[checkClan.name]:
                return await bot.edit_message_text("–¢—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç –∫–ª–∞–Ω –Ω–µ–¥–∞–≤–Ω–æ.", call.message.chat.id, call.message.message_id)
            leader = await db.Users.get_or_none(id=checkClan.leader)
            try:
                markup = InlineKeyboardMarkup()
                markup.row_width = 2
                markup.add(InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É', callback_data="acceptClanJoin_{}".format(user.id)))
                markup.add(InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data="declineClanJoin_{}".format(user.id)))
                await bot.send_message(leader.user_id, "‚ö†Ô∏è–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª–∞–Ω –æ—Ç {}.\nID: {}\nüîÜ: {}\n‚ù§Ô∏è: {}\nüî™: {}".format(user.username, user.id, user.lvl, user.hp, user.atk), reply_markup=markup)
            except:
                pass
            await bot.edit_message_text("–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω {} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–∞ –∫–ª–∞–Ω–∞.".format(checkClan.name), call.message.chat.id, call.message.message_id)
            clansZayv[checkClan.name].append(user.id)
    else:
        await bot.edit_message_text("–ö–∞–∂–µ—Ç—Å—è, –≤—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ", call.message.chat.id, call.message.message_id)

async def acceptClanJoin_(call, user):
    clan = await db.Fraks.get(name=user.frak).first()
    members = await db.Users.filter(frak=clan.name).count()
    if clan.lvl >= 8: maxPlayers = 10
    else: maxPlayers = clan.lvl + 2
    if members + 1 > maxPlayers:
        await bot.send_message(call.message.chat.id, "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–æ—Ç–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞.")
    else:
        member = await db.Users.get(id=call.data.split("_")[1]).first()
        if member.frak and member.frak != '':
            await bot.edit_message_text("–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –≤ –¥—Ä—É–≥–æ–º –∫–ª–∞–Ω–µ.", call.message.chat.id, call.message.message_id)
        else:
            member.frak = clan.name
            await bot.edit_message_text("–£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏–Ω—è—Ç –≤ –∫–ª–∞–Ω.", call.message.chat.id, call.message.message_id)
            await member.save()
            try:
                await bot.send_message(member.user_id, "–í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –∫–ª–∞–Ω {}!".format(clan.name))
            except:
                pass

async def declineClanJoin_(call, user):
    clan = await db.Fraks.get(name=user.frak).first()
    await bot.edit_message_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.", call.message.chat.id, call.message.message_id)
    member = await db.Users.filter(id=call.data.split("_")[1]).first()
    try:
        await bot.send_message(member.user_id, "–ö–ª–∞–Ω {} –æ—Ç–∫–∞–∑–∞–ª –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω.".format(clan.name))
    except:
        pass





#async def saturday(call, user):
    #fraka = await db.Fraks.get(name=user.frak)
    #saturday = await db.System.get(name='saturday')
    #if user.location == '–ë–∞–∑–∞ –∫–ª–∞–Ω–∞' and saturday.value == 1:
